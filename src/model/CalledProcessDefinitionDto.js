/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ProcessDefinitionDto} from './ProcessDefinitionDto';

/**
 * The CalledProcessDefinitionDto model module.
 * @module model/CalledProcessDefinitionDto
 * @version 7.20.0
 */
export class CalledProcessDefinitionDto {
  /**
   * Constructs a new <code>CalledProcessDefinitionDto</code>.
   * @alias module:model/CalledProcessDefinitionDto
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>CalledProcessDefinitionDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CalledProcessDefinitionDto} obj Optional instance to populate.
   * @return {module:model/CalledProcessDefinitionDto} The populated <code>CalledProcessDefinitionDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CalledProcessDefinitionDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('key'))
        obj.key = ApiClient.convertToType(data['key'], 'String');
      if (data.hasOwnProperty('category'))
        obj.category = ApiClient.convertToType(data['category'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'Number');
      if (data.hasOwnProperty('resource'))
        obj.resource = ApiClient.convertToType(data['resource'], 'String');
      if (data.hasOwnProperty('deploymentId'))
        obj.deploymentId = ApiClient.convertToType(data['deploymentId'], 'String');
      if (data.hasOwnProperty('diagram'))
        obj.diagram = ApiClient.convertToType(data['diagram'], 'String');
      if (data.hasOwnProperty('suspended'))
        obj.suspended = ApiClient.convertToType(data['suspended'], 'Boolean');
      if (data.hasOwnProperty('tenantId'))
        obj.tenantId = ApiClient.convertToType(data['tenantId'], 'String');
      if (data.hasOwnProperty('versionTag'))
        obj.versionTag = ApiClient.convertToType(data['versionTag'], 'String');
      if (data.hasOwnProperty('historyTimeToLive'))
        obj.historyTimeToLive = ApiClient.convertToType(data['historyTimeToLive'], 'Number');
      if (data.hasOwnProperty('startableInTasklist'))
        obj.startableInTasklist = ApiClient.convertToType(data['startableInTasklist'], 'Boolean');
    }
    return obj;
  }
}

/**
 * The id of the process definition
 * @member {String} id
 */
CalledProcessDefinitionDto.prototype.id = undefined;

/**
 * The key of the process definition, i.e., the id of the BPMN 2.0 XML process definition.
 * @member {String} key
 */
CalledProcessDefinitionDto.prototype.key = undefined;

/**
 * The category of the process definition.
 * @member {String} category
 */
CalledProcessDefinitionDto.prototype.category = undefined;

/**
 * The description of the process definition.
 * @member {String} description
 */
CalledProcessDefinitionDto.prototype.description = undefined;

/**
 * The name of the process definition.
 * @member {String} name
 */
CalledProcessDefinitionDto.prototype.name = undefined;

/**
 * The version of the process definition that the engine assigned to it.
 * @member {Number} version
 */
CalledProcessDefinitionDto.prototype.version = undefined;

/**
 * The file name of the process definition.
 * @member {String} resource
 */
CalledProcessDefinitionDto.prototype.resource = undefined;

/**
 * The deployment id of the process definition.
 * @member {String} deploymentId
 */
CalledProcessDefinitionDto.prototype.deploymentId = undefined;

/**
 * The file name of the process definition diagram, if it exists.
 * @member {String} diagram
 */
CalledProcessDefinitionDto.prototype.diagram = undefined;

/**
 * A flag indicating whether the definition is suspended or not.
 * @member {Boolean} suspended
 */
CalledProcessDefinitionDto.prototype.suspended = undefined;

/**
 * The tenant id of the process definition.
 * @member {String} tenantId
 */
CalledProcessDefinitionDto.prototype.tenantId = undefined;

/**
 * The version tag of the process definition.
 * @member {String} versionTag
 */
CalledProcessDefinitionDto.prototype.versionTag = undefined;

/**
 * History time to live value of the process definition. Is used within [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup).
 * @member {Number} historyTimeToLive
 */
CalledProcessDefinitionDto.prototype.historyTimeToLive = undefined;

/**
 * A flag indicating whether the process definition is startable in Tasklist or not.
 * @member {Boolean} startableInTasklist
 */
CalledProcessDefinitionDto.prototype.startableInTasklist = undefined;

