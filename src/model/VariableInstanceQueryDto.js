/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {VariableInstanceQueryDtoSorting} from './VariableInstanceQueryDtoSorting';
import {VariableQueryParameterDto} from './VariableQueryParameterDto';

/**
 * The VariableInstanceQueryDto model module.
 * @module model/VariableInstanceQueryDto
 * @version 7.20.0
 */
export class VariableInstanceQueryDto {
  /**
   * Constructs a new <code>VariableInstanceQueryDto</code>.
   * A variable instance query which defines a list of variable instances
   * @alias module:model/VariableInstanceQueryDto
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>VariableInstanceQueryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariableInstanceQueryDto} obj Optional instance to populate.
   * @return {module:model/VariableInstanceQueryDto} The populated <code>VariableInstanceQueryDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new VariableInstanceQueryDto();
      if (data.hasOwnProperty('variableName'))
        obj.variableName = ApiClient.convertToType(data['variableName'], 'String');
      if (data.hasOwnProperty('variableNameLike'))
        obj.variableNameLike = ApiClient.convertToType(data['variableNameLike'], 'String');
      if (data.hasOwnProperty('processInstanceIdIn'))
        obj.processInstanceIdIn = ApiClient.convertToType(data['processInstanceIdIn'], ['String']);
      if (data.hasOwnProperty('executionIdIn'))
        obj.executionIdIn = ApiClient.convertToType(data['executionIdIn'], ['String']);
      if (data.hasOwnProperty('caseInstanceIdIn'))
        obj.caseInstanceIdIn = ApiClient.convertToType(data['caseInstanceIdIn'], ['String']);
      if (data.hasOwnProperty('caseExecutionIdIn'))
        obj.caseExecutionIdIn = ApiClient.convertToType(data['caseExecutionIdIn'], ['String']);
      if (data.hasOwnProperty('taskIdIn'))
        obj.taskIdIn = ApiClient.convertToType(data['taskIdIn'], ['String']);
      if (data.hasOwnProperty('batchIdIn'))
        obj.batchIdIn = ApiClient.convertToType(data['batchIdIn'], ['String']);
      if (data.hasOwnProperty('activityInstanceIdIn'))
        obj.activityInstanceIdIn = ApiClient.convertToType(data['activityInstanceIdIn'], ['String']);
      if (data.hasOwnProperty('tenantIdIn'))
        obj.tenantIdIn = ApiClient.convertToType(data['tenantIdIn'], ['String']);
      if (data.hasOwnProperty('variableValues'))
        obj.variableValues = ApiClient.convertToType(data['variableValues'], [VariableQueryParameterDto]);
      if (data.hasOwnProperty('variableNamesIgnoreCase'))
        obj.variableNamesIgnoreCase = ApiClient.convertToType(data['variableNamesIgnoreCase'], 'Boolean');
      if (data.hasOwnProperty('variableValuesIgnoreCase'))
        obj.variableValuesIgnoreCase = ApiClient.convertToType(data['variableValuesIgnoreCase'], 'Boolean');
      if (data.hasOwnProperty('variableScopeIdIn'))
        obj.variableScopeIdIn = ApiClient.convertToType(data['variableScopeIdIn'], ['String']);
      if (data.hasOwnProperty('sorting'))
        obj.sorting = ApiClient.convertToType(data['sorting'], [VariableInstanceQueryDtoSorting]);
    }
    return obj;
  }
}

/**
 * Filter by variable instance name.
 * @member {String} variableName
 */
VariableInstanceQueryDto.prototype.variableName = undefined;

/**
 * Filter by the variable instance name. The parameter can include the wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains (`%`name`%`).
 * @member {String} variableNameLike
 */
VariableInstanceQueryDto.prototype.variableNameLike = undefined;

/**
 * Only include variable instances which belong to one of the passed  process instance ids.
 * @member {Array.<String>} processInstanceIdIn
 */
VariableInstanceQueryDto.prototype.processInstanceIdIn = undefined;

/**
 * Only include variable instances which belong to one of the passed  execution ids.
 * @member {Array.<String>} executionIdIn
 */
VariableInstanceQueryDto.prototype.executionIdIn = undefined;

/**
 * Only include variable instances which belong to one of the passed  case instance ids.
 * @member {Array.<String>} caseInstanceIdIn
 */
VariableInstanceQueryDto.prototype.caseInstanceIdIn = undefined;

/**
 * Only include variable instances which belong to one of the passed  case execution ids.
 * @member {Array.<String>} caseExecutionIdIn
 */
VariableInstanceQueryDto.prototype.caseExecutionIdIn = undefined;

/**
 * Only include variable instances which belong to one of the passed  task ids.
 * @member {Array.<String>} taskIdIn
 */
VariableInstanceQueryDto.prototype.taskIdIn = undefined;

/**
 * Only include variable instances which belong to one of the passed  batch ids.
 * @member {Array.<String>} batchIdIn
 */
VariableInstanceQueryDto.prototype.batchIdIn = undefined;

/**
 * Only include variable instances which belong to one of the passed  activity instance ids.
 * @member {Array.<String>} activityInstanceIdIn
 */
VariableInstanceQueryDto.prototype.activityInstanceIdIn = undefined;

/**
 * Only include variable instances which belong to one of the passed  tenant ids.
 * @member {Array.<String>} tenantIdIn
 */
VariableInstanceQueryDto.prototype.tenantIdIn = undefined;

/**
 * An array to only include variable instances that have the certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`
 * @member {Array.<module:model/VariableQueryParameterDto>} variableValues
 */
VariableInstanceQueryDto.prototype.variableValues = undefined;

/**
 * Match all variable names provided in `variableValues` case-insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
 * @member {Boolean} variableNamesIgnoreCase
 */
VariableInstanceQueryDto.prototype.variableNamesIgnoreCase = undefined;

/**
 * Match all variable values provided in `variableValues` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
 * @member {Boolean} variableValuesIgnoreCase
 */
VariableInstanceQueryDto.prototype.variableValuesIgnoreCase = undefined;

/**
 * Only include variable instances which belong to one of passed scope ids.
 * @member {Array.<String>} variableScopeIdIn
 */
VariableInstanceQueryDto.prototype.variableScopeIdIn = undefined;

/**
 * An array of criteria to sort the result by. Each element of the array is an object that specifies one ordering.                       The position in the array identifies the rank of an ordering, i.e., whether it is primary, secondary, etc.                       Sorting has no effect for `count` endpoints
 * @member {Array.<module:model/VariableInstanceQueryDtoSorting>} sorting
 */
VariableInstanceQueryDto.prototype.sorting = undefined;

