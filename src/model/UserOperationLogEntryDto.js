/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The UserOperationLogEntryDto model module.
 * @module model/UserOperationLogEntryDto
 * @version 7.20.0
 */
export class UserOperationLogEntryDto {
  /**
   * Constructs a new <code>UserOperationLogEntryDto</code>.
   * @alias module:model/UserOperationLogEntryDto
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>UserOperationLogEntryDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserOperationLogEntryDto} obj Optional instance to populate.
   * @return {module:model/UserOperationLogEntryDto} The populated <code>UserOperationLogEntryDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UserOperationLogEntryDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'String');
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'Date');
      if (data.hasOwnProperty('operationId'))
        obj.operationId = ApiClient.convertToType(data['operationId'], 'String');
      if (data.hasOwnProperty('operationType'))
        obj.operationType = ApiClient.convertToType(data['operationType'], 'String');
      if (data.hasOwnProperty('entityType'))
        obj.entityType = ApiClient.convertToType(data['entityType'], 'String');
      if (data.hasOwnProperty('category'))
        obj.category = ApiClient.convertToType(data['category'], 'String');
      if (data.hasOwnProperty('annotation'))
        obj.annotation = ApiClient.convertToType(data['annotation'], 'String');
      if (data.hasOwnProperty('property'))
        obj.property = ApiClient.convertToType(data['property'], 'String');
      if (data.hasOwnProperty('orgValue'))
        obj.orgValue = ApiClient.convertToType(data['orgValue'], 'String');
      if (data.hasOwnProperty('newValue'))
        obj.newValue = ApiClient.convertToType(data['newValue'], 'String');
      if (data.hasOwnProperty('deploymentId'))
        obj.deploymentId = ApiClient.convertToType(data['deploymentId'], 'String');
      if (data.hasOwnProperty('processDefinitionId'))
        obj.processDefinitionId = ApiClient.convertToType(data['processDefinitionId'], 'String');
      if (data.hasOwnProperty('processDefinitionKey'))
        obj.processDefinitionKey = ApiClient.convertToType(data['processDefinitionKey'], 'String');
      if (data.hasOwnProperty('processInstanceId'))
        obj.processInstanceId = ApiClient.convertToType(data['processInstanceId'], 'String');
      if (data.hasOwnProperty('executionId'))
        obj.executionId = ApiClient.convertToType(data['executionId'], 'String');
      if (data.hasOwnProperty('caseDefinitionId'))
        obj.caseDefinitionId = ApiClient.convertToType(data['caseDefinitionId'], 'String');
      if (data.hasOwnProperty('caseInstanceId'))
        obj.caseInstanceId = ApiClient.convertToType(data['caseInstanceId'], 'String');
      if (data.hasOwnProperty('caseExecutionId'))
        obj.caseExecutionId = ApiClient.convertToType(data['caseExecutionId'], 'String');
      if (data.hasOwnProperty('taskId'))
        obj.taskId = ApiClient.convertToType(data['taskId'], 'String');
      if (data.hasOwnProperty('externalTaskId'))
        obj.externalTaskId = ApiClient.convertToType(data['externalTaskId'], 'String');
      if (data.hasOwnProperty('batchId'))
        obj.batchId = ApiClient.convertToType(data['batchId'], 'String');
      if (data.hasOwnProperty('jobId'))
        obj.jobId = ApiClient.convertToType(data['jobId'], 'String');
      if (data.hasOwnProperty('jobDefinitionId'))
        obj.jobDefinitionId = ApiClient.convertToType(data['jobDefinitionId'], 'String');
      if (data.hasOwnProperty('removalTime'))
        obj.removalTime = ApiClient.convertToType(data['removalTime'], 'Date');
      if (data.hasOwnProperty('rootProcessInstanceId'))
        obj.rootProcessInstanceId = ApiClient.convertToType(data['rootProcessInstanceId'], 'String');
    }
    return obj;
  }
}

/**
 * The unique identifier of this log entry.
 * @member {String} id
 */
UserOperationLogEntryDto.prototype.id = undefined;

/**
 * The user who performed this operation.
 * @member {String} userId
 */
UserOperationLogEntryDto.prototype.userId = undefined;

/**
 * Timestamp of this operation.
 * @member {Date} timestamp
 */
UserOperationLogEntryDto.prototype.timestamp = undefined;

/**
 * The unique identifier of this operation. A composite operation that changes multiple properties has a common `operationId`.
 * @member {String} operationId
 */
UserOperationLogEntryDto.prototype.operationId = undefined;

/**
 * The type of this operation, e.g., `Assign`, `Claim` and so on.
 * @member {String} operationType
 */
UserOperationLogEntryDto.prototype.operationType = undefined;

/**
 * The type of the entity on which this operation was executed, e.g., `Task` or `Attachment`.
 * @member {String} entityType
 */
UserOperationLogEntryDto.prototype.entityType = undefined;

/**
 * The name of the category this operation was associated with, e.g., `TaskWorker` or `Admin`.
 * @member {String} category
 */
UserOperationLogEntryDto.prototype.category = undefined;

/**
 * An arbitrary annotation set by a user for auditing reasons.
 * @member {String} annotation
 */
UserOperationLogEntryDto.prototype.annotation = undefined;

/**
 * The property changed by this operation.
 * @member {String} property
 */
UserOperationLogEntryDto.prototype.property = undefined;

/**
 * The original value of the changed property.
 * @member {String} orgValue
 */
UserOperationLogEntryDto.prototype.orgValue = undefined;

/**
 * The new value of the changed property.
 * @member {String} newValue
 */
UserOperationLogEntryDto.prototype.newValue = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this deployment.
 * @member {String} deploymentId
 */
UserOperationLogEntryDto.prototype.deploymentId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this process definition.
 * @member {String} processDefinitionId
 */
UserOperationLogEntryDto.prototype.processDefinitionId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to process definitions with this key.
 * @member {String} processDefinitionKey
 */
UserOperationLogEntryDto.prototype.processDefinitionKey = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this process instance.
 * @member {String} processInstanceId
 */
UserOperationLogEntryDto.prototype.processInstanceId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this execution.
 * @member {String} executionId
 */
UserOperationLogEntryDto.prototype.executionId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this case definition.
 * @member {String} caseDefinitionId
 */
UserOperationLogEntryDto.prototype.caseDefinitionId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this case instance.
 * @member {String} caseInstanceId
 */
UserOperationLogEntryDto.prototype.caseInstanceId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this case execution.
 * @member {String} caseExecutionId
 */
UserOperationLogEntryDto.prototype.caseExecutionId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this task.
 * @member {String} taskId
 */
UserOperationLogEntryDto.prototype.taskId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this external task.
 * @member {String} externalTaskId
 */
UserOperationLogEntryDto.prototype.externalTaskId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this batch.
 * @member {String} batchId
 */
UserOperationLogEntryDto.prototype.batchId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this job.
 * @member {String} jobId
 */
UserOperationLogEntryDto.prototype.jobId = undefined;

/**
 * If not `null`, the operation is restricted to entities in relation to this job definition.
 * @member {String} jobDefinitionId
 */
UserOperationLogEntryDto.prototype.jobDefinitionId = undefined;

/**
 * The time after which the entry should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
 * @member {Date} removalTime
 */
UserOperationLogEntryDto.prototype.removalTime = undefined;

/**
 * The process instance id of the root process instance that initiated the process containing this entry.
 * @member {String} rootProcessInstanceId
 */
UserOperationLogEntryDto.prototype.rootProcessInstanceId = undefined;

