/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The MultiFormDeploymentDto model module.
 * @module model/MultiFormDeploymentDto
 * @version 7.20.0
 */
export class MultiFormDeploymentDto {
  /**
   * Constructs a new <code>MultiFormDeploymentDto</code>.
   * @alias module:model/MultiFormDeploymentDto
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>MultiFormDeploymentDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MultiFormDeploymentDto} obj Optional instance to populate.
   * @return {module:model/MultiFormDeploymentDto} The populated <code>MultiFormDeploymentDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MultiFormDeploymentDto();
      if (data.hasOwnProperty('tenant-id'))
        obj.tenantId = ApiClient.convertToType(data['tenant-id'], 'String');
      if (data.hasOwnProperty('deployment-source'))
        obj.deploymentSource = ApiClient.convertToType(data['deployment-source'], 'String');
      if (data.hasOwnProperty('deploy-changed-only'))
        obj.deployChangedOnly = ApiClient.convertToType(data['deploy-changed-only'], 'Boolean');
      if (data.hasOwnProperty('enable-duplicate-filtering'))
        obj.enableDuplicateFiltering = ApiClient.convertToType(data['enable-duplicate-filtering'], 'Boolean');
      if (data.hasOwnProperty('deployment-name'))
        obj.deploymentName = ApiClient.convertToType(data['deployment-name'], 'String');
      if (data.hasOwnProperty('deployment-activation-time'))
        obj.deploymentActivationTime = ApiClient.convertToType(data['deployment-activation-time'], 'Date');
      if (data.hasOwnProperty('data'))
        obj.data = ApiClient.convertToType(data['data'], 'Blob');
    }
    return obj;
  }
}

/**
 * The tenant id for the deployment to be created.
 * @member {String} tenantId
 */
MultiFormDeploymentDto.prototype.tenantId = undefined;

/**
 * The source for the deployment to be created.
 * @member {String} deploymentSource
 */
MultiFormDeploymentDto.prototype.deploymentSource = undefined;

/**
 * A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true.
 * @member {Boolean} deployChangedOnly
 * @default false
 */
MultiFormDeploymentDto.prototype.deployChangedOnly = false;

/**
 * A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false.
 * @member {Boolean} enableDuplicateFiltering
 * @default false
 */
MultiFormDeploymentDto.prototype.enableDuplicateFiltering = false;

/**
 * The name for the deployment to be created.
 * @member {String} deploymentName
 */
MultiFormDeploymentDto.prototype.deploymentName = undefined;

/**
 * Sets the date on which the process definitions contained in this deployment will be activated. This means that all process definitions will be deployed as usual, but they will be suspended from the start until the given activation date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
 * @member {Date} deploymentActivationTime
 */
MultiFormDeploymentDto.prototype.deploymentActivationTime = undefined;

/**
 * The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment.
 * @member {Blob} data
 */
MultiFormDeploymentDto.prototype.data = undefined;

