/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The HistoricExternalTaskLogDto model module.
 * @module model/HistoricExternalTaskLogDto
 * @version 7.20.0
 */
export class HistoricExternalTaskLogDto {
  /**
   * Constructs a new <code>HistoricExternalTaskLogDto</code>.
   * @alias module:model/HistoricExternalTaskLogDto
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>HistoricExternalTaskLogDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/HistoricExternalTaskLogDto} obj Optional instance to populate.
   * @return {module:model/HistoricExternalTaskLogDto} The populated <code>HistoricExternalTaskLogDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new HistoricExternalTaskLogDto();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('externalTaskId'))
        obj.externalTaskId = ApiClient.convertToType(data['externalTaskId'], 'String');
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'Date');
      if (data.hasOwnProperty('topicName'))
        obj.topicName = ApiClient.convertToType(data['topicName'], 'String');
      if (data.hasOwnProperty('workerId'))
        obj.workerId = ApiClient.convertToType(data['workerId'], 'String');
      if (data.hasOwnProperty('retries'))
        obj.retries = ApiClient.convertToType(data['retries'], 'Number');
      if (data.hasOwnProperty('priority'))
        obj.priority = ApiClient.convertToType(data['priority'], 'Number');
      if (data.hasOwnProperty('errorMessage'))
        obj.errorMessage = ApiClient.convertToType(data['errorMessage'], 'String');
      if (data.hasOwnProperty('activityId'))
        obj.activityId = ApiClient.convertToType(data['activityId'], 'String');
      if (data.hasOwnProperty('activityInstanceId'))
        obj.activityInstanceId = ApiClient.convertToType(data['activityInstanceId'], 'String');
      if (data.hasOwnProperty('executionId'))
        obj.executionId = ApiClient.convertToType(data['executionId'], 'String');
      if (data.hasOwnProperty('processInstanceId'))
        obj.processInstanceId = ApiClient.convertToType(data['processInstanceId'], 'String');
      if (data.hasOwnProperty('processDefinitionId'))
        obj.processDefinitionId = ApiClient.convertToType(data['processDefinitionId'], 'String');
      if (data.hasOwnProperty('processDefinitionKey'))
        obj.processDefinitionKey = ApiClient.convertToType(data['processDefinitionKey'], 'String');
      if (data.hasOwnProperty('tenantId'))
        obj.tenantId = ApiClient.convertToType(data['tenantId'], 'String');
      if (data.hasOwnProperty('creationLog'))
        obj.creationLog = ApiClient.convertToType(data['creationLog'], 'Boolean');
      if (data.hasOwnProperty('failureLog'))
        obj.failureLog = ApiClient.convertToType(data['failureLog'], 'Boolean');
      if (data.hasOwnProperty('successLog'))
        obj.successLog = ApiClient.convertToType(data['successLog'], 'Boolean');
      if (data.hasOwnProperty('deletionLog'))
        obj.deletionLog = ApiClient.convertToType(data['deletionLog'], 'Boolean');
      if (data.hasOwnProperty('removalTime'))
        obj.removalTime = ApiClient.convertToType(data['removalTime'], 'Date');
      if (data.hasOwnProperty('rootProcessInstanceId'))
        obj.rootProcessInstanceId = ApiClient.convertToType(data['rootProcessInstanceId'], 'String');
    }
    return obj;
  }
}

/**
 * The id of the log entry.
 * @member {String} id
 */
HistoricExternalTaskLogDto.prototype.id = undefined;

/**
 * The id of the external task.
 * @member {String} externalTaskId
 */
HistoricExternalTaskLogDto.prototype.externalTaskId = undefined;

/**
 * The time when the log entry has been written.
 * @member {Date} timestamp
 */
HistoricExternalTaskLogDto.prototype.timestamp = undefined;

/**
 * The topic name of the associated external task.
 * @member {String} topicName
 */
HistoricExternalTaskLogDto.prototype.topicName = undefined;

/**
 * The id of the worker that posessed the most recent lock.
 * @member {String} workerId
 */
HistoricExternalTaskLogDto.prototype.workerId = undefined;

/**
 * The number of retries the associated external task has left.
 * @member {Number} retries
 */
HistoricExternalTaskLogDto.prototype.retries = undefined;

/**
 * The execution priority the external task had when the log entry was created.
 * @member {Number} priority
 */
HistoricExternalTaskLogDto.prototype.priority = undefined;

/**
 * The message of the error that occurred by executing the associated external task.
 * @member {String} errorMessage
 */
HistoricExternalTaskLogDto.prototype.errorMessage = undefined;

/**
 * The id of the activity on which the associated external task was created.
 * @member {String} activityId
 */
HistoricExternalTaskLogDto.prototype.activityId = undefined;

/**
 * The id of the activity instance on which the associated external task was created.
 * @member {String} activityInstanceId
 */
HistoricExternalTaskLogDto.prototype.activityInstanceId = undefined;

/**
 * The execution id on which the associated external task was created.
 * @member {String} executionId
 */
HistoricExternalTaskLogDto.prototype.executionId = undefined;

/**
 * The id of the process instance on which the associated external task was created.
 * @member {String} processInstanceId
 */
HistoricExternalTaskLogDto.prototype.processInstanceId = undefined;

/**
 * The id of the process definition which the associated external task belongs to.
 * @member {String} processDefinitionId
 */
HistoricExternalTaskLogDto.prototype.processDefinitionId = undefined;

/**
 * The key of the process definition which the associated external task belongs to.
 * @member {String} processDefinitionKey
 */
HistoricExternalTaskLogDto.prototype.processDefinitionKey = undefined;

/**
 * The id of the tenant that this historic external task log entry belongs to.
 * @member {String} tenantId
 */
HistoricExternalTaskLogDto.prototype.tenantId = undefined;

/**
 * A flag indicating whether this log represents the creation of the associated external task.
 * @member {Boolean} creationLog
 */
HistoricExternalTaskLogDto.prototype.creationLog = undefined;

/**
 * A flag indicating whether this log represents the failed execution of the associated external task.
 * @member {Boolean} failureLog
 */
HistoricExternalTaskLogDto.prototype.failureLog = undefined;

/**
 * A flag indicating whether this log represents the successful execution of the associated external task.
 * @member {Boolean} successLog
 */
HistoricExternalTaskLogDto.prototype.successLog = undefined;

/**
 * A flag indicating whether this log represents the deletion of the associated external task.
 * @member {Boolean} deletionLog
 */
HistoricExternalTaskLogDto.prototype.deletionLog = undefined;

/**
 * The time after which this log should be removed by the History Cleanup job. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  For further information, please see the [documentation](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/)
 * @member {Date} removalTime
 */
HistoricExternalTaskLogDto.prototype.removalTime = undefined;

/**
 * The process instance id of the root process instance that initiated the process containing this log.
 * @member {String} rootProcessInstanceId
 */
HistoricExternalTaskLogDto.prototype.rootProcessInstanceId = undefined;

