/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CountResultDto} from '../model/CountResultDto';
import {DecisionDefinitionDiagramDto} from '../model/DecisionDefinitionDiagramDto';
import {DecisionDefinitionDto} from '../model/DecisionDefinitionDto';
import {EvaluateDecisionDto} from '../model/EvaluateDecisionDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {HistoryTimeToLiveDto} from '../model/HistoryTimeToLiveDto';
import {VariableValueDto} from '../model/VariableValueDto';

/**
* DecisionDefinition service.
* @module api/DecisionDefinitionApi
* @version 7.20.0
*/
export class DecisionDefinitionApi {

    /**
    * Constructs a new DecisionDefinitionApi. 
    * @alias module:api/DecisionDefinitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the evaluateDecisionById operation.
     * @callback moduleapi/DecisionDefinitionApi~evaluateDecisionByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{'String': VariableValueDto}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate By Id
     * Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
     * @param {String} id The id of the decision definition to be evaluated.
     * @param {Object} opts Optional parameters
     * @param {module:model/EvaluateDecisionDto} opts.body 
     * @param {module:api/DecisionDefinitionApi~evaluateDecisionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    evaluateDecisionById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling evaluateDecisionById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [{'String': VariableValueDto}];

      return this.apiClient.callApi(
        '/decision-definition/{id}/evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the evaluateDecisionByKey operation.
     * @callback moduleapi/DecisionDefinitionApi~evaluateDecisionByKeyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{'String': VariableValueDto}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate By Key
     * Evaluates the latest version of the decision definition which belongs to no tenant. The input values of the decision have to be supplied in the request body.
     * @param {String} key The key of the decision definition (the latest version thereof) to be evaluated.
     * @param {Object} opts Optional parameters
     * @param {module:model/EvaluateDecisionDto} opts.body 
     * @param {module:api/DecisionDefinitionApi~evaluateDecisionByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    evaluateDecisionByKey(key, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling evaluateDecisionByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [{'String': VariableValueDto}];

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the evaluateDecisionByKeyAndTenant operation.
     * @callback moduleapi/DecisionDefinitionApi~evaluateDecisionByKeyAndTenantCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{'String': VariableValueDto}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate By Key And Tenant
     * Evaluates the latest version of the decision definition for tenant. The input values of the decision have to be supplied in the request body.
     * @param {String} key The key of the decision definition (the latest version thereof) to be evaluated.
     * @param {String} tenantId The id of the tenant the decision definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/EvaluateDecisionDto} opts.body 
     * @param {module:api/DecisionDefinitionApi~evaluateDecisionByKeyAndTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    evaluateDecisionByKeyAndTenant(key, tenantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling evaluateDecisionByKeyAndTenant");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling evaluateDecisionByKeyAndTenant");
      }

      let pathParams = {
        'key': key,'tenant-id': tenantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [{'String': VariableValueDto}];

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionById operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Decision Definition By Id
     * Retrieves a decision definition by id, according to the &#x60;DecisionDefinition&#x60; interface in the engine.
     * @param {String} id The id of the decision definition to be retrieved.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDecisionDefinitionById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DecisionDefinitionDto;

      return this.apiClient.callApi(
        '/decision-definition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionByKey operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Decision Definition By Key
     * Retrieves the latest version of the decision definition which belongs to no tenant.
     * @param {String} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionByKey(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DecisionDefinitionDto;

      return this.apiClient.callApi(
        '/decision-definition/key/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionByKeyAndTenantId operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionByKeyAndTenantIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Decision Definition By Key And Tenant Id
     * Retrieves the latest version of the decision definition for tenant
     * @param {String} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the decision definition belongs to.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionByKeyAndTenantIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionByKeyAndTenantId(key, tenantId, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionByKeyAndTenantId");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getDecisionDefinitionByKeyAndTenantId");
      }

      let pathParams = {
        'key': key,'tenant-id': tenantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DecisionDefinitionDto;

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/tenant-id/{tenant-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionDiagram operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionDiagramCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Diagram
     * Retrieves the diagram of a decision definition.
     * @param {String} id The id of the process definition.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionDiagram(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDecisionDefinitionDiagram");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/decision-definition/{id}/diagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionDiagramByKey operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionDiagramByKeyCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Diagram By Key
     * Returns the diagram for the latest version of the decision definition which belongs to no tenant
     * @param {String} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDiagramByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionDiagramByKey(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDiagramByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/diagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionDiagramByKeyAndTenant operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionDiagramByKeyAndTenantCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Diagram By Key And Tenant
     * Returns the XML of the latest version of the decision definition for tenant.
     * @param {String} key The key of the decision definition (the latest version thereof) to be retrieved.
     * @param {String} tenantId The id of the tenant the decision definition belongs to.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDiagramByKeyAndTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionDiagramByKeyAndTenant(key, tenantId, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDiagramByKeyAndTenant");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getDecisionDefinitionDiagramByKeyAndTenant");
      }

      let pathParams = {
        'key': key,'tenant-id': tenantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionDmnXmlById operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionDmnXmlByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDiagramDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get XML By Id
     * Retrieves the DMN XML of a decision definition.
     * @param {String} id The id of the decision definition.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXmlByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionDmnXmlById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDecisionDefinitionDmnXmlById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DecisionDefinitionDiagramDto;

      return this.apiClient.callApi(
        '/decision-definition/{id}/xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionDmnXmlByKey operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionDmnXmlByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDiagramDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get XML By Key
     * Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
     * @param {String} key The key of the decision definition (the latest version thereof).
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXmlByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionDmnXmlByKey(key, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDmnXmlByKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DecisionDefinitionDiagramDto;

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionDmnXmlByKeyAndTenant operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionDmnXmlByKeyAndTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecisionDefinitionDiagramDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get XML By Key and Tenant
     * Retrieves the XML of the latest version of the decision definition for tenant
     * @param {String} key The key of the decision definition (the latest version thereof).
     * @param {String} tenantId The id of the tenant the decision definition belongs to.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionDmnXmlByKeyAndTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionDmnXmlByKeyAndTenant(key, tenantId, callback) {
      
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDecisionDefinitionDmnXmlByKeyAndTenant");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getDecisionDefinitionDmnXmlByKeyAndTenant");
      }

      let pathParams = {
        'key': key,'tenant-id': tenantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DecisionDefinitionDiagramDto;

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/tenant-id/{tenant-id}/xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitions operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DecisionDefinitionDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List
     * Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the [Get Decision Definition Count](https://docs.camunda.org/manual/develop/reference/rest/decision-definition/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.decisionDefinitionId Filter by decision definition id.
     * @param {String} opts.decisionDefinitionIdIn Filter by decision definition ids.
     * @param {String} opts.name Filter by decision definition name.
     * @param {String} opts.nameLike Filter by decision definition names that the parameter is a substring of.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {Date} opts.deployedAfter Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
     * @param {Date} opts.deployedAt Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
     * @param {String} opts.key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param {String} opts.keyLike Filter by decision definition keys that the parameter is a substring of.
     * @param {String} opts.category Filter by decision definition category. Exact match.
     * @param {String} opts.categoryLike Filter by decision definition categories that the parameter is a substring of.
     * @param {Number} opts.version Filter by decision definition version.
     * @param {Boolean} opts.latestVersion Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the decision definition resource. Exact match.
     * @param {String} opts.resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of.
     * @param {String} opts.decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param {String} opts.decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param {Boolean} opts.withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tags of those decision definition resources that the parameter is a substring of.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults'],'decisionDefinitionId': opts['decisionDefinitionId'],'decisionDefinitionIdIn': opts['decisionDefinitionIdIn'],'name': opts['name'],'nameLike': opts['nameLike'],'deploymentId': opts['deploymentId'],'deployedAfter': opts['deployedAfter'],'deployedAt': opts['deployedAt'],'key': opts['key'],'keyLike': opts['keyLike'],'category': opts['category'],'categoryLike': opts['categoryLike'],'version': opts['version'],'latestVersion': opts['latestVersion'],'resourceName': opts['resourceName'],'resourceNameLike': opts['resourceNameLike'],'decisionRequirementsDefinitionId': opts['decisionRequirementsDefinitionId'],'decisionRequirementsDefinitionKey': opts['decisionRequirementsDefinitionKey'],'withoutDecisionRequirementsDefinition': opts['withoutDecisionRequirementsDefinition'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeDecisionDefinitionsWithoutTenantId': opts['includeDecisionDefinitionsWithoutTenantId'],'versionTag': opts['versionTag'],'versionTagLike': opts['versionTagLike']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DecisionDefinitionDto];

      return this.apiClient.callApi(
        '/decision-definition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecisionDefinitionsCount operation.
     * @callback moduleapi/DecisionDefinitionApi~getDecisionDefinitionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Count
     * Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Definition](https://docs.camunda.org/manual/develop/reference/rest/decision-definition/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.decisionDefinitionId Filter by decision definition id.
     * @param {String} opts.decisionDefinitionIdIn Filter by decision definition ids.
     * @param {String} opts.name Filter by decision definition name.
     * @param {String} opts.nameLike Filter by decision definition names that the parameter is a substring of.
     * @param {String} opts.deploymentId Filter by the deployment the id belongs to.
     * @param {Date} opts.deployedAfter Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time.
     * @param {Date} opts.deployedAt Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match).
     * @param {String} opts.key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match.
     * @param {String} opts.keyLike Filter by decision definition keys that the parameter is a substring of.
     * @param {String} opts.category Filter by decision definition category. Exact match.
     * @param {String} opts.categoryLike Filter by decision definition categories that the parameter is a substring of.
     * @param {Number} opts.version Filter by decision definition version.
     * @param {Boolean} opts.latestVersion Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.resourceName Filter by the name of the decision definition resource. Exact match.
     * @param {String} opts.resourceNameLike Filter by names of those decision definition resources that the parameter is a substring of.
     * @param {String} opts.decisionRequirementsDefinitionId Filter by the id of the decision requirements definition this decision definition belongs to.
     * @param {String} opts.decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition this decision definition belongs to.
     * @param {Boolean} opts.withoutDecisionRequirementsDefinition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeDecisionDefinitionsWithoutTenantId Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.versionTag Filter by the version tag.
     * @param {String} opts.versionTagLike Filter by the version tags of those decision definition resources that the parameter is a substring of.
     * @param {module:api/DecisionDefinitionApi~getDecisionDefinitionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecisionDefinitionsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'decisionDefinitionId': opts['decisionDefinitionId'],'decisionDefinitionIdIn': opts['decisionDefinitionIdIn'],'name': opts['name'],'nameLike': opts['nameLike'],'deploymentId': opts['deploymentId'],'deployedAfter': opts['deployedAfter'],'deployedAt': opts['deployedAt'],'key': opts['key'],'keyLike': opts['keyLike'],'category': opts['category'],'categoryLike': opts['categoryLike'],'version': opts['version'],'latestVersion': opts['latestVersion'],'resourceName': opts['resourceName'],'resourceNameLike': opts['resourceNameLike'],'decisionRequirementsDefinitionId': opts['decisionRequirementsDefinitionId'],'decisionRequirementsDefinitionKey': opts['decisionRequirementsDefinitionKey'],'withoutDecisionRequirementsDefinition': opts['withoutDecisionRequirementsDefinition'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeDecisionDefinitionsWithoutTenantId': opts['includeDecisionDefinitionsWithoutTenantId'],'versionTag': opts['versionTag'],'versionTagLike': opts['versionTagLike']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/decision-definition/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateHistoryTimeToLiveByDecisionDefinitionId operation.
     * @callback moduleapi/DecisionDefinitionApi~updateHistoryTimeToLiveByDecisionDefinitionIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update History Time to Live
     * Updates history time to live for decision definition. The field is used within [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup).
     * @param {String} id The id of the decision definition to change history time to live.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body 
     * @param {module:api/DecisionDefinitionApi~updateHistoryTimeToLiveByDecisionDefinitionIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateHistoryTimeToLiveByDecisionDefinitionId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHistoryTimeToLiveByDecisionDefinitionId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/decision-definition/{id}/history-time-to-live', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateHistoryTimeToLiveByDecisionDefinitionKey operation.
     * @callback moduleapi/DecisionDefinitionApi~updateHistoryTimeToLiveByDecisionDefinitionKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update History Time to Live By Key
     * Updates the latest version of the decision definition which belongs to no tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup).
     * @param {String} key The key of the decision definitions to change history time to live.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body 
     * @param {module:api/DecisionDefinitionApi~updateHistoryTimeToLiveByDecisionDefinitionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateHistoryTimeToLiveByDecisionDefinitionKey(key, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLiveByDecisionDefinitionKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/history-time-to-live', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant operation.
     * @callback moduleapi/DecisionDefinitionApi~updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update History Time to Live By Key And Tenant
     * Updates the latest version of the decision definition for tenant. The field is used within [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup).
     * @param {String} key The key of the decision definitions to change history time to live.
     * @param {String} tenantId The id of the tenant the decision definition belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/HistoryTimeToLiveDto} opts.body 
     * @param {module:api/DecisionDefinitionApi~updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant(key, tenantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant");
      }
      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant");
      }

      let pathParams = {
        'key': key,'tenant-id': tenantId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}