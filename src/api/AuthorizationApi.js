/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AuthorizationCheckResultDto} from '../model/AuthorizationCheckResultDto';
import {AuthorizationCreateDto} from '../model/AuthorizationCreateDto';
import {AuthorizationDto} from '../model/AuthorizationDto';
import {AuthorizationUpdateDto} from '../model/AuthorizationUpdateDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {ResourceOptionsDto} from '../model/ResourceOptionsDto';

/**
* Authorization service.
* @module api/AuthorizationApi
* @version 7.20.0
*/
export class AuthorizationApi {

    /**
    * Constructs a new AuthorizationApi. 
    * @alias module:api/AuthorizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the availableOperationsAuthorization operation.
     * @callback moduleapi/AuthorizationApi~availableOperationsAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorization Resource Options
     * The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the &#x60;/authorization&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param {module:api/AuthorizationApi~availableOperationsAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    availableOperationsAuthorization(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.apiClient.callApi(
        '/authorization', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the availableOperationsAuthorizationInstance operation.
     * @callback moduleapi/AuthorizationApi~availableOperationsAuthorizationInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorization Resource Options
     * The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on a given instance of the &#x60;/authorization&#x60; resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param {String} id The id of the authorization to be retrieved.
     * @param {module:api/AuthorizationApi~availableOperationsAuthorizationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    availableOperationsAuthorizationInstance(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling availableOperationsAuthorizationInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.apiClient.callApi(
        '/authorization/{id}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createAuthorization operation.
     * @callback moduleapi/AuthorizationApi~createAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a New Authorization
     * Creates a new authorization.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthorizationCreateDto} opts.body 
     * @param {module:api/AuthorizationApi~createAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createAuthorization(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthorizationDto;

      return this.apiClient.callApi(
        '/authorization/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAuthorization operation.
     * @callback moduleapi/AuthorizationApi~deleteAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Authorization
     * Deletes an authorization by id.
     * @param {String} id The id of the authorization to be deleted.
     * @param {module:api/AuthorizationApi~deleteAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAuthorization(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuthorization");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/authorization/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAuthorization operation.
     * @callback moduleapi/AuthorizationApi~getAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authorization
     * Retrieves an authorization by id.
     * @param {String} id The id of the authorization to be retrieved.
     * @param {module:api/AuthorizationApi~getAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAuthorization(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAuthorization");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthorizationDto;

      return this.apiClient.callApi(
        '/authorization/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAuthorizationCount operation.
     * @callback moduleapi/AuthorizationApi~getAuthorizationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authorization Count
     * Queries for authorizations using a list of parameters and retrieves the count.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by the id of the authorization.
     * @param {Number} opts.type Filter by authorization type. (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/authorization-service/#authorization-type) for more information about authorization types.
     * @param {String} opts.userIdIn Filter by a comma-separated list of userIds.
     * @param {String} opts.groupIdIn Filter by a comma-separated list of groupIds.
     * @param {Number} opts.resourceType Filter by an integer representation of the resource type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.
     * @param {String} opts.resourceId Filter by resource id.
     * @param {module:api/AuthorizationApi~getAuthorizationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAuthorizationCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'type': opts['type'],'userIdIn': opts['userIdIn'],'groupIdIn': opts['groupIdIn'],'resourceType': opts['resourceType'],'resourceId': opts['resourceId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/authorization/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the isUserAuthorized operation.
     * @callback moduleapi/AuthorizationApi~isUserAuthorizedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationCheckResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform an Authorization Check
     * Performs an authorization check for the currently authenticated user.
     * @param {String} permissionName String value representing the permission name to check for.
     * @param {String} resourceName String value for the name of the resource to check permissions for.
     * @param {Number} resourceType An integer representing the resource type to check permissions for. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.
     * @param {Object} opts Optional parameters
     * @param {String} opts.resourceId The id of the resource to check permissions for. If left blank, a check for global permissions on the resource is performed.
     * @param {String} opts.userId The id of the user to check permissions for. The currently authenticated user must have a READ permission for the Authorization resource. If &#x60;userId&#x60; is blank, a check for the currently authenticated user is performed.
     * @param {module:api/AuthorizationApi~isUserAuthorizedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    isUserAuthorized(permissionName, resourceName, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'permissionName' is set
      if (permissionName === undefined || permissionName === null) {
        throw new Error("Missing the required parameter 'permissionName' when calling isUserAuthorized");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling isUserAuthorized");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling isUserAuthorized");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'permissionName': permissionName,'resourceName': resourceName,'resourceType': resourceType,'resourceId': opts['resourceId'],'userId': opts['userId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthorizationCheckResultDto;

      return this.apiClient.callApi(
        '/authorization/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryAuthorizations operation.
     * @callback moduleapi/AuthorizationApi~queryAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuthorizationDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authorizations
     * Queries for a list of authorizations using a list of parameters. The size of the result set can be retrieved by using the [Get Authorization Count](https://docs.camunda.org/manual/develop/reference/rest/authorization/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by the id of the authorization.
     * @param {Number} opts.type Filter by authorization type. (0&#x3D;global, 1&#x3D;grant, 2&#x3D;revoke). See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/authorization-service/#authorization-type) for more information about authorization types.
     * @param {String} opts.userIdIn Filter by a comma-separated list of userIds.
     * @param {String} opts.groupIdIn Filter by a comma-separated list of groupIds.
     * @param {Number} opts.resourceType Filter by an integer representation of the resource type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/authorization-service/#resources) for a list of integer representations of resource types.
     * @param {String} opts.resourceId Filter by resource id.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/AuthorizationApi~queryAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryAuthorizations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'type': opts['type'],'userIdIn': opts['userIdIn'],'groupIdIn': opts['groupIdIn'],'resourceType': opts['resourceType'],'resourceId': opts['resourceId'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AuthorizationDto];

      return this.apiClient.callApi(
        '/authorization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAuthorization operation.
     * @callback moduleapi/AuthorizationApi~updateAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Authorization
     * Updates an authorization by id.
     * @param {String} id The id of the authorization to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthorizationUpdateDto} opts.body 
     * @param {module:api/AuthorizationApi~updateAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAuthorization(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAuthorization");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/authorization/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}