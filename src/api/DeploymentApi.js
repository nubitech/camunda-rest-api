/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CountResultDto} from '../model/CountResultDto';
import {DeploymentDto} from '../model/DeploymentDto';
import {DeploymentResourceDto} from '../model/DeploymentResourceDto';
import {DeploymentWithDefinitionsDto} from '../model/DeploymentWithDefinitionsDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {ParseExceptionDto} from '../model/ParseExceptionDto';
import {RedeploymentDto} from '../model/RedeploymentDto';

/**
* Deployment service.
* @module api/DeploymentApi
* @version 7.20.0
*/
export class DeploymentApi {

    /**
    * Constructs a new DeploymentApi. 
    * @alias module:api/DeploymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createDeployment operation.
     * @callback moduleapi/DeploymentApi~createDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentWithDefinitionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Creates a deployment.  **Security Consideration**  Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantId 
     * @param {String} opts.deploymentSource 
     * @param {Boolean} opts.deployChangedOnly 
     * @param {Boolean} opts.enableDuplicateFiltering 
     * @param {String} opts.deploymentName 
     * @param {Date} opts.deploymentActivationTime 
     * @param {Blob} opts.data 
     * @param {module:api/DeploymentApi~createDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDeployment(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'tenant-id': opts['tenantId'],'deployment-source': opts['deploymentSource'],'deploy-changed-only': opts['deployChangedOnly'],'enable-duplicate-filtering': opts['enableDuplicateFiltering'],'deployment-name': opts['deploymentName'],'deployment-activation-time': opts['deploymentActivationTime'],'data': opts['data']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = DeploymentWithDefinitionsDto;

      return this.apiClient.callApi(
        '/deployment/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDeployment operation.
     * @callback moduleapi/DeploymentApi~deleteDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Deletes a deployment by id.
     * @param {String} id The id of the deployment to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade &#x60;true&#x60;, if all process instances, historic process instances and jobs for this deployment should be deleted. (default to <.>)
     * @param {Boolean} opts.skipCustomListeners &#x60;true&#x60;, if only the built-in ExecutionListeners should be notified with the end event. (default to <.>)
     * @param {Boolean} opts.skipIoMappings &#x60;true&#x60;, if all input/output mappings should not be invoked. (default to <.>)
     * @param {module:api/DeploymentApi~deleteDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeployment(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeployment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade'],'skipCustomListeners': opts['skipCustomListeners'],'skipIoMappings': opts['skipIoMappings']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/deployment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeployment operation.
     * @callback moduleapi/DeploymentApi~getDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Retrieves a deployment by id, according to the &#x60;Deployment&#x60; interface of the engine.
     * @param {String} id The id of the deployment.
     * @param {module:api/DeploymentApi~getDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeployment(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeployment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentDto;

      return this.apiClient.callApi(
        '/deployment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeploymentResource operation.
     * @callback moduleapi/DeploymentApi~getDeploymentResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentResourceDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resource
     * Retrieves a deployment resource by resource id for the given deployment.
     * @param {String} id The id of the deployment
     * @param {String} resourceId The id of the deployment resource
     * @param {module:api/DeploymentApi~getDeploymentResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeploymentResource(id, resourceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeploymentResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getDeploymentResource");
      }

      let pathParams = {
        'id': id,'resourceId': resourceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentResourceDto;

      return this.apiClient.callApi(
        '/deployment/{id}/resources/{resourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeploymentResourceData operation.
     * @callback moduleapi/DeploymentApi~getDeploymentResourceDataCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resource (Binary)
     * Retrieves the binary content of a deployment resource for the given deployment by id.
     * @param {String} id The id of the deployment.
     * @param {String} resourceId The id of the deployment resource.
     * @param {module:api/DeploymentApi~getDeploymentResourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeploymentResourceData(id, resourceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeploymentResourceData");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getDeploymentResourceData");
      }

      let pathParams = {
        'id': id,'resourceId': resourceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', '*/*', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/deployment/{id}/resources/{resourceId}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeploymentResources operation.
     * @callback moduleapi/DeploymentApi~getDeploymentResourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeploymentResourceDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resources
     * Retrieves all deployment resources of a given deployment.
     * @param {String} id The id of the deployment to retrieve the deployment resources for.
     * @param {module:api/DeploymentApi~getDeploymentResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeploymentResources(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeploymentResources");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeploymentResourceDto];

      return this.apiClient.callApi(
        '/deployment/{id}/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeployments operation.
     * @callback moduleapi/DeploymentApi~getDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeploymentDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List
     * Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the [Get Deployment count](https://docs.camunda.org/manual/develop/reference/rest/deployment/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by deployment id
     * @param {String} opts.name Filter by the deployment name. Exact match.
     * @param {String} opts.nameLike Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
     * @param {String} opts.source Filter by the deployment source.
     * @param {Boolean} opts.withoutSource Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (default to <.>)
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (default to <.>)
     * @param {Boolean} opts.includeDeploymentsWithoutTenantId Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (default to <.>)
     * @param {Date} opts.after Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.before Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/DeploymentApi~getDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeployments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'name': opts['name'],'nameLike': opts['nameLike'],'source': opts['source'],'withoutSource': opts['withoutSource'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeDeploymentsWithoutTenantId': opts['includeDeploymentsWithoutTenantId'],'after': opts['after'],'before': opts['before'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeploymentDto];

      return this.apiClient.callApi(
        '/deployment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDeploymentsCount operation.
     * @callback moduleapi/DeploymentApi~getDeploymentsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Count
     * Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the [Get Deployments](https://docs.camunda.org/manual/develop/reference/rest/deployment/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by deployment id
     * @param {String} opts.name Filter by the deployment name. Exact match.
     * @param {String} opts.nameLike Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard &#x60;%&#x60; to express like-strategy such as: starts with (&#x60;%&#x60;name), ends with (name&#x60;%&#x60;) or contains (&#x60;%&#x60;name&#x60;%&#x60;).
     * @param {String} opts.source Filter by the deployment source.
     * @param {Boolean} opts.withoutSource Filter by the deployment source whereby source is equal to &#x60;null&#x60;. (default to <.>)
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include deployments which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (default to <.>)
     * @param {Boolean} opts.includeDeploymentsWithoutTenantId Include deployments which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (default to <.>)
     * @param {Date} opts.after Restricts to all deployments after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.before Restricts to all deployments before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {module:api/DeploymentApi~getDeploymentsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDeploymentsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'name': opts['name'],'nameLike': opts['nameLike'],'source': opts['source'],'withoutSource': opts['withoutSource'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeDeploymentsWithoutTenantId': opts['includeDeploymentsWithoutTenantId'],'after': opts['after'],'before': opts['before']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/deployment/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRegisteredDeployments operation.
     * @callback moduleapi/DeploymentApi~getRegisteredDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Registered Deployments
     * Queries the registered deployment IDs for the current application.
     * @param {module:api/DeploymentApi~getRegisteredDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRegisteredDeployments(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/deployment/registered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the redeploy operation.
     * @callback moduleapi/DeploymentApi~redeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentWithDefinitionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeploy
     * Re-deploys an existing deployment.  The deployment resources to re-deploy can be restricted by using the properties &#x60;resourceIds&#x60; or &#x60;resourceNames&#x60;. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.  **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on [security considerations for custom code](https://docs.camunda.org/manual/develop/user-guide/process-engine/securing-custom-code/) in the user guide for details.
     * @param {String} id The id of the deployment to re-deploy.
     * @param {Object} opts Optional parameters
     * @param {module:model/RedeploymentDto} opts.body 
     * @param {module:api/DeploymentApi~redeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    redeploy(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling redeploy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentWithDefinitionsDto;

      return this.apiClient.callApi(
        '/deployment/{id}/redeploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}