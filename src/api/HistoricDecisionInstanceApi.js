/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BatchDto} from '../model/BatchDto';
import {CountResultDto} from '../model/CountResultDto';
import {DeleteHistoricDecisionInstancesDto} from '../model/DeleteHistoricDecisionInstancesDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {HistoricDecisionInstanceDto} from '../model/HistoricDecisionInstanceDto';
import {SetRemovalTimeToHistoricDecisionInstancesDto} from '../model/SetRemovalTimeToHistoricDecisionInstancesDto';

/**
* HistoricDecisionInstance service.
* @module api/HistoricDecisionInstanceApi
* @version 7.20.0
*/
export class HistoricDecisionInstanceApi {

    /**
    * Constructs a new HistoricDecisionInstanceApi. 
    * @alias module:api/HistoricDecisionInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteAsync operation.
     * @callback moduleapi/HistoricDecisionInstanceApi~deleteAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Async (POST)
     * Delete multiple historic decision instances asynchronously (batch). At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60;  has to be provided. If both are provided then all instances matching query  criterion and instances from the list will be deleted.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteHistoricDecisionInstancesDto} opts.body 
     * @param {module:api/HistoricDecisionInstanceApi~deleteAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteAsync(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;

      return this.apiClient.callApi(
        '/history/decision-instance/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHistoricDecisionInstance operation.
     * @callback moduleapi/HistoricDecisionInstanceApi~getHistoricDecisionInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoricDecisionInstanceDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Historic Decision Instance
     * Retrieves a historic decision instance by id, according to the  &#x60;HistoricDecisionInstance&#x60; interface in the engine.
     * @param {String} id The id of the historic decision instance to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeInputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeOutputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.disableBinaryFetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.disableCustomObjectDeserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:api/HistoricDecisionInstanceApi~getHistoricDecisionInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHistoricDecisionInstance(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHistoricDecisionInstance");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeInputs': opts['includeInputs'],'includeOutputs': opts['includeOutputs'],'disableBinaryFetching': opts['disableBinaryFetching'],'disableCustomObjectDeserialization': opts['disableCustomObjectDeserialization']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoricDecisionInstanceDto;

      return this.apiClient.callApi(
        '/history/decision-instance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHistoricDecisionInstances operation.
     * @callback moduleapi/HistoricDecisionInstanceApi~getHistoricDecisionInstancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricDecisionInstanceDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Historic Decision Instances
     * Queries for historic decision instances that fulfill the given parameters.  The size of the result set can be retrieved by using the  [Get Historic Decision Instance Count](https://docs.camunda.org/manual/develop/reference/rest/history/decision-instance/get-decision-instance-query-count/)  method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.decisionInstanceId Filter by decision instance id.
     * @param {String} opts.decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
     * @param {String} opts.decisionDefinitionId Filter by the decision definition the instances belongs to.
     * @param {String} opts.decisionDefinitionIdIn Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
     * @param {String} opts.decisionDefinitionKey Filter by the key of the decision definition the instances belongs to.
     * @param {String} opts.decisionDefinitionKeyIn Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
     * @param {String} opts.decisionDefinitionName Filter by the name of the decision definition the instances belongs to.
     * @param {String} opts.decisionDefinitionNameLike Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
     * @param {String} opts.processDefinitionId Filter by the process definition the instances belongs to.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances belongs to.
     * @param {String} opts.processInstanceId Filter by the process instance the instances belongs to.
     * @param {String} opts.caseDefinitionId Filter by the case definition the instances belongs to.
     * @param {String} opts.caseDefinitionKey Filter by the key of the case definition the instances belongs to.
     * @param {String} opts.caseInstanceId Filter by the case instance the instances belongs to.
     * @param {String} opts.activityIdIn Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
     * @param {String} opts.activityInstanceIdIn Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} opts.evaluatedBefore Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.evaluatedAfter Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.userId Restrict to instances that were evaluated by the given user.
     * @param {String} opts.rootDecisionInstanceId Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
     * @param {Boolean} opts.rootDecisionInstancesOnly Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.decisionRequirementsDefinitionId Filter by the decision requirements definition the instances belongs to.
     * @param {String} opts.decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition the instances belongs to.
     * @param {Boolean} opts.includeInputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeOutputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.disableBinaryFetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.disableCustomObjectDeserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/HistoricDecisionInstanceApi~getHistoricDecisionInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHistoricDecisionInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'decisionInstanceId': opts['decisionInstanceId'],'decisionInstanceIdIn': opts['decisionInstanceIdIn'],'decisionDefinitionId': opts['decisionDefinitionId'],'decisionDefinitionIdIn': opts['decisionDefinitionIdIn'],'decisionDefinitionKey': opts['decisionDefinitionKey'],'decisionDefinitionKeyIn': opts['decisionDefinitionKeyIn'],'decisionDefinitionName': opts['decisionDefinitionName'],'decisionDefinitionNameLike': opts['decisionDefinitionNameLike'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processInstanceId': opts['processInstanceId'],'caseDefinitionId': opts['caseDefinitionId'],'caseDefinitionKey': opts['caseDefinitionKey'],'caseInstanceId': opts['caseInstanceId'],'activityIdIn': opts['activityIdIn'],'activityInstanceIdIn': opts['activityInstanceIdIn'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'evaluatedBefore': opts['evaluatedBefore'],'evaluatedAfter': opts['evaluatedAfter'],'userId': opts['userId'],'rootDecisionInstanceId': opts['rootDecisionInstanceId'],'rootDecisionInstancesOnly': opts['rootDecisionInstancesOnly'],'decisionRequirementsDefinitionId': opts['decisionRequirementsDefinitionId'],'decisionRequirementsDefinitionKey': opts['decisionRequirementsDefinitionKey'],'includeInputs': opts['includeInputs'],'includeOutputs': opts['includeOutputs'],'disableBinaryFetching': opts['disableBinaryFetching'],'disableCustomObjectDeserialization': opts['disableCustomObjectDeserialization'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricDecisionInstanceDto];

      return this.apiClient.callApi(
        '/history/decision-instance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHistoricDecisionInstancesCount operation.
     * @callback moduleapi/HistoricDecisionInstanceApi~getHistoricDecisionInstancesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Historic Decision Instance Count
     * Queries for the number of historic decision instances that fulfill the given parameters.  Takes the same parameters as the  [Get Historic Decision Instances](https://docs.camunda.org/manual/develop/reference/rest/history/decision-instance/get-decision-instance-query/)  method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.decisionInstanceId Filter by decision instance id.
     * @param {String} opts.decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids.
     * @param {String} opts.decisionDefinitionId Filter by the decision definition the instances belongs to.
     * @param {String} opts.decisionDefinitionIdIn Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids.
     * @param {String} opts.decisionDefinitionKey Filter by the key of the decision definition the instances belongs to.
     * @param {String} opts.decisionDefinitionKeyIn Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys.
     * @param {String} opts.decisionDefinitionName Filter by the name of the decision definition the instances belongs to.
     * @param {String} opts.decisionDefinitionNameLike Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of.
     * @param {String} opts.processDefinitionId Filter by the process definition the instances belongs to.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the instances belongs to.
     * @param {String} opts.processInstanceId Filter by the process instance the instances belongs to.
     * @param {String} opts.caseDefinitionId Filter by the case definition the instances belongs to.
     * @param {String} opts.caseDefinitionKey Filter by the key of the case definition the instances belongs to.
     * @param {String} opts.caseInstanceId Filter by the case instance the instances belongs to.
     * @param {String} opts.activityIdIn Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids.
     * @param {String} opts.activityInstanceIdIn Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Date} opts.evaluatedBefore Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.evaluatedAfter Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.userId Restrict to instances that were evaluated by the given user.
     * @param {String} opts.rootDecisionInstanceId Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id.
     * @param {Boolean} opts.rootDecisionInstancesOnly Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.decisionRequirementsDefinitionId Filter by the decision requirements definition the instances belongs to.
     * @param {String} opts.decisionRequirementsDefinitionKey Filter by the key of the decision requirements definition the instances belongs to.
     * @param {module:api/HistoricDecisionInstanceApi~getHistoricDecisionInstancesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHistoricDecisionInstancesCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'decisionInstanceId': opts['decisionInstanceId'],'decisionInstanceIdIn': opts['decisionInstanceIdIn'],'decisionDefinitionId': opts['decisionDefinitionId'],'decisionDefinitionIdIn': opts['decisionDefinitionIdIn'],'decisionDefinitionKey': opts['decisionDefinitionKey'],'decisionDefinitionKeyIn': opts['decisionDefinitionKeyIn'],'decisionDefinitionName': opts['decisionDefinitionName'],'decisionDefinitionNameLike': opts['decisionDefinitionNameLike'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processInstanceId': opts['processInstanceId'],'caseDefinitionId': opts['caseDefinitionId'],'caseDefinitionKey': opts['caseDefinitionKey'],'caseInstanceId': opts['caseInstanceId'],'activityIdIn': opts['activityIdIn'],'activityInstanceIdIn': opts['activityInstanceIdIn'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'evaluatedBefore': opts['evaluatedBefore'],'evaluatedAfter': opts['evaluatedAfter'],'userId': opts['userId'],'rootDecisionInstanceId': opts['rootDecisionInstanceId'],'rootDecisionInstancesOnly': opts['rootDecisionInstancesOnly'],'decisionRequirementsDefinitionId': opts['decisionRequirementsDefinitionId'],'decisionRequirementsDefinitionKey': opts['decisionRequirementsDefinitionKey']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/history/decision-instance/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setRemovalTimeAsyncHistoricDecisionInstance operation.
     * @callback moduleapi/HistoricDecisionInstanceApi~setRemovalTimeAsyncHistoricDecisionInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Removal Time Async (POST)
     * Sets the removal time to multiple historic decision instances asynchronously (batch).  At least &#x60;historicDecisionInstanceIds&#x60; or &#x60;historicDecisionInstanceQuery&#x60; has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRemovalTimeToHistoricDecisionInstancesDto} opts.body 
     * @param {module:api/HistoricDecisionInstanceApi~setRemovalTimeAsyncHistoricDecisionInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    setRemovalTimeAsyncHistoricDecisionInstance(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;

      return this.apiClient.callApi(
        '/history/decision-instance/set-removal-time', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}