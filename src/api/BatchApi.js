/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BatchDto} from '../model/BatchDto';
import {BatchStatisticsDto} from '../model/BatchStatisticsDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {SuspensionStateDto} from '../model/SuspensionStateDto';

/**
* Batch service.
* @module api/BatchApi
* @version 7.20.0
*/
export class BatchApi {

    /**
    * Constructs a new BatchApi. 
    * @alias module:api/BatchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteBatch operation.
     * @callback moduleapi/BatchApi~deleteBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
     * @param {String} id The id of the batch to be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade &#x60;true&#x60;, if the historic batch and historic job logs for this batch should also be deleted.
     * @param {module:api/BatchApi~deleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBatch(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'cascade': opts['cascade']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/batch/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBatch operation.
     * @callback moduleapi/BatchApi~getBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Retrieves a batch by id, according to the Batch interface in the engine.
     * @param {String} id The id of the batch to be retrieved.
     * @param {module:api/BatchApi~getBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBatch(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchDto;

      return this.apiClient.callApi(
        '/batch/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBatchStatistics operation.
     * @callback moduleapi/BatchApi~getBatchStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BatchStatisticsDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Statistics
     * Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the  [Get Batch Statistics Count](https://docs.camunda.org/manual/develop/reference/rest/batch/get-statistics-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {String} opts.createdBy Only include batches that were started by this user id.
     * @param {Date} opts.startedBefore Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.startedAfter Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Boolean} opts.withFailures Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {Boolean} opts.withoutFailures Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {module:api/BatchApi~getBatchStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBatchStatistics(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults'],'batchId': opts['batchId'],'type': opts['type'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'suspended': opts['suspended'],'createdBy': opts['createdBy'],'startedBefore': opts['startedBefore'],'startedAfter': opts['startedAfter'],'withFailures': opts['withFailures'],'withoutFailures': opts['withoutFailures']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BatchStatisticsDto];

      return this.apiClient.callApi(
        '/batch/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBatchStatisticsCount operation.
     * @callback moduleapi/BatchApi~getBatchStatisticsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Statistics Count
     * Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the [Get Batch Statistics](https://docs.camunda.org/manual/develop/reference/rest/batch/get-statistics-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {String} opts.createdBy Only include batches that were started by this user id.
     * @param {Date} opts.startedBefore Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.startedAfter Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Boolean} opts.withFailures Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {Boolean} opts.withoutFailures Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {module:api/BatchApi~getBatchStatisticsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBatchStatisticsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'batchId': opts['batchId'],'type': opts['type'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'suspended': opts['suspended'],'createdBy': opts['createdBy'],'startedBefore': opts['startedBefore'],'startedAfter': opts['startedAfter'],'withFailures': opts['withFailures'],'withoutFailures': opts['withoutFailures']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/batch/statistics/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBatches operation.
     * @callback moduleapi/BatchApi~getBatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BatchDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List
     * Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the [Get Batch Count](https://docs.camunda.org/manual/develop/reference/rest/batch/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {String} opts.createdBy Only include batches that were started by this user id.
     * @param {Date} opts.startedBefore Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.startedAfter Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Boolean} opts.withFailures Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {Boolean} opts.withoutFailures Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {module:api/BatchApi~getBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBatches(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults'],'batchId': opts['batchId'],'type': opts['type'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'suspended': opts['suspended'],'createdBy': opts['createdBy'],'startedBefore': opts['startedBefore'],'startedAfter': opts['startedAfter'],'withFailures': opts['withFailures'],'withoutFailures': opts['withoutFailures']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BatchDto];

      return this.apiClient.callApi(
        '/batch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBatchesCount operation.
     * @callback moduleapi/BatchApi~getBatchesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Count
     * Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/develop/reference/rest/batch/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.batchId Filter by batch id.
     * @param {String} opts.type Filter by batch type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/batch/#creating-a-batch) for more information about batch types.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of &#x60;Strings&#x60;. A batch matches if it has one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include batches which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended A &#x60;Boolean&#x60; value which indicates whether only active or suspended batches should be included. When the value is set to &#x60;true&#x60;, only suspended batches will be returned and when the value is set to &#x60;false&#x60;, only active batches will be returned.
     * @param {String} opts.createdBy Only include batches that were started by this user id.
     * @param {Date} opts.startedBefore Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.startedAfter Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Boolean} opts.withFailures Only include batches having jobs with failures. Value can only be &#x60;true&#x60;.
     * @param {Boolean} opts.withoutFailures Only include batches having jobs without failures. Value can only be &#x60;true&#x60;.
     * @param {module:api/BatchApi~getBatchesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBatchesCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'batchId': opts['batchId'],'type': opts['type'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'suspended': opts['suspended'],'createdBy': opts['createdBy'],'startedBefore': opts['startedBefore'],'startedAfter': opts['startedAfter'],'withFailures': opts['withFailures'],'withoutFailures': opts['withoutFailures']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/batch/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateBatchSuspensionState operation.
     * @callback moduleapi/BatchApi~updateBatchSuspensionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/Suspend
     * Activates or suspends a batch by id.
     * @param {String} id The id of the batch to activate or suspend.
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspensionStateDto} opts.body 
     * @param {module:api/BatchApi~updateBatchSuspensionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBatchSuspensionState(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBatchSuspensionState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/batch/{id}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}