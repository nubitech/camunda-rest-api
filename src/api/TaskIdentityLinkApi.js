/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ExceptionDto} from '../model/ExceptionDto';
import {IdentityLinkDto} from '../model/IdentityLinkDto';

/**
* TaskIdentityLink service.
* @module api/TaskIdentityLinkApi
* @version 7.20.0
*/
export class TaskIdentityLinkApi {

    /**
    * Constructs a new TaskIdentityLinkApi. 
    * @alias module:api/TaskIdentityLinkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addIdentityLink operation.
     * @callback moduleapi/TaskIdentityLinkApi~addIdentityLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add
     * Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
     * @param {String} id The id of the task to add a link to.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.body 
     * @param {module:api/TaskIdentityLinkApi~addIdentityLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addIdentityLink(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addIdentityLink");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id}/identity-links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteIdentityLink operation.
     * @callback moduleapi/TaskIdentityLinkApi~deleteIdentityLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Removes an identity link from a task by id
     * @param {String} id The id of the task to remove a link from.
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityLinkDto} opts.body 
     * @param {module:api/TaskIdentityLinkApi~deleteIdentityLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIdentityLink(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIdentityLink");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id}/identity-links/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIdentityLinks operation.
     * @callback moduleapi/TaskIdentityLinkApi~getIdentityLinksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IdentityLinkDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List
     * Gets the identity links for a task by id, which are the users and groups that are in *some* relation to it (including assignee and owner).
     * @param {String} id The id of the task to retrieve the identity links for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by the type of links to include.
     * @param {module:api/TaskIdentityLinkApi~getIdentityLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIdentityLinks(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIdentityLinks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IdentityLinkDto];

      return this.apiClient.callApi(
        '/task/{id}/identity-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}