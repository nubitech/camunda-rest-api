/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BatchDto} from '../model/BatchDto';
import {CompleteExternalTaskDto} from '../model/CompleteExternalTaskDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {ExtendLockOnExternalTaskDto} from '../model/ExtendLockOnExternalTaskDto';
import {ExternalTaskBpmnError} from '../model/ExternalTaskBpmnError';
import {ExternalTaskDto} from '../model/ExternalTaskDto';
import {ExternalTaskFailureDto} from '../model/ExternalTaskFailureDto';
import {ExternalTaskQueryDto} from '../model/ExternalTaskQueryDto';
import {FetchExternalTasksDto} from '../model/FetchExternalTasksDto';
import {LockExternalTaskDto} from '../model/LockExternalTaskDto';
import {LockedExternalTaskDto} from '../model/LockedExternalTaskDto';
import {PriorityDto} from '../model/PriorityDto';
import {RetriesDto} from '../model/RetriesDto';
import {SetRetriesForExternalTasksDto} from '../model/SetRetriesForExternalTasksDto';

/**
* ExternalTask service.
* @module api/ExternalTaskApi
* @version 7.20.0
*/
export class ExternalTaskApi {

    /**
    * Constructs a new ExternalTaskApi. 
    * @alias module:api/ExternalTaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the completeExternalTaskResource operation.
     * @callback moduleapi/ExternalTaskApi~completeExternalTaskResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete
     * Completes an external task by id and updates process variables.
     * @param {String} id The id of the task to complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompleteExternalTaskDto} opts.body 
     * @param {module:api/ExternalTaskApi~completeExternalTaskResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeExternalTaskResource(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeExternalTaskResource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the extendLock operation.
     * @callback moduleapi/ExternalTaskApi~extendLockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extend Lock
     * Extends the timeout of the lock by a given amount of time.
     * @param {String} id The id of the external task.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtendLockOnExternalTaskDto} opts.body 
     * @param {module:api/ExternalTaskApi~extendLockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extendLock(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extendLock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/extendLock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fetchAndLock operation.
     * @callback moduleapi/ExternalTaskApi~fetchAndLockCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LockedExternalTaskDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch and Lock
     * Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/FetchExternalTasksDto} opts.body 
     * @param {module:api/ExternalTaskApi~fetchAndLockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fetchAndLock(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [LockedExternalTaskDto];

      return this.apiClient.callApi(
        '/external-task/fetchAndLock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExternalTask operation.
     * @callback moduleapi/ExternalTaskApi~getExternalTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalTaskDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Retrieves an external task by id, corresponding to the &#x60;ExternalTask&#x60; interface in the engine.
     * @param {String} id The id of the external task to be retrieved.
     * @param {module:api/ExternalTaskApi~getExternalTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getExternalTask(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExternalTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExternalTaskDto;

      return this.apiClient.callApi(
        '/external-task/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExternalTaskErrorDetails operation.
     * @callback moduleapi/ExternalTaskApi~getExternalTaskErrorDetailsCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Error Details
     * Retrieves the error details in the context of a running external task by id.
     * @param {String} id The id of the external task for which the error details should be retrieved.
     * @param {module:api/ExternalTaskApi~getExternalTaskErrorDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getExternalTaskErrorDetails(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExternalTaskErrorDetails");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/external-task/{id}/errorDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExternalTasks operation.
     * @callback moduleapi/ExternalTaskApi~getExternalTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExternalTaskDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List
     * Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get External Task Count](https://docs.camunda.org/manual/develop/reference/rest/external-task/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalTaskId Filter by an external task&#x27;s id.
     * @param {String} opts.externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {Boolean} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Date} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {Boolean} opts.active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/ExternalTaskApi~getExternalTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getExternalTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'externalTaskId': opts['externalTaskId'],'externalTaskIdIn': opts['externalTaskIdIn'],'topicName': opts['topicName'],'workerId': opts['workerId'],'locked': opts['locked'],'notLocked': opts['notLocked'],'withRetriesLeft': opts['withRetriesLeft'],'noRetriesLeft': opts['noRetriesLeft'],'lockExpirationAfter': opts['lockExpirationAfter'],'lockExpirationBefore': opts['lockExpirationBefore'],'activityId': opts['activityId'],'activityIdIn': opts['activityIdIn'],'executionId': opts['executionId'],'processInstanceId': opts['processInstanceId'],'processInstanceIdIn': opts['processInstanceIdIn'],'processDefinitionId': opts['processDefinitionId'],'tenantIdIn': opts['tenantIdIn'],'active': opts['active'],'suspended': opts['suspended'],'priorityHigherThanOrEquals': opts['priorityHigherThanOrEquals'],'priorityLowerThanOrEquals': opts['priorityLowerThanOrEquals'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExternalTaskDto];

      return this.apiClient.callApi(
        '/external-task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExternalTasksCount operation.
     * @callback moduleapi/ExternalTaskApi~getExternalTasksCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Count
     * Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the [Get External Tasks](https://docs.camunda.org/manual/develop/reference/rest/external-task/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalTaskId Filter by an external task&#x27;s id.
     * @param {String} opts.externalTaskIdIn Filter by the comma-separated list of external task ids.
     * @param {String} opts.topicName Filter by an external task topic.
     * @param {String} opts.workerId Filter by the id of the worker that the task was most recently locked by.
     * @param {Boolean} opts.locked Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.notLocked Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.noRetriesLeft Only include external tasks that have 0 retries. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Date} opts.lockExpirationAfter Restrict to external tasks that have a lock that expires after a given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.lockExpirationBefore Restrict to external tasks that have a lock that expires before a given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.activityId Filter by the id of the activity that an external task is created for.
     * @param {String} opts.activityIdIn Filter by the comma-separated list of ids of the activities that an external task is created for.
     * @param {String} opts.executionId Filter by the id of the execution that an external task belongs to.
     * @param {String} opts.processInstanceId Filter by the id of the process instance that an external task belongs to.
     * @param {String} opts.processInstanceIdIn Filter by a comma-separated list of process instance ids that an external task may belong to.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition that an external task belongs to.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An external task must have one of the given tenant ids.
     * @param {Boolean} opts.active Only include active tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.suspended Only include suspended tasks. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {module:api/ExternalTaskApi~getExternalTasksCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getExternalTasksCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'externalTaskId': opts['externalTaskId'],'externalTaskIdIn': opts['externalTaskIdIn'],'topicName': opts['topicName'],'workerId': opts['workerId'],'locked': opts['locked'],'notLocked': opts['notLocked'],'withRetriesLeft': opts['withRetriesLeft'],'noRetriesLeft': opts['noRetriesLeft'],'lockExpirationAfter': opts['lockExpirationAfter'],'lockExpirationBefore': opts['lockExpirationBefore'],'activityId': opts['activityId'],'activityIdIn': opts['activityIdIn'],'executionId': opts['executionId'],'processInstanceId': opts['processInstanceId'],'processInstanceIdIn': opts['processInstanceIdIn'],'processDefinitionId': opts['processDefinitionId'],'tenantIdIn': opts['tenantIdIn'],'active': opts['active'],'suspended': opts['suspended'],'priorityHigherThanOrEquals': opts['priorityHigherThanOrEquals'],'priorityLowerThanOrEquals': opts['priorityLowerThanOrEquals']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/external-task/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTopicNames operation.
     * @callback moduleapi/ExternalTaskApi~getTopicNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get External Task Topic Names
     * Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withLockedTasks Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.withUnlockedTasks Only include external tasks that are currently not locked (i.e., they have no lock or it has expired). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {Boolean} opts.withRetriesLeft Only include external tasks that have a positive (&amp;gt; 0) number of retries (or &#x60;null&#x60;). Value may only be &#x60;true&#x60;, as &#x60;false&#x60; matches any external task.
     * @param {module:api/ExternalTaskApi~getTopicNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTopicNames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'withLockedTasks': opts['withLockedTasks'],'withUnlockedTasks': opts['withUnlockedTasks'],'withRetriesLeft': opts['withRetriesLeft']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/external-task/topic-names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the handleExternalTaskBpmnError operation.
     * @callback moduleapi/ExternalTaskApi~handleExternalTaskBpmnErrorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle BPMN Error
     * Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
     * @param {String} id The id of the external task in which context a BPMN error is reported.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskBpmnError} opts.body 
     * @param {module:api/ExternalTaskApi~handleExternalTaskBpmnErrorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    handleExternalTaskBpmnError(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling handleExternalTaskBpmnError");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/bpmnError', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the handleFailure operation.
     * @callback moduleapi/ExternalTaskApi~handleFailureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle Failure
     * Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
     * @param {String} id The id of the external task to report a failure for.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskFailureDto} opts.body 
     * @param {module:api/ExternalTaskApi~handleFailureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    handleFailure(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling handleFailure");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/failure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the lock operation.
     * @callback moduleapi/ExternalTaskApi~lockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock an external task by a given id for a specified worker and amount of time.
     * @param {String} id The id of the external task.
     * @param {Object} opts Optional parameters
     * @param {module:model/LockExternalTaskDto} opts.body 
     * @param {module:api/ExternalTaskApi~lockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lock(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryExternalTasks operation.
     * @callback moduleapi/ExternalTaskApi~queryExternalTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExternalTaskDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List (POST)
     * Queries for external tasks that fulfill given parameters in the form of a JSON object.  This method is slightly more powerful than the [Get External Tasks](https://docs.camunda.org/manual/develop/reference/rest/external-task/get-query/) method because it allows to specify a hierarchical result sorting.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskQueryDto} opts.body 
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/ExternalTaskApi~queryExternalTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryExternalTasks(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ExternalTaskDto];

      return this.apiClient.callApi(
        '/external-task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryExternalTasksCount operation.
     * @callback moduleapi/ExternalTaskApi~queryExternalTasksCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Count (POST)
     * Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/develop/reference/rest/external-task/post-query/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExternalTaskQueryDto} opts.body 
     * @param {module:api/ExternalTaskApi~queryExternalTasksCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryExternalTasksCount(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/external-task/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setExternalTaskResourcePriority operation.
     * @callback moduleapi/ExternalTaskApi~setExternalTaskResourcePriorityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Priority
     * Sets the priority of an existing external task by id. The default value of a priority is 0.
     * @param {String} id The id of the external task to set the priority for.
     * @param {Object} opts Optional parameters
     * @param {module:model/PriorityDto} opts.body 
     * @param {module:api/ExternalTaskApi~setExternalTaskResourcePriorityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setExternalTaskResourcePriority(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setExternalTaskResourcePriority");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/priority', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setExternalTaskResourceRetries operation.
     * @callback moduleapi/ExternalTaskApi~setExternalTaskResourceRetriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Retries
     * Sets the number of retries left to execute an external task by id. If retries are set to 0, an  incident is created.
     * @param {String} id The id of the external task to set the number of retries for.
     * @param {Object} opts Optional parameters
     * @param {module:model/RetriesDto} opts.body 
     * @param {module:api/ExternalTaskApi~setExternalTaskResourceRetriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setExternalTaskResourceRetries(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setExternalTaskResourceRetries");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/retries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setExternalTaskRetries operation.
     * @callback moduleapi/ExternalTaskApi~setExternalTaskRetriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Retries Sync
     * Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,  an incident is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRetriesForExternalTasksDto} opts.body 
     * @param {module:api/ExternalTaskApi~setExternalTaskRetriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setExternalTaskRetries(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/retries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setExternalTaskRetriesAsyncOperation operation.
     * @callback moduleapi/ExternalTaskApi~setExternalTaskRetriesAsyncOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Retries Async
     * Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRetriesForExternalTasksDto} opts.body 
     * @param {module:api/ExternalTaskApi~setExternalTaskRetriesAsyncOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    setExternalTaskRetriesAsyncOperation(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;

      return this.apiClient.callApi(
        '/external-task/retries-async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unlock operation.
     * @callback moduleapi/ExternalTaskApi~unlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock
     * Unlocks an external task by id. Clears the task&#x27;s lock expiration time and worker id.
     * @param {String} id The id of the external task to unlock.
     * @param {module:api/ExternalTaskApi~unlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlock(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unlock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/external-task/{id}/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}