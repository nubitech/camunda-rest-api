/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BatchDto} from '../model/BatchDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {JobDto} from '../model/JobDto';
import {JobDuedateDto} from '../model/JobDuedateDto';
import {JobQueryDto} from '../model/JobQueryDto';
import {JobRetriesDto} from '../model/JobRetriesDto';
import {JobSuspensionStateDto} from '../model/JobSuspensionStateDto';
import {PriorityDto} from '../model/PriorityDto';
import {SetJobRetriesDto} from '../model/SetJobRetriesDto';
import {SuspensionStateDto} from '../model/SuspensionStateDto';

/**
* Job service.
* @module api/JobApi
* @version 7.20.0
*/
export class JobApi {

    /**
    * Constructs a new JobApi. 
    * @alias module:api/JobApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback moduleapi/JobApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Job
     * Deletes a job by id.
     * @param {String} id The id of the job to be deleted.
     * @param {module:api/JobApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJob(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the executeJob operation.
     * @callback moduleapi/JobApi~executeJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Job
     * Executes a job by id. **Note:** The execution of the job happens synchronously in the same thread.
     * @param {String} id The id of the job to be executed.
     * @param {module:api/JobApi~executeJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    executeJob(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling executeJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/{id}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getJob operation.
     * @callback moduleapi/JobApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Job
     * Retrieves a job by id, according to the &#x60;Job&#x60; interface in the engine.
     * @param {String} id The id of the job to be retrieved.
     * @param {module:api/JobApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getJob(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobDto;

      return this.apiClient.callApi(
        '/job/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getJobs operation.
     * @callback moduleapi/JobApi~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jobs
     * Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the [Get Job Count](https://docs.camunda.org/manual/develop/reference/rest/job/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobId Filter by job id.
     * @param {String} opts.jobIds Filter by a comma-separated list of job ids.
     * @param {String} opts.jobDefinitionId Only select jobs which exist for the given job definition.
     * @param {String} opts.processInstanceId Only select jobs which exist for the given process instance.
     * @param {String} opts.processInstanceIds Only select jobs which exist for the given comma-separated list of process instance ids.
     * @param {String} opts.executionId Only select jobs which exist for the given execution.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition the jobs run on.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the jobs run on.
     * @param {String} opts.activityId Only select jobs which exist for an activity with the given id.
     * @param {Boolean} opts.withRetriesLeft Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.executable Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.timers Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.messages Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.dueDates Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {String} opts.createTimes Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {Boolean} opts.withException Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.exceptionMessage Only select jobs that failed due to an exception with the given message.
     * @param {String} opts.failedActivityId Only select jobs that failed due to an exception at an activity with the given id.
     * @param {Boolean} opts.noRetriesLeft Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.active Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {String} opts.tenantIdIn Only include jobs which belong to one of the passed comma-separated tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeJobsWithoutTenantId Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/JobApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'jobId': opts['jobId'],'jobIds': opts['jobIds'],'jobDefinitionId': opts['jobDefinitionId'],'processInstanceId': opts['processInstanceId'],'processInstanceIds': opts['processInstanceIds'],'executionId': opts['executionId'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'activityId': opts['activityId'],'withRetriesLeft': opts['withRetriesLeft'],'executable': opts['executable'],'timers': opts['timers'],'messages': opts['messages'],'dueDates': opts['dueDates'],'createTimes': opts['createTimes'],'withException': opts['withException'],'exceptionMessage': opts['exceptionMessage'],'failedActivityId': opts['failedActivityId'],'noRetriesLeft': opts['noRetriesLeft'],'active': opts['active'],'suspended': opts['suspended'],'priorityLowerThanOrEquals': opts['priorityLowerThanOrEquals'],'priorityHigherThanOrEquals': opts['priorityHigherThanOrEquals'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeJobsWithoutTenantId': opts['includeJobsWithoutTenantId'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JobDto];

      return this.apiClient.callApi(
        '/job', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getJobsCount operation.
     * @callback moduleapi/JobApi~getJobsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Job Count
     * Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the [Get Jobs](https://docs.camunda.org/manual/develop/reference/rest/job/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jobId Filter by job id.
     * @param {String} opts.jobIds Filter by a comma-separated list of job ids.
     * @param {String} opts.jobDefinitionId Only select jobs which exist for the given job definition.
     * @param {String} opts.processInstanceId Only select jobs which exist for the given process instance.
     * @param {String} opts.processInstanceIds Only select jobs which exist for the given comma-separated list of process instance ids.
     * @param {String} opts.executionId Only select jobs which exist for the given execution.
     * @param {String} opts.processDefinitionId Filter by the id of the process definition the jobs run on.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the jobs run on.
     * @param {String} opts.activityId Only select jobs which exist for an activity with the given id.
     * @param {Boolean} opts.withRetriesLeft Only select jobs which have retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.executable Only select jobs which are executable, i.e., retries &gt; 0 and due date is &#x60;null&#x60; or due date is in the past. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.timers Only select jobs that are timers. Cannot be used together with &#x60;messages&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.messages Only select jobs that are messages. Cannot be used together with &#x60;timers&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.dueDates Only select jobs where the due date is lower or higher than the given date. Due date expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {String} opts.createTimes Only select jobs created before or after the given date.  Create time expressions are comma-separated and are structured as follows:  A valid condition value has the form &#x60;operator_value&#x60;. &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the date value as string.  Valid operator values are: &#x60;gt&#x60; - greater than; &#x60;lt&#x60; - lower than. &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {Boolean} opts.withException Only select jobs that failed due to an exception. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.exceptionMessage Only select jobs that failed due to an exception with the given message.
     * @param {String} opts.failedActivityId Only select jobs that failed due to an exception at an activity with the given id.
     * @param {Boolean} opts.noRetriesLeft Only select jobs which have no retries left. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.active Only include active jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended jobs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Number} opts.priorityLowerThanOrEquals Only include jobs with a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {Number} opts.priorityHigherThanOrEquals Only include jobs with a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value.
     * @param {String} opts.tenantIdIn Only include jobs which belong to one of the passed comma-separated tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include jobs which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeJobsWithoutTenantId Include jobs which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:api/JobApi~getJobsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getJobsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'jobId': opts['jobId'],'jobIds': opts['jobIds'],'jobDefinitionId': opts['jobDefinitionId'],'processInstanceId': opts['processInstanceId'],'processInstanceIds': opts['processInstanceIds'],'executionId': opts['executionId'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'activityId': opts['activityId'],'withRetriesLeft': opts['withRetriesLeft'],'executable': opts['executable'],'timers': opts['timers'],'messages': opts['messages'],'dueDates': opts['dueDates'],'createTimes': opts['createTimes'],'withException': opts['withException'],'exceptionMessage': opts['exceptionMessage'],'failedActivityId': opts['failedActivityId'],'noRetriesLeft': opts['noRetriesLeft'],'active': opts['active'],'suspended': opts['suspended'],'priorityLowerThanOrEquals': opts['priorityLowerThanOrEquals'],'priorityHigherThanOrEquals': opts['priorityHigherThanOrEquals'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeJobsWithoutTenantId': opts['includeJobsWithoutTenantId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/job/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStacktrace operation.
     * @callback moduleapi/JobApi~getStacktraceCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Exception Stacktrace
     * Retrieves the exception stacktrace corresponding to the passed job id.
     * @param {String} id The id of the job to get the exception stacktrace for.
     * @param {module:api/JobApi~getStacktraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStacktrace(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStacktrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/job/{id}/stacktrace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryJobs operation.
     * @callback moduleapi/JobApi~queryJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jobs (POST)
     * Queries for jobs that fulfill given parameters. This method is slightly more powerful than the [Get Jobs](https://docs.camunda.org/manual/develop/reference/rest/job/get-query/) method because it allows filtering by multiple jobs of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobQueryDto} opts.body 
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/JobApi~queryJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryJobs(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [JobDto];

      return this.apiClient.callApi(
        '/job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryJobsCount operation.
     * @callback moduleapi/JobApi~queryJobsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Job Count (POST)
     * Queries for jobs that fulfill given parameters. This method takes the same message body as the [Get Jobs POST](https://docs.camunda.org/manual/develop/reference/rest/job/post- query/) method and therefore it is slightly more powerful than the [Get Job Count](https://docs.camunda.org/manual/develop/reference/rest/job/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobQueryDto} opts.body 
     * @param {module:api/JobApi~queryJobsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryJobsCount(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/job/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the recalculateDuedate operation.
     * @callback moduleapi/JobApi~recalculateDuedateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recalculate Job Due Date
     * Recalculates the due date of a job by id.
     * @param {String} id The id of the job to be updated.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.creationDateBased Recalculate the due date based on the creation date of the job or the current date. Value may only be &#x60;false&#x60;, as &#x60;true&#x60; is the default behavior. 
     * @param {module:api/JobApi~recalculateDuedateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recalculateDuedate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recalculateDuedate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'creationDateBased': opts['creationDateBased']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/{id}/duedate/recalculate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setJobDuedate operation.
     * @callback moduleapi/JobApi~setJobDuedateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Job Due Date
     * Updates the due date of a job by id.
     * @param {String} id The id of the job to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobDuedateDto} opts.body 
     * @param {module:api/JobApi~setJobDuedateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setJobDuedate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setJobDuedate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/{id}/duedate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setJobPriority operation.
     * @callback moduleapi/JobApi~setJobPriorityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Job Priority
     * Sets the execution priority of a job by id.
     * @param {String} id The id of the job to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/PriorityDto} opts.body 
     * @param {module:api/JobApi~setJobPriorityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setJobPriority(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setJobPriority");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/{id}/priority', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setJobRetries operation.
     * @callback moduleapi/JobApi~setJobRetriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Job Retries
     * Sets the retries of the job to the given number of retries by id.
     * @param {String} id The id of the job to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/JobRetriesDto} opts.body 
     * @param {module:api/JobApi~setJobRetriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setJobRetries(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setJobRetries");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/{id}/retries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setJobRetriesAsyncOperation operation.
     * @callback moduleapi/JobApi~setJobRetriesAsyncOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Job Retries Async (POST)
     * Create a batch to set retries of jobs asynchronously.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetJobRetriesDto} opts.body 
     * @param {module:api/JobApi~setJobRetriesAsyncOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    setJobRetriesAsyncOperation(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;

      return this.apiClient.callApi(
        '/job/retries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateJobSuspensionState operation.
     * @callback moduleapi/JobApi~updateJobSuspensionStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/Suspend Job By Id
     * Activates or suspends a given job by id.
     * @param {String} id The id of the job to activate or suspend.
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspensionStateDto} opts.body 
     * @param {module:api/JobApi~updateJobSuspensionStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateJobSuspensionState(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateJobSuspensionState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/{id}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateSuspensionStateBy operation.
     * @callback moduleapi/JobApi~updateSuspensionStateByCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate/Suspend Jobs
     * Activates or suspends jobs matching the given criterion. This can only be on of: * &#x60;jobDefinitionId&#x60; * &#x60;processDefinitionId&#x60; * &#x60;processInstanceId&#x60; * &#x60;processDefinitionKey&#x60;
     * @param {Object} opts Optional parameters
     * @param {module:model/JobSuspensionStateDto} opts.body 
     * @param {module:api/JobApi~updateSuspensionStateByCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSuspensionStateBy(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/job/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}