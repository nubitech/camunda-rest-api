/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AuthenticationResult} from '../model/AuthenticationResult';
import {BasicUserCredentialsDto} from '../model/BasicUserCredentialsDto';
import {CheckPasswordPolicyResultDto} from '../model/CheckPasswordPolicyResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {IdentityServiceGroupInfoDto} from '../model/IdentityServiceGroupInfoDto';
import {PasswordPolicyDto} from '../model/PasswordPolicyDto';
import {PasswordPolicyRequestDto} from '../model/PasswordPolicyRequestDto';

/**
* Identity service.
* @module api/IdentityApi
* @version 7.20.0
*/
export class IdentityApi {

    /**
    * Constructs a new IdentityApi. 
    * @alias module:api/IdentityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the checkPassword operation.
     * @callback moduleapi/IdentityApi~checkPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPasswordPolicyResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Password
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/develop/user-guide/security/).
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordPolicyRequestDto} opts.body 
     * @param {module:api/IdentityApi~checkPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    checkPassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckPasswordPolicyResultDto;

      return this.apiClient.callApi(
        '/identity/password-policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGroupInfo operation.
     * @callback moduleapi/IdentityApi~getGroupInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityServiceGroupInfoDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User&#x27;s Groups
     * Gets the groups of a user by id and includes all users that share a group with the given user.
     * @param {String} userId The id of the user to get the groups for.
     * @param {module:api/IdentityApi~getGroupInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getGroupInfo(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getGroupInfo");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'userId': userId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentityServiceGroupInfoDto;

      return this.apiClient.callApi(
        '/identity/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPasswordPolicy operation.
     * @callback moduleapi/IdentityApi~getPasswordPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordPolicyDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Password Policy
     * A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules. More information on password policies in Camunda can be found in the password policy [user guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/password-policy/) and in the [security instructions](https://docs.camunda.org/manual/develop/user-guide/security/).
     * @param {module:api/IdentityApi~getPasswordPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPasswordPolicy(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PasswordPolicyDto;

      return this.apiClient.callApi(
        '/identity/password-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifyUser operation.
     * @callback moduleapi/IdentityApi~verifyUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify User
     * Verifies that user credentials are valid.
     * @param {Object} opts Optional parameters
     * @param {module:model/BasicUserCredentialsDto} opts.body 
     * @param {module:api/IdentityApi~verifyUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verifyUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthenticationResult;

      return this.apiClient.callApi(
        '/identity/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}