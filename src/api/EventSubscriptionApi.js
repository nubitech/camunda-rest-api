/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CountResultDto} from '../model/CountResultDto';
import {EventSubscriptionDto} from '../model/EventSubscriptionDto';
import {ExceptionDto} from '../model/ExceptionDto';

/**
* EventSubscription service.
* @module api/EventSubscriptionApi
* @version 7.20.0
*/
export class EventSubscriptionApi {

    /**
    * Constructs a new EventSubscriptionApi. 
    * @alias module:api/EventSubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getEventSubscriptions operation.
     * @callback moduleapi/EventSubscriptionApi~getEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSubscriptionDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List
     * Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the [Get Event Subscriptions count](https://docs.camunda.org/manual/develop/reference/rest/event-subscription/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventSubscriptionId Only select subscription with the given id.
     * @param {String} opts.eventName Only select subscriptions for events with the given name.
     * @param {module:model/String} opts.eventType Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;.
     * @param {String} opts.executionId Only select subscriptions that belong to an execution with the given id.
     * @param {String} opts.processInstanceId Only select subscriptions that belong to a process instance with the given id.
     * @param {String} opts.activityId Only select subscriptions that belong to an activity with the given id.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeEventSubscriptionsWithoutTenantId Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/EventSubscriptionApi~getEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'eventSubscriptionId': opts['eventSubscriptionId'],'eventName': opts['eventName'],'eventType': opts['eventType'],'executionId': opts['executionId'],'processInstanceId': opts['processInstanceId'],'activityId': opts['activityId'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeEventSubscriptionsWithoutTenantId': opts['includeEventSubscriptionsWithoutTenantId'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventSubscriptionDto];

      return this.apiClient.callApi(
        '/event-subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventSubscriptionsCount operation.
     * @callback moduleapi/EventSubscriptionApi~getEventSubscriptionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Count
     * Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the [Get Event Subscriptions](https://docs.camunda.org/manual/develop/reference/rest/event-subscription/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.eventSubscriptionId Only select subscription with the given id.
     * @param {String} opts.eventName Only select subscriptions for events with the given name.
     * @param {module:model/String} opts.eventType Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;.
     * @param {String} opts.executionId Only select subscriptions that belong to an execution with the given id.
     * @param {String} opts.processInstanceId Only select subscriptions that belong to a process instance with the given id.
     * @param {String} opts.activityId Only select subscriptions that belong to an activity with the given id.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
     * @param {Boolean} opts.withoutTenantId Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.includeEventSubscriptionsWithoutTenantId Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:api/EventSubscriptionApi~getEventSubscriptionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventSubscriptionsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'eventSubscriptionId': opts['eventSubscriptionId'],'eventName': opts['eventName'],'eventType': opts['eventType'],'executionId': opts['executionId'],'processInstanceId': opts['processInstanceId'],'activityId': opts['activityId'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'includeEventSubscriptionsWithoutTenantId': opts['includeEventSubscriptionsWithoutTenantId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/event-subscription/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}