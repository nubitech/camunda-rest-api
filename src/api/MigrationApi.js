/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BatchDto} from '../model/BatchDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {MigrationExecutionDto} from '../model/MigrationExecutionDto';
import {MigrationPlanDto} from '../model/MigrationPlanDto';
import {MigrationPlanGenerationDto} from '../model/MigrationPlanGenerationDto';
import {MigrationPlanReportDto} from '../model/MigrationPlanReportDto';

/**
* Migration service.
* @module api/MigrationApi
* @version 7.20.0
*/
export class MigrationApi {

    /**
    * Constructs a new MigrationApi. 
    * @alias module:api/MigrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the executeMigrationPlan operation.
     * @callback moduleapi/MigrationApi~executeMigrationPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Migration Plan
     * Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/develop/reference/rest/migration/execute-migration-async/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationExecutionDto} opts.body 
     * @param {module:api/MigrationApi~executeMigrationPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    executeMigrationPlan(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/migration/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the executeMigrationPlanAsync operation.
     * @callback moduleapi/MigrationApi~executeMigrationPlanAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Migration Plan Async (Batch)
     * Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the [Execute MigrationPlan](https://docs.camunda.org/manual/develop/reference/rest/migration/execute-migration/) method.  For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of [the user guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationExecutionDto} opts.body 
     * @param {module:api/MigrationApi~executeMigrationPlanAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    executeMigrationPlanAsync(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDto;

      return this.apiClient.callApi(
        '/migration/executeAsync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the generateMigrationPlan operation.
     * @callback moduleapi/MigrationApi~generateMigrationPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationPlanDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Migration Plan
     * Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationPlanGenerationDto} opts.body 
     * @param {module:api/MigrationApi~generateMigrationPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    generateMigrationPlan(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationPlanDto;

      return this.apiClient.callApi(
        '/migration/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the validateMigrationPlan operation.
     * @callback moduleapi/MigrationApi~validateMigrationPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationPlanReportDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Migration Plan
     * Validates a migration plan statically without executing it. This corresponds to the [creation time validation](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-migration/#creation-time-validation) described in the user guide.
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationPlanDto} opts.body 
     * @param {module:api/MigrationApi~validateMigrationPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    validateMigrationPlan(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationPlanReportDto;

      return this.apiClient.callApi(
        '/migration/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}