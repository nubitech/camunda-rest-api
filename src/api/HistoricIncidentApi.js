/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {HistoricIncidentDto} from '../model/HistoricIncidentDto';

/**
* HistoricIncident service.
* @module api/HistoricIncidentApi
* @version 7.20.0
*/
export class HistoricIncidentApi {

    /**
    * Constructs a new HistoricIncidentApi. 
    * @alias module:api/HistoricIncidentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getHistoricIncidents operation.
     * @callback moduleapi/HistoricIncidentApi~getHistoricIncidentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricIncidentDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Incidents
     * Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/develop/reference/rest/history/incident/get-incident-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.incidentId Restricts to incidents that have the given id.
     * @param {String} opts.incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Restricts to incidents that have the given incident message.
     * @param {String} opts.incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
     * @param {String} opts.processDefinitionId Restricts to incidents that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKey Restricts to incidents that have the given processDefinitionKey.
     * @param {String} opts.processDefinitionKeyIn Restricts to incidents that have one of the given process definition keys.
     * @param {String} opts.processInstanceId Restricts to incidents that belong to a process instance with the given id.
     * @param {String} opts.executionId Restricts to incidents that belong to an execution with the given id.
     * @param {Date} opts.createTimeBefore Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.createTimeAfter Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.endTimeBefore Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.endTimeAfter Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.activityId Restricts to incidents that belong to an activity with the given id.
     * @param {String} opts.failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {String} opts.causeIncidentId Restricts to incidents that have the given incident id as cause incident.
     * @param {String} opts.rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident.
     * @param {String} opts.configuration Restricts to incidents that have the given parameter set as configuration.
     * @param {String} opts.historyConfiguration Restricts to incidents that have the given parameter set as history configuration.
     * @param {Boolean} opts.open Restricts to incidents that are open.
     * @param {Boolean} opts.resolved Restricts to incidents that are resolved.
     * @param {Boolean} opts.deleted Restricts to incidents that are deleted.
     * @param {String} opts.tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {module:api/HistoricIncidentApi~getHistoricIncidentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHistoricIncidents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'incidentId': opts['incidentId'],'incidentType': opts['incidentType'],'incidentMessage': opts['incidentMessage'],'incidentMessageLike': opts['incidentMessageLike'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processDefinitionKeyIn': opts['processDefinitionKeyIn'],'processInstanceId': opts['processInstanceId'],'executionId': opts['executionId'],'createTimeBefore': opts['createTimeBefore'],'createTimeAfter': opts['createTimeAfter'],'endTimeBefore': opts['endTimeBefore'],'endTimeAfter': opts['endTimeAfter'],'activityId': opts['activityId'],'failedActivityId': opts['failedActivityId'],'causeIncidentId': opts['causeIncidentId'],'rootCauseIncidentId': opts['rootCauseIncidentId'],'configuration': opts['configuration'],'historyConfiguration': opts['historyConfiguration'],'open': opts['open'],'resolved': opts['resolved'],'deleted': opts['deleted'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'jobDefinitionIdIn': opts['jobDefinitionIdIn'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricIncidentDto];

      return this.apiClient.callApi(
        '/history/incident', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHistoricIncidentsCount operation.
     * @callback moduleapi/HistoricIncidentApi~getHistoricIncidentsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Incident Count
     * Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/develop/reference/rest/history/incident/get-incident-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.incidentId Restricts to incidents that have the given id.
     * @param {String} opts.incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Restricts to incidents that have the given incident message.
     * @param {String} opts.incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (string%), ends with (%string) or contains (%string%). 
     * @param {String} opts.processDefinitionId Restricts to incidents that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKey Restricts to incidents that have the given processDefinitionKey.
     * @param {String} opts.processDefinitionKeyIn Restricts to incidents that have one of the given process definition keys.
     * @param {String} opts.processInstanceId Restricts to incidents that belong to a process instance with the given id.
     * @param {String} opts.executionId Restricts to incidents that belong to an execution with the given id.
     * @param {Date} opts.createTimeBefore Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.createTimeAfter Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.endTimeBefore Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.endTimeAfter Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.activityId Restricts to incidents that belong to an activity with the given id.
     * @param {String} opts.failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {String} opts.causeIncidentId Restricts to incidents that have the given incident id as cause incident.
     * @param {String} opts.rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident.
     * @param {String} opts.configuration Restricts to incidents that have the given parameter set as configuration.
     * @param {String} opts.historyConfiguration Restricts to incidents that have the given parameter set as history configuration.
     * @param {Boolean} opts.open Restricts to incidents that are open.
     * @param {Boolean} opts.resolved Restricts to incidents that are resolved.
     * @param {Boolean} opts.deleted Restricts to incidents that are deleted.
     * @param {String} opts.tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include historic incidents that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {module:api/HistoricIncidentApi~getHistoricIncidentsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHistoricIncidentsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'incidentId': opts['incidentId'],'incidentType': opts['incidentType'],'incidentMessage': opts['incidentMessage'],'incidentMessageLike': opts['incidentMessageLike'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processDefinitionKeyIn': opts['processDefinitionKeyIn'],'processInstanceId': opts['processInstanceId'],'executionId': opts['executionId'],'createTimeBefore': opts['createTimeBefore'],'createTimeAfter': opts['createTimeAfter'],'endTimeBefore': opts['endTimeBefore'],'endTimeAfter': opts['endTimeAfter'],'activityId': opts['activityId'],'failedActivityId': opts['failedActivityId'],'causeIncidentId': opts['causeIncidentId'],'rootCauseIncidentId': opts['rootCauseIncidentId'],'configuration': opts['configuration'],'historyConfiguration': opts['historyConfiguration'],'open': opts['open'],'resolved': opts['resolved'],'deleted': opts['deleted'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'jobDefinitionIdIn': opts['jobDefinitionIdIn'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/history/incident/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}