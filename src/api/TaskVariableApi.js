/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ExceptionDto} from '../model/ExceptionDto';
import {PatchVariablesDto} from '../model/PatchVariablesDto';
import {VariableValueDto} from '../model/VariableValueDto';

/**
* TaskVariable service.
* @module api/TaskVariableApi
* @version 7.20.0
*/
export class TaskVariableApi {

    /**
    * Constructs a new TaskVariableApi. 
    * @alias module:api/TaskVariableApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteTaskVariable operation.
     * @callback moduleapi/TaskVariableApi~deleteTaskVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Task Variable
     * Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/develop/user-guide/process-engine/variables/).
     * @param {String} id The id of the task to delete the variable from.
     * @param {String} varName The name of the variable to be removed.
     * @param {module:api/TaskVariableApi~deleteTaskVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTaskVariable(id, varName, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTaskVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling deleteTaskVariable");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id}/variables/{varName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTaskVariable operation.
     * @callback moduleapi/TaskVariableApi~getTaskVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Task Variable
     * Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/develop/user-guide/process-engine/variables/).
     * @param {String} id The id of the task to retrieve the variable from.
     * @param {String} varName The name of the variable to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (default to <.>)
     * @param {module:api/TaskVariableApi~getTaskVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTaskVariable(id, varName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaskVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling getTaskVariable");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        'deserializeValue': opts['deserializeValue']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VariableValueDto;

      return this.apiClient.callApi(
        '/task/{id}/variables/{varName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTaskVariableBinary operation.
     * @callback moduleapi/TaskVariableApi~getTaskVariableBinaryCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Task Variable (Binary)
     * Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/develop/user-guide/process-engine/variables/).
     * @param {String} id The id of the task to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @param {module:api/TaskVariableApi~getTaskVariableBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTaskVariableBinary(id, varName, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaskVariableBinary");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling getTaskVariableBinary");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'text/plain', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/task/{id}/variables/{varName}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTaskVariables operation.
     * @callback moduleapi/TaskVariableApi~getTaskVariablesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': VariableValueDto}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Task Variables
     * Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/develop/user-guide/process-engine/variables/).
     * @param {String} id The id of the task to retrieve the variables from.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on the server side (default &#x60;true&#x60;). If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (default to <.>)
     * @param {module:api/TaskVariableApi~getTaskVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTaskVariables(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaskVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'deserializeValues': opts['deserializeValues']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};

      return this.apiClient.callApi(
        '/task/{id}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyTaskVariables operation.
     * @callback moduleapi/TaskVariableApi~modifyTaskVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/Delete Task Variables
     * Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/develop/user-guide/process-engine/variables/).
     * @param {String} id The id of the task to set variables for.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body 
     * @param {module:api/TaskVariableApi~modifyTaskVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modifyTaskVariables(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling modifyTaskVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putTaskVariable operation.
     * @callback moduleapi/TaskVariableApi~putTaskVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Task Variable
     * Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on [variable scopes and visibility](https://docs.camunda.org/manual/develop/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).  **Note**: If a variable doesn&#x27;t exist, the variable is created in the top-most scope visible from the task.
     * @param {String} id The id of the task to set the variable for.
     * @param {String} varName The name of the variable to set.
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body 
     * @param {module:api/TaskVariableApi~putTaskVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putTaskVariable(id, varName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putTaskVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling putTaskVariable");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id}/variables/{varName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setBinaryTaskVariable operation.
     * @callback moduleapi/TaskVariableApi~setBinaryTaskVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Task Variable (Binary)
     * Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on [visiblity of variables](https://docs.camunda.org/manual/develop/user-guide/process-engine/variables/).
     * @param {String} id The id of the task to retrieve the variable for.
     * @param {String} varName The name of the variable to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.data 
     * @param {module:model/String} opts.valueType 
     * @param {module:api/TaskVariableApi~setBinaryTaskVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setBinaryTaskVariable(id, varName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setBinaryTaskVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling setBinaryTaskVariable");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'data': opts['data'],'valueType': opts['valueType']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/task/{id}/variables/{varName}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}