/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AnnotationDto} from '../model/AnnotationDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {UserOperationLogEntryDto} from '../model/UserOperationLogEntryDto';

/**
* HistoricUserOperationLog service.
* @module api/HistoricUserOperationLogApi
* @version 7.20.0
*/
export class HistoricUserOperationLogApi {

    /**
    * Constructs a new HistoricUserOperationLogApi. 
    * @alias module:api/HistoricUserOperationLogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the clearAnnotationUserOperationLog operation.
     * @callback moduleapi/HistoricUserOperationLogApi~clearAnnotationUserOperationLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear Annotation of an User Operation Log (Historic)
     * Clear the annotation which was previously set for auditing reasons.
     * @param {String} operationId The operation id of the operation log to be updated.
     * @param {module:api/HistoricUserOperationLogApi~clearAnnotationUserOperationLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearAnnotationUserOperationLog(operationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling clearAnnotationUserOperationLog");
      }

      let pathParams = {
        'operationId': operationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/history/user-operation/{operationId}/clear-annotation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryUserOperationCount operation.
     * @callback moduleapi/HistoricUserOperationLogApi~queryUserOperationCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Operation Log Count
     * Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the [Get User Operation Log (Historic)](https://docs.camunda.org/manual/develop/reference/rest/history/user-operation-log/get-user-operation-log-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.deploymentId Filter by deployment id.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.processDefinitionKey Filter by process definition key.
     * @param {String} opts.processInstanceId Filter by process instance id.
     * @param {String} opts.executionId Filter by execution id.
     * @param {String} opts.caseDefinitionId Filter by case definition id.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.caseExecutionId Filter by case execution id.
     * @param {String} opts.taskId Only include operations on this task.
     * @param {String} opts.externalTaskId Only include operations on this external task.
     * @param {String} opts.batchId Only include operations on this batch.
     * @param {String} opts.jobId Filter by job id.
     * @param {String} opts.jobDefinitionId Filter by job definition id.
     * @param {String} opts.userId Only include operations of this user.
     * @param {String} opts.operationId Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation.
     * @param {String} opts.operationType Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/develop/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types.
     * @param {String} opts.entityType Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param {String} opts.entityTypeIn Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param {String} opts.category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param {String} opts.categoryIn Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param {String} opts.property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;.
     * @param {Date} opts.afterTimestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {Date} opts.beforeTimestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {module:api/HistoricUserOperationLogApi~queryUserOperationCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryUserOperationCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'deploymentId': opts['deploymentId'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processInstanceId': opts['processInstanceId'],'executionId': opts['executionId'],'caseDefinitionId': opts['caseDefinitionId'],'caseInstanceId': opts['caseInstanceId'],'caseExecutionId': opts['caseExecutionId'],'taskId': opts['taskId'],'externalTaskId': opts['externalTaskId'],'batchId': opts['batchId'],'jobId': opts['jobId'],'jobDefinitionId': opts['jobDefinitionId'],'userId': opts['userId'],'operationId': opts['operationId'],'operationType': opts['operationType'],'entityType': opts['entityType'],'entityTypeIn': opts['entityTypeIn'],'category': opts['category'],'categoryIn': opts['categoryIn'],'property': opts['property'],'afterTimestamp': opts['afterTimestamp'],'beforeTimestamp': opts['beforeTimestamp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/history/user-operation/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryUserOperationEntries operation.
     * @callback moduleapi/HistoricUserOperationLogApi~queryUserOperationEntriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserOperationLogEntryDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Operation Log (Historic)
     * Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the [Get User Operation Log Count](https://docs.camunda.org/manual/develop/reference/rest/history/user-operation-log/get-user-operation-log-query-count/) method.  Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field &#x60;processInstanceId&#x60; is populated. If a single operation updates all process instances of the same process definition, the field &#x60;processInstanceId&#x60; is &#x60;null&#x60; (a &#x60;null&#x60; restriction is viewed as a wildcard, i.e., matches a process instance with any id) and the field &#x60;processDefinitionId&#x60; is populated. This way, which entities were changed by a user operation can easily be reconstructed.
     * @param {Object} opts Optional parameters
     * @param {String} opts.deploymentId Filter by deployment id.
     * @param {String} opts.processDefinitionId Filter by process definition id.
     * @param {String} opts.processDefinitionKey Filter by process definition key.
     * @param {String} opts.processInstanceId Filter by process instance id.
     * @param {String} opts.executionId Filter by execution id.
     * @param {String} opts.caseDefinitionId Filter by case definition id.
     * @param {String} opts.caseInstanceId Filter by case instance id.
     * @param {String} opts.caseExecutionId Filter by case execution id.
     * @param {String} opts.taskId Only include operations on this task.
     * @param {String} opts.externalTaskId Only include operations on this external task.
     * @param {String} opts.batchId Only include operations on this batch.
     * @param {String} opts.jobId Filter by job id.
     * @param {String} opts.jobDefinitionId Filter by job definition id.
     * @param {String} opts.userId Only include operations of this user.
     * @param {String} opts.operationId Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation.
     * @param {String} opts.operationType Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/develop/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types.
     * @param {String} opts.entityType Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param {String} opts.entityTypeIn Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;.
     * @param {String} opts.category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param {String} opts.categoryIn Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;.
     * @param {String} opts.property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;.
     * @param {Date} opts.afterTimestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {Date} opts.beforeTimestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/HistoricUserOperationLogApi~queryUserOperationEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryUserOperationEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'deploymentId': opts['deploymentId'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processInstanceId': opts['processInstanceId'],'executionId': opts['executionId'],'caseDefinitionId': opts['caseDefinitionId'],'caseInstanceId': opts['caseInstanceId'],'caseExecutionId': opts['caseExecutionId'],'taskId': opts['taskId'],'externalTaskId': opts['externalTaskId'],'batchId': opts['batchId'],'jobId': opts['jobId'],'jobDefinitionId': opts['jobDefinitionId'],'userId': opts['userId'],'operationId': opts['operationId'],'operationType': opts['operationType'],'entityType': opts['entityType'],'entityTypeIn': opts['entityTypeIn'],'category': opts['category'],'categoryIn': opts['categoryIn'],'property': opts['property'],'afterTimestamp': opts['afterTimestamp'],'beforeTimestamp': opts['beforeTimestamp'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserOperationLogEntryDto];

      return this.apiClient.callApi(
        '/history/user-operation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setAnnotationUserOperationLog operation.
     * @callback moduleapi/HistoricUserOperationLogApi~setAnnotationUserOperationLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Annotation to an User Operation Log (Historic)
     * Set an annotation for auditing reasons.
     * @param {String} operationId The operation id of the operation log to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnnotationDto} opts.body 
     * @param {module:api/HistoricUserOperationLogApi~setAnnotationUserOperationLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setAnnotationUserOperationLog(operationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling setAnnotationUserOperationLog");
      }

      let pathParams = {
        'operationId': operationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/history/user-operation/{operationId}/set-annotation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}