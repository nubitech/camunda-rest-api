/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ExceptionDto} from '../model/ExceptionDto';
import {TelemetryConfigurationDto} from '../model/TelemetryConfigurationDto';
import {TelemetryDataDto} from '../model/TelemetryDataDto';

/**
* Telemetry service.
* @module api/TelemetryApi
* @version 7.20.0
*/
export class TelemetryApi {

    /**
    * Constructs a new TelemetryApi. 
    * @alias module:api/TelemetryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the configureTelemetry operation.
     * @callback moduleapi/TelemetryApi~configureTelemetryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure Telemetry
     * Configures whether Camunda receives data collection of the process engine setup and usage.
     * @param {Object} opts Optional parameters
     * @param {module:model/TelemetryConfigurationDto} opts.body 
     * @param {module:api/TelemetryApi~configureTelemetryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configureTelemetry(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/telemetry/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTelemetryConfiguration operation.
     * @callback moduleapi/TelemetryApi~getTelemetryConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TelemetryConfigurationDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Telemetry Configuration
     * Fetches Telemetry Configuration.
     * @param {module:api/TelemetryApi~getTelemetryConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTelemetryConfiguration(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TelemetryConfigurationDto;

      return this.apiClient.callApi(
        '/telemetry/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTelemetryData operation.
     * @callback moduleapi/TelemetryApi~getTelemetryDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TelemetryDataDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Telemetry Data
     * Fetches Telemetry Data.
     * @param {module:api/TelemetryApi~getTelemetryDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTelemetryData(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TelemetryDataDto;

      return this.apiClient.callApi(
        '/telemetry/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}