/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {ResourceOptionsDto} from '../model/ResourceOptionsDto';
import {TenantDto} from '../model/TenantDto';

/**
* Tenant service.
* @module api/TenantApi
* @version 7.20.0
*/
export class TenantApi {

    /**
    * Constructs a new TenantApi. 
    * @alias module:api/TenantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the availableTenantGroupMembersOperations operation.
     * @callback moduleapi/TenantApi~availableTenantGroupMembersOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tenant Group Membership Resource Options
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param {String} id The id of the tenant
     * @param {module:api/TenantApi~availableTenantGroupMembersOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    availableTenantGroupMembersOperations(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling availableTenantGroupMembersOperations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.apiClient.callApi(
        '/tenant/{id}/group-members', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the availableTenantInstanceOperations operation.
     * @callback moduleapi/TenantApi~availableTenantInstanceOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tenant Resource Options
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, one for the resource as such and this one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant/{id}&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param {String} id The id of the tenant
     * @param {module:api/TenantApi~availableTenantInstanceOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    availableTenantInstanceOperations(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling availableTenantInstanceOperations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.apiClient.callApi(
        '/tenant/{id}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the availableTenantResourceOperations operation.
     * @callback moduleapi/TenantApi~availableTenantResourceOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tenant Resource Options
     * The &#x60;/tenant&#x60; resource supports two custom OPTIONS requests, this one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the &#x60;/tenant&#x60; resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param {module:api/TenantApi~availableTenantResourceOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    availableTenantResourceOperations(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.apiClient.callApi(
        '/tenant', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the availableTenantUserMembersOperations operation.
     * @callback moduleapi/TenantApi~availableTenantUserMembersOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceOptionsDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tenant User Membership Resource Options
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
     * @param {String} id The id of the tenant
     * @param {module:api/TenantApi~availableTenantUserMembersOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    availableTenantUserMembersOperations(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling availableTenantUserMembersOperations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceOptionsDto;

      return this.apiClient.callApi(
        '/tenant/{id}/user-members', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createGroupMembership operation.
     * @callback moduleapi/TenantApi~createGroupMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tenant Group Membership
     * Creates a membership between a tenant and a group.
     * @param {String} id The id of the tenant.
     * @param {String} groupId The id of the group.
     * @param {module:api/TenantApi~createGroupMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createGroupMembership(id, groupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createGroupMembership");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling createGroupMembership");
      }

      let pathParams = {
        'id': id,'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tenant/{id}/group-members/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTenant operation.
     * @callback moduleapi/TenantApi~createTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tenant
     * Create a new tenant.
     * @param {Object} opts Optional parameters
     * @param {module:model/TenantDto} opts.body 
     * @param {module:api/TenantApi~createTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTenant(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tenant/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createUserMembership operation.
     * @callback moduleapi/TenantApi~createUserMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tenant User Membership
     * Creates a membership between a tenant and an user.
     * @param {String} id The id of the tenant.
     * @param {String} userId The id of the user.
     * @param {module:api/TenantApi~createUserMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUserMembership(id, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createUserMembership");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserMembership");
      }

      let pathParams = {
        'id': id,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tenant/{id}/user-members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteGroupMembership operation.
     * @callback moduleapi/TenantApi~deleteGroupMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tenant Group Membership
     * Creates a membership between a tenant and a group.
     * @param {String} id The id of the tenant.
     * @param {String} groupId The id of the group.
     * @param {module:api/TenantApi~deleteGroupMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupMembership(id, groupId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupMembership");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupMembership");
      }

      let pathParams = {
        'id': id,'groupId': groupId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tenant/{id}/group-members/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTenant operation.
     * @callback moduleapi/TenantApi~deleteTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Tenant
     * Deletes a tenant by id.
     * @param {String} id The id of the tenant to be deleted.
     * @param {module:api/TenantApi~deleteTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTenant(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTenant");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tenant/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUserMembership operation.
     * @callback moduleapi/TenantApi~deleteUserMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Tenant User Membership
     * Deletes a membership between a tenant and an user.
     * @param {String} id The id of the tenant.
     * @param {String} userId The id of the user.
     * @param {module:api/TenantApi~deleteUserMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserMembership(id, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserMembership");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserMembership");
      }

      let pathParams = {
        'id': id,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tenant/{id}/user-members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTenant operation.
     * @callback moduleapi/TenantApi~getTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tenant
     * Retrieves a tenant.
     * @param {String} id The id of the tenant to be retrieved.
     * @param {module:api/TenantApi~getTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTenant(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTenant");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenantDto;

      return this.apiClient.callApi(
        '/tenant/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTenantCount operation.
     * @callback moduleapi/TenantApi~getTenantCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tenant Count
     * Query for tenants using a list of parameters and retrieves the count.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Filter by the id of the tenant.
     * @param {String} opts.name Filter by the name of the tenant.
     * @param {String} opts.nameLike Filter by the name that the parameter is a substring of.
     * @param {String} opts.userMember Select only tenants where the given user is a member of.
     * @param {String} opts.groupMember Select only tenants where the given group is a member of.
     * @param {Boolean} opts.includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:api/TenantApi~getTenantCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTenantCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'name': opts['name'],'nameLike': opts['nameLike'],'userMember': opts['userMember'],'groupMember': opts['groupMember'],'includingGroupsOfUser': opts['includingGroupsOfUser']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/tenant/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryTenants operation.
     * @callback moduleapi/TenantApi~queryTenantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TenantDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tenants
     * Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the [Get Tenant Count](https://docs.camunda.org/manual/develop/reference/rest/tenant/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {String} opts.id Filter by the id of the tenant.
     * @param {String} opts.name Filter by the name of the tenant.
     * @param {String} opts.nameLike Filter by the name that the parameter is a substring of.
     * @param {String} opts.userMember Select only tenants where the given user is a member of.
     * @param {String} opts.groupMember Select only tenants where the given group is a member of.
     * @param {Boolean} opts.includingGroupsOfUser Select only tenants where the user or one of his groups is a member of. Can only be used in combination with the &#x60;userMember&#x60; parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:api/TenantApi~queryTenantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryTenants(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults'],'id': opts['id'],'name': opts['name'],'nameLike': opts['nameLike'],'userMember': opts['userMember'],'groupMember': opts['groupMember'],'includingGroupsOfUser': opts['includingGroupsOfUser']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TenantDto];

      return this.apiClient.callApi(
        '/tenant', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTenant operation.
     * @callback moduleapi/TenantApi~updateTenantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Tenant
     * Updates a given tenant.
     * @param {String} id The id of the tenant.
     * @param {Object} opts Optional parameters
     * @param {module:model/TenantDto} opts.body 
     * @param {module:api/TenantApi~updateTenantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTenant(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTenant");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tenant/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}