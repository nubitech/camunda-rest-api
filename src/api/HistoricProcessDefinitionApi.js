/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CleanableHistoricProcessInstanceReportResultDto} from '../model/CleanableHistoricProcessInstanceReportResultDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {HistoricActivityStatisticsDto} from '../model/HistoricActivityStatisticsDto';

/**
* HistoricProcessDefinition service.
* @module api/HistoricProcessDefinitionApi
* @version 7.20.0
*/
export class HistoricProcessDefinitionApi {

    /**
    * Constructs a new HistoricProcessDefinitionApi. 
    * @alias module:api/HistoricProcessDefinitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getCleanableHistoricProcessInstanceReport operation.
     * @callback moduleapi/HistoricProcessDefinitionApi~getCleanableHistoricProcessInstanceReportCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CleanableHistoricProcessInstanceReportResultDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cleanable Process Instance Report
     * Retrieves a report about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup))  so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/develop/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionIdIn Filter by process definition ids. Must be a comma-separated list of process definition ids.
     * @param {String} opts.processDefinitionKeyIn Filter by process definition keys. Must be a comma-separated list of process definition keys.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.compact Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/HistoricProcessDefinitionApi~getCleanableHistoricProcessInstanceReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCleanableHistoricProcessInstanceReport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'processDefinitionIdIn': opts['processDefinitionIdIn'],'processDefinitionKeyIn': opts['processDefinitionKeyIn'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'compact': opts['compact'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CleanableHistoricProcessInstanceReportResultDto];

      return this.apiClient.callApi(
        '/history/process-definition/cleanable-process-instance-report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCleanableHistoricProcessInstanceReportCount operation.
     * @callback moduleapi/HistoricProcessDefinitionApi~getCleanableHistoricProcessInstanceReportCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cleanable Process Instance Report Count
     * Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/develop/reference/rest/history/process-definition/get-cleanable-process-instance-report/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.processDefinitionIdIn Filter by process definition ids. Must be a comma-separated list of process definition ids.
     * @param {String} opts.processDefinitionKeyIn Filter by process definition keys. Must be a comma-separated list of process definition keys.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A process definition must have one of the given  tenant ids.
     * @param {Boolean} opts.withoutTenantId Only include process definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.compact Only include process instances which have more than zero finished instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {module:api/HistoricProcessDefinitionApi~getCleanableHistoricProcessInstanceReportCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCleanableHistoricProcessInstanceReportCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'processDefinitionIdIn': opts['processDefinitionIdIn'],'processDefinitionKeyIn': opts['processDefinitionKeyIn'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'compact': opts['compact']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/history/process-definition/cleanable-process-instance-report/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHistoricActivityStatistics operation.
     * @callback moduleapi/HistoricProcessDefinitionApi~getHistoricActivityStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricActivityStatisticsDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Historic Activity Statistics
     * Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). **Note:** This only includes historic data.
     * @param {String} id The id of the process definition.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.canceled Whether to include the number of canceled activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {Boolean} opts.finished Whether to include the number of finished activity instances in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {Boolean} opts.completeScope Whether to include the number of activity instances which completed a scope in the result or not. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {Boolean} opts.incidents Whether to include the number of incidents. Valid values are &#x60;true&#x60; or &#x60;false&#x60;. Default: &#x60;false&#x60;.
     * @param {Date} opts.startedBefore Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.startedAfter Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.finishedBefore Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.finishedAfter Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/),  the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;,  e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.processInstanceIdIn Restrict to process instances with the given IDs. The IDs must be provided as a comma- separated list.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {module:api/HistoricProcessDefinitionApi~getHistoricActivityStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getHistoricActivityStatistics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHistoricActivityStatistics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'canceled': opts['canceled'],'finished': opts['finished'],'completeScope': opts['completeScope'],'incidents': opts['incidents'],'startedBefore': opts['startedBefore'],'startedAfter': opts['startedAfter'],'finishedBefore': opts['finishedBefore'],'finishedAfter': opts['finishedAfter'],'processInstanceIdIn': opts['processInstanceIdIn'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HistoricActivityStatisticsDto];

      return this.apiClient.callApi(
        '/history/process-definition/{id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}