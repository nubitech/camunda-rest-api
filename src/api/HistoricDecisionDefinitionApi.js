/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CleanableHistoricDecisionInstanceReportResultDto} from '../model/CleanableHistoricDecisionInstanceReportResultDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';

/**
* HistoricDecisionDefinition service.
* @module api/HistoricDecisionDefinitionApi
* @version 7.20.0
*/
export class HistoricDecisionDefinitionApi {

    /**
    * Constructs a new HistoricDecisionDefinitionApi. 
    * @alias module:api/HistoricDecisionDefinitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getCleanableHistoricDecisionInstanceReport operation.
     * @callback moduleapi/HistoricDecisionDefinitionApi~getCleanableHistoricDecisionInstanceReportCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CleanableHistoricDecisionInstanceReportResultDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cleanable Decision Instance Report
     * Retrieves a report about a decision definition and finished decision instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup)),  so that you can tune the history time to live. These reports include the count of the finished historic decision instances, cleanable decision instances and basic decision definition data - id, key, name and version. The size of the result set can be retrieved by using the  [Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/develop/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.decisionDefinitionIdIn Filter by decision definition ids. Must be a comma-separated list of decision definition ids.
     * @param {String} opts.decisionDefinitionKeyIn Filter by decision definition keys. Must be a comma-separated list of decision definition keys.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids.
     * @param {Boolean} opts.withoutTenantId Only include decision definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60;  is the default behavior.
     * @param {Boolean} opts.compact Only include decision instances which have more than zero finished instances. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/HistoricDecisionDefinitionApi~getCleanableHistoricDecisionInstanceReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCleanableHistoricDecisionInstanceReport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'decisionDefinitionIdIn': opts['decisionDefinitionIdIn'],'decisionDefinitionKeyIn': opts['decisionDefinitionKeyIn'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'compact': opts['compact'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CleanableHistoricDecisionInstanceReportResultDto];

      return this.apiClient.callApi(
        '/history/decision-definition/cleanable-decision-instance-report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCleanableHistoricDecisionInstanceReportCount operation.
     * @callback moduleapi/HistoricDecisionDefinitionApi~getCleanableHistoricDecisionInstanceReportCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cleanable Decision Instance Report Count
     * Queries for the number of report results about a decision definition and finished decision instances relevant to history cleanup (see [History cleanup](https://docs.camunda.org/manual/develop/user-guide/process-engine/history/#history-cleanup)). Takes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/develop/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/)  method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.decisionDefinitionIdIn Filter by decision definition ids. Must be a comma-separated list of decision definition ids.
     * @param {String} opts.decisionDefinitionKeyIn Filter by decision definition keys. Must be a comma-separated list of decision definition keys.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant  ids.
     * @param {Boolean} opts.withoutTenantId Only include decision definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60;  is the default behavior.
     * @param {Boolean} opts.compact Only include decision instances which have more than zero finished instances. Value may only be &#x60;true&#x60;,  as &#x60;false&#x60; is the default behavior.
     * @param {module:api/HistoricDecisionDefinitionApi~getCleanableHistoricDecisionInstanceReportCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCleanableHistoricDecisionInstanceReportCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'decisionDefinitionIdIn': opts['decisionDefinitionIdIn'],'decisionDefinitionKeyIn': opts['decisionDefinitionKeyIn'],'tenantIdIn': opts['tenantIdIn'],'withoutTenantId': opts['withoutTenantId'],'compact': opts['compact']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/history/decision-definition/cleanable-decision-instance-report/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}