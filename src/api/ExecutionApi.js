/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CountResultDto} from '../model/CountResultDto';
import {CreateIncidentDto} from '../model/CreateIncidentDto';
import {EventSubscriptionDto} from '../model/EventSubscriptionDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {ExecutionDto} from '../model/ExecutionDto';
import {ExecutionQueryDto} from '../model/ExecutionQueryDto';
import {ExecutionTriggerDto} from '../model/ExecutionTriggerDto';
import {IncidentDto} from '../model/IncidentDto';
import {PatchVariablesDto} from '../model/PatchVariablesDto';
import {VariableValueDto} from '../model/VariableValueDto';

/**
* Execution service.
* @module api/ExecutionApi
* @version 7.20.0
*/
export class ExecutionApi {

    /**
    * Constructs a new ExecutionApi. 
    * @alias module:api/ExecutionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createIncident operation.
     * @callback moduleapi/ExecutionApi~createIncidentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncidentDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Incident
     * Creates a custom incident with given properties.
     * @param {String} id The id of the execution to create a new incident for.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIncidentDto} opts.body 
     * @param {module:api/ExecutionApi~createIncidentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createIncident(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createIncident");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IncidentDto;

      return this.apiClient.callApi(
        '/execution/{id}/create-incident', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteLocalExecutionVariable operation.
     * @callback moduleapi/ExecutionApi~deleteLocalExecutionVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Local Execution Variable
     * Deletes a variable in the context of a given execution by id. Deletion does not propagate upwards in the execution hierarchy.
     * @param {String} id The id of the execution to delete the variable from.
     * @param {String} varName The name of the variable to delete.
     * @param {module:api/ExecutionApi~deleteLocalExecutionVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLocalExecutionVariable(id, varName, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLocalExecutionVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling deleteLocalExecutionVariable");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/execution/{id}/localVariables/{varName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExecution operation.
     * @callback moduleapi/ExecutionApi~getExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Execution
     * Retrieves an execution by id, according to the &#x60;Execution&#x60; interface in the engine.
     * @param {String} id The id of the execution to be retrieved.
     * @param {module:api/ExecutionApi~getExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getExecution(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExecution");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecutionDto;

      return this.apiClient.callApi(
        '/execution/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExecutions operation.
     * @callback moduleapi/ExecutionApi~getExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExecutionDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Executions
     * Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get Execution Count](https://docs.camunda.org/manual/develop/reference/rest/execution/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.businessKey Filter by the business key of the process instances the executions belong to.
     * @param {String} opts.processDefinitionId Filter by the process definition the executions run on.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the executions run on.
     * @param {String} opts.processInstanceId Filter by the id of the process instance the execution belongs to.
     * @param {String} opts.activityId Filter by the id of the activity the execution currently executes.
     * @param {String} opts.signalEventSubscriptionName Select only those executions that expect a signal of the given name.
     * @param {String} opts.messageEventSubscriptionName Select only those executions that expect a message of the given name.
     * @param {Boolean} opts.active Only include active executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.
     * @param {String} opts.variables Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {String} opts.processVariables Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/ExecutionApi~getExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getExecutions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'businessKey': opts['businessKey'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processInstanceId': opts['processInstanceId'],'activityId': opts['activityId'],'signalEventSubscriptionName': opts['signalEventSubscriptionName'],'messageEventSubscriptionName': opts['messageEventSubscriptionName'],'active': opts['active'],'suspended': opts['suspended'],'incidentId': opts['incidentId'],'incidentType': opts['incidentType'],'incidentMessage': opts['incidentMessage'],'incidentMessageLike': opts['incidentMessageLike'],'tenantIdIn': opts['tenantIdIn'],'variables': opts['variables'],'processVariables': opts['processVariables'],'variableNamesIgnoreCase': opts['variableNamesIgnoreCase'],'variableValuesIgnoreCase': opts['variableValuesIgnoreCase'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExecutionDto];

      return this.apiClient.callApi(
        '/execution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getExecutionsCount operation.
     * @callback moduleapi/ExecutionApi~getExecutionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Execution Count
     * Queries for the number of executions that fulfill given parameters. Takes the same parameters as the [Get Executions](https://docs.camunda.org/manual/develop/reference/rest/execution/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.businessKey Filter by the business key of the process instances the executions belong to.
     * @param {String} opts.processDefinitionId Filter by the process definition the executions run on.
     * @param {String} opts.processDefinitionKey Filter by the key of the process definition the executions run on.
     * @param {String} opts.processInstanceId Filter by the id of the process instance the execution belongs to.
     * @param {String} opts.activityId Filter by the id of the activity the execution currently executes.
     * @param {String} opts.signalEventSubscriptionName Select only those executions that expect a signal of the given name.
     * @param {String} opts.messageEventSubscriptionName Select only those executions that expect a message of the given name.
     * @param {Boolean} opts.active Only include active executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {Boolean} opts.suspended Only include suspended executions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior.
     * @param {String} opts.incidentId Filter by the incident id.
     * @param {String} opts.incidentType Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Filter by the incident message. Exact match.
     * @param {String} opts.incidentMessageLike Filter by the incident message that the parameter is a substring of.
     * @param {String} opts.tenantIdIn Filter by a comma-separated list of tenant ids. An execution must have one of the given tenant ids.
     * @param {String} opts.variables Only include executions that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {String} opts.processVariables Only include executions that belong to a process instance with variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value. **Note:** Values are always treated as &#x60;String&#x60; objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters.
     * @param {Boolean} opts.variableNamesIgnoreCase Match all variable names provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal.
     * @param {Boolean} opts.variableValuesIgnoreCase Match all variable values provided in &#x60;variables&#x60; and &#x60;processVariables&#x60; case- insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal.
     * @param {module:api/ExecutionApi~getExecutionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getExecutionsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'businessKey': opts['businessKey'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKey': opts['processDefinitionKey'],'processInstanceId': opts['processInstanceId'],'activityId': opts['activityId'],'signalEventSubscriptionName': opts['signalEventSubscriptionName'],'messageEventSubscriptionName': opts['messageEventSubscriptionName'],'active': opts['active'],'suspended': opts['suspended'],'incidentId': opts['incidentId'],'incidentType': opts['incidentType'],'incidentMessage': opts['incidentMessage'],'incidentMessageLike': opts['incidentMessageLike'],'tenantIdIn': opts['tenantIdIn'],'variables': opts['variables'],'processVariables': opts['processVariables'],'variableNamesIgnoreCase': opts['variableNamesIgnoreCase'],'variableValuesIgnoreCase': opts['variableValuesIgnoreCase']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/execution/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLocalExecutionVariable operation.
     * @callback moduleapi/ExecutionApi~getLocalExecutionVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableValueDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Local Execution Variable
     * Retrieves a variable from the context of a given execution by id. Does not traverse the parent execution hierarchy.
     * @param {String} id The id of the execution to retrieve the variable from.
     * @param {String} varName The name of the variable to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValue Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath. If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {module:api/ExecutionApi~getLocalExecutionVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLocalExecutionVariable(id, varName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLocalExecutionVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling getLocalExecutionVariable");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        'deserializeValue': opts['deserializeValue']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VariableValueDto;

      return this.apiClient.callApi(
        '/execution/{id}/localVariables/{varName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLocalExecutionVariableBinary operation.
     * @callback moduleapi/ExecutionApi~getLocalExecutionVariableBinaryCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Local Execution Variable (Binary)
     * Retrieves a binary variable from the context of a given execution by id. Does not traverse the parent execution hierarchy. Applicable for byte array and file variables.
     * @param {String} id The id of the execution to retrieve the variable from.
     * @param {String} varName The name of the variable to get.
     * @param {module:api/ExecutionApi~getLocalExecutionVariableBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLocalExecutionVariableBinary(id, varName, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLocalExecutionVariableBinary");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling getLocalExecutionVariableBinary");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'text/plain', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/execution/{id}/localVariables/{varName}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLocalExecutionVariables operation.
     * @callback moduleapi/ExecutionApi~getLocalExecutionVariablesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': VariableValueDto}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Local Execution Variables
     * Retrieves all variables of a given execution by id.
     * @param {String} id The id of the execution to retrieve the variables from.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deserializeValues Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine.
     * @param {module:api/ExecutionApi~getLocalExecutionVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLocalExecutionVariables(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLocalExecutionVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'deserializeValues': opts['deserializeValues']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': VariableValueDto};

      return this.apiClient.callApi(
        '/execution/{id}/localVariables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMessageEventSubscription operation.
     * @callback moduleapi/ExecutionApi~getMessageEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Message Event Subscription
     * Retrieves a message event subscription for a given execution by id and a message name.
     * @param {String} id The id of the execution that holds the subscription.
     * @param {String} messageName The name of the message that the subscription corresponds to.
     * @param {module:api/ExecutionApi~getMessageEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMessageEventSubscription(id, messageName, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMessageEventSubscription");
      }
      // verify the required parameter 'messageName' is set
      if (messageName === undefined || messageName === null) {
        throw new Error("Missing the required parameter 'messageName' when calling getMessageEventSubscription");
      }

      let pathParams = {
        'id': id,'messageName': messageName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionDto;

      return this.apiClient.callApi(
        '/execution/{id}/messageSubscriptions/{messageName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the modifyLocalExecutionVariables operation.
     * @callback moduleapi/ExecutionApi~modifyLocalExecutionVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/Delete Local Execution Variables
     * Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     * @param {String} id The id of the execution to set variables for.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchVariablesDto} opts.body 
     * @param {module:api/ExecutionApi~modifyLocalExecutionVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modifyLocalExecutionVariables(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling modifyLocalExecutionVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/execution/{id}/localVariables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putLocalExecutionVariable operation.
     * @callback moduleapi/ExecutionApi~putLocalExecutionVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put Local Execution Variable
     * Sets a variable in the context of a given execution by id. Update does not propagate upwards in the execution hierarchy.
     * @param {String} id The id of the execution to set the variable for.
     * @param {String} varName The name of the variable to set.
     * @param {Object} opts Optional parameters
     * @param {module:model/VariableValueDto} opts.body 
     * @param {module:api/ExecutionApi~putLocalExecutionVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putLocalExecutionVariable(id, varName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putLocalExecutionVariable");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling putLocalExecutionVariable");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/execution/{id}/localVariables/{varName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryExecutions operation.
     * @callback moduleapi/ExecutionApi~queryExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExecutionDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Executions (POST)
     * Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Executions](https://docs.camunda.org/manual/develop/reference/rest/execution/get-query/) method because it allows to filter by multiple instance and execution variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionQueryDto} opts.body 
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/ExecutionApi~queryExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryExecutions(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ExecutionDto];

      return this.apiClient.callApi(
        '/execution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the queryExecutionsCount operation.
     * @callback moduleapi/ExecutionApi~queryExecutionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Execution Count (POST)
     * Queries for the number of executions that fulfill given parameters. This method takes the same message body as the [Get Executions POST](https://docs.camunda.org/manual/develop/reference/rest/execution/post-query/) method and therefore it is slightly more powerful than the [Get Execution Count](https://docs.camunda.org/manual/develop/reference/rest/execution/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionQueryDto} opts.body 
     * @param {module:api/ExecutionApi~queryExecutionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    queryExecutionsCount(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/execution/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setLocalExecutionVariableBinary operation.
     * @callback moduleapi/ExecutionApi~setLocalExecutionVariableBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post Local Execution Variable (Binary)
     * Sets the serialized value for a binary variable or the binary value for a file variable in the context of a given execution by id.
     * @param {String} id The id of the execution to set the variable for.
     * @param {String} varName The name of the variable to set.
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.data 
     * @param {module:model/String} opts.valueType 
     * @param {module:api/ExecutionApi~setLocalExecutionVariableBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setLocalExecutionVariableBinary(id, varName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLocalExecutionVariableBinary");
      }
      // verify the required parameter 'varName' is set
      if (varName === undefined || varName === null) {
        throw new Error("Missing the required parameter 'varName' when calling setLocalExecutionVariableBinary");
      }

      let pathParams = {
        'id': id,'varName': varName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'data': opts['data'],'valueType': opts['valueType']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/execution/{id}/localVariables/{varName}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the signalExecution operation.
     * @callback moduleapi/ExecutionApi~signalExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger Execution
     * Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.
     * @param {String} id The id of the execution to signal.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionTriggerDto} opts.body 
     * @param {module:api/ExecutionApi~signalExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    signalExecution(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling signalExecution");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/execution/{id}/signal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the triggerEvent operation.
     * @callback moduleapi/ExecutionApi~triggerEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger Message Event Subscription
     * Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message&#x27;s payload.
     * @param {String} id The id of the execution to submit the message to.
     * @param {String} messageName The name of the message that the addressed subscription corresponds to.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecutionTriggerDto} opts.body 
     * @param {module:api/ExecutionApi~triggerEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triggerEvent(id, messageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triggerEvent");
      }
      // verify the required parameter 'messageName' is set
      if (messageName === undefined || messageName === null) {
        throw new Error("Missing the required parameter 'messageName' when calling triggerEvent");
      }

      let pathParams = {
        'id': id,'messageName': messageName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/execution/{id}/messageSubscriptions/{messageName}/trigger', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}