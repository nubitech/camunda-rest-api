/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AnnotationDto} from '../model/AnnotationDto';
import {CountResultDto} from '../model/CountResultDto';
import {ExceptionDto} from '../model/ExceptionDto';
import {IncidentDto} from '../model/IncidentDto';

/**
* Incident service.
* @module api/IncidentApi
* @version 7.20.0
*/
export class IncidentApi {

    /**
    * Constructs a new IncidentApi. 
    * @alias module:api/IncidentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the clearIncidentAnnotation operation.
     * @callback moduleapi/IncidentApi~clearIncidentAnnotationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear Incident Annotation
     * Clears the annotation of an incident with given id.
     * @param {String} id The id of the incident to clear the annotation at.
     * @param {module:api/IncidentApi~clearIncidentAnnotationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearIncidentAnnotation(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clearIncidentAnnotation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/incident/{id}/annotation', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIncident operation.
     * @callback moduleapi/IncidentApi~getIncidentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncidentDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Incident
     * Retrieves an incident by ID.
     * @param {String} id The id of the incident to be retrieved.
     * @param {module:api/IncidentApi~getIncidentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIncident(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIncident");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IncidentDto;

      return this.apiClient.callApi(
        '/incident/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIncidents operation.
     * @callback moduleapi/IncidentApi~getIncidentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IncidentDto>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List
     * Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the [Get Incident Count](https://docs.camunda.org/manual/develop/reference/rest/incident/get-query-count/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.incidentId Restricts to incidents that have the given id.
     * @param {String} opts.incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Restricts to incidents that have the given incident message.
     * @param {String} opts.incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
     * @param {String} opts.processDefinitionId Restricts to incidents that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKeyIn Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
     * @param {String} opts.processInstanceId Restricts to incidents that belong to a process instance with the given id.
     * @param {String} opts.executionId Restricts to incidents that belong to an execution with the given id.
     * @param {Date} opts.incidentTimestampBefore Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.incidentTimestampAfter Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.activityId Restricts to incidents that belong to an activity with the given id.
     * @param {String} opts.failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {String} opts.causeIncidentId Restricts to incidents that have the given incident id as cause incident.
     * @param {String} opts.rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident.
     * @param {String} opts.configuration Restricts to incidents that have the given parameter set as configuration.
     * @param {String} opts.tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {String} opts.jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {module:model/String} opts.sortBy Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter.
     * @param {module:model/String} opts.sortOrder Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter.
     * @param {Number} opts.firstResult Pagination of results. Specifies the index of the first result to return.
     * @param {Number} opts.maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.
     * @param {module:api/IncidentApi~getIncidentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIncidents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'incidentId': opts['incidentId'],'incidentType': opts['incidentType'],'incidentMessage': opts['incidentMessage'],'incidentMessageLike': opts['incidentMessageLike'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKeyIn': opts['processDefinitionKeyIn'],'processInstanceId': opts['processInstanceId'],'executionId': opts['executionId'],'incidentTimestampBefore': opts['incidentTimestampBefore'],'incidentTimestampAfter': opts['incidentTimestampAfter'],'activityId': opts['activityId'],'failedActivityId': opts['failedActivityId'],'causeIncidentId': opts['causeIncidentId'],'rootCauseIncidentId': opts['rootCauseIncidentId'],'configuration': opts['configuration'],'tenantIdIn': opts['tenantIdIn'],'jobDefinitionIdIn': opts['jobDefinitionIdIn'],'sortBy': opts['sortBy'],'sortOrder': opts['sortOrder'],'firstResult': opts['firstResult'],'maxResults': opts['maxResults']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IncidentDto];

      return this.apiClient.callApi(
        '/incident', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIncidentsCount operation.
     * @callback moduleapi/IncidentApi~getIncidentsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResultDto{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Count
     * Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the [Get Incidents](https://docs.camunda.org/manual/develop/reference/rest/incident/get-query/) method.
     * @param {Object} opts Optional parameters
     * @param {String} opts.incidentId Restricts to incidents that have the given id.
     * @param {String} opts.incidentType Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     * @param {String} opts.incidentMessage Restricts to incidents that have the given incident message.
     * @param {String} opts.incidentMessageLike Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#x27;%&#x27; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;).
     * @param {String} opts.processDefinitionId Restricts to incidents that belong to a process definition with the given id.
     * @param {String} opts.processDefinitionKeyIn Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list.
     * @param {String} opts.processInstanceId Restricts to incidents that belong to a process instance with the given id.
     * @param {String} opts.executionId Restricts to incidents that belong to an execution with the given id.
     * @param {Date} opts.incidentTimestampBefore Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {Date} opts.incidentTimestampAfter Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/develop/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;.
     * @param {String} opts.activityId Restricts to incidents that belong to an activity with the given id.
     * @param {String} opts.failedActivityId Restricts to incidents that were created due to the failure of an activity with the given id.
     * @param {String} opts.causeIncidentId Restricts to incidents that have the given incident id as cause incident.
     * @param {String} opts.rootCauseIncidentId Restricts to incidents that have the given incident id as root cause incident.
     * @param {String} opts.configuration Restricts to incidents that have the given parameter set as configuration.
     * @param {String} opts.tenantIdIn Restricts to incidents that have one of the given comma-separated tenant ids.
     * @param {String} opts.jobDefinitionIdIn Restricts to incidents that have one of the given comma-separated job definition ids.
     * @param {module:api/IncidentApi~getIncidentsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIncidentsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'incidentId': opts['incidentId'],'incidentType': opts['incidentType'],'incidentMessage': opts['incidentMessage'],'incidentMessageLike': opts['incidentMessageLike'],'processDefinitionId': opts['processDefinitionId'],'processDefinitionKeyIn': opts['processDefinitionKeyIn'],'processInstanceId': opts['processInstanceId'],'executionId': opts['executionId'],'incidentTimestampBefore': opts['incidentTimestampBefore'],'incidentTimestampAfter': opts['incidentTimestampAfter'],'activityId': opts['activityId'],'failedActivityId': opts['failedActivityId'],'causeIncidentId': opts['causeIncidentId'],'rootCauseIncidentId': opts['rootCauseIncidentId'],'configuration': opts['configuration'],'tenantIdIn': opts['tenantIdIn'],'jobDefinitionIdIn': opts['jobDefinitionIdIn']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResultDto;

      return this.apiClient.callApi(
        '/incident/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the resolveIncident operation.
     * @callback moduleapi/IncidentApi~resolveIncidentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve Incident
     * Resolves an incident with given id.
     * @param {String} id The id of the incident to be resolved.
     * @param {module:api/IncidentApi~resolveIncidentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resolveIncident(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resolveIncident");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/incident/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setIncidentAnnotation operation.
     * @callback moduleapi/IncidentApi~setIncidentAnnotationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Incident Annotation
     * Sets the annotation of an incident with given id.
     * @param {String} id The id of the incident to clear the annotation at.
     * @param {Object} opts Optional parameters
     * @param {module:model/AnnotationDto} opts.body 
     * @param {module:api/IncidentApi~setIncidentAnnotationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setIncidentAnnotation(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setIncidentAnnotation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/incident/{id}/annotation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}