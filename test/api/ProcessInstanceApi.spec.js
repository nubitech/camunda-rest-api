/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.ProcessInstanceApi();
  });

  describe('(package)', function() {
    describe('ProcessInstanceApi', function() {
      describe('correlateMessageAsyncOperation', function() {
        it('should call correlateMessageAsyncOperation successfully', function(done) {
          // TODO: uncomment, update parameter values for correlateMessageAsyncOperation call and complete the assertions
          /*
          var opts = {};

          instance.correlateMessageAsyncOperation(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAsyncHistoricQueryBased', function() {
        it('should call deleteAsyncHistoricQueryBased successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAsyncHistoricQueryBased call and complete the assertions
          /*
          var opts = {};

          instance.deleteAsyncHistoricQueryBased(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProcessInstance', function() {
        it('should call deleteProcessInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProcessInstance call
          /*
          var opts = {};

          instance.deleteProcessInstance(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProcessInstanceVariable', function() {
        it('should call deleteProcessInstanceVariable successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProcessInstanceVariable call
          /*

          instance.deleteProcessInstanceVariable(id, varName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProcessInstancesAsyncOperation', function() {
        it('should call deleteProcessInstancesAsyncOperation successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProcessInstancesAsyncOperation call and complete the assertions
          /*
          var opts = {};

          instance.deleteProcessInstancesAsyncOperation(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getActivityInstanceTree', function() {
        it('should call getActivityInstanceTree successfully', function(done) {
          // TODO: uncomment, update parameter values for getActivityInstanceTree call and complete the assertions
          /*

          instance.getActivityInstanceTree(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ActivityInstanceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessInstance', function() {
        it('should call getProcessInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessInstance call and complete the assertions
          /*

          instance.getProcessInstance(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ProcessInstanceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessInstanceComments', function() {
        it('should call getProcessInstanceComments successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessInstanceComments call and complete the assertions
          /*

          instance.getProcessInstanceComments(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.CommentDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessInstanceVariable', function() {
        it('should call getProcessInstanceVariable successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessInstanceVariable call and complete the assertions
          /*
          var opts = {};

          instance.getProcessInstanceVariable(id, varName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.VariableValueDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessInstanceVariableBinary', function() {
        it('should call getProcessInstanceVariableBinary successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessInstanceVariableBinary call and complete the assertions
          /*

          instance.getProcessInstanceVariableBinary(id, varName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessInstanceVariables', function() {
        it('should call getProcessInstanceVariables successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessInstanceVariables call and complete the assertions
          /*
          var opts = {};

          instance.getProcessInstanceVariables(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.VariableValueDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessInstances', function() {
        it('should call getProcessInstances successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessInstances call and complete the assertions
          /*
          var opts = {};

          instance.getProcessInstances(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.ProcessInstanceDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessInstancesCount', function() {
        it('should call getProcessInstancesCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessInstancesCount call and complete the assertions
          /*
          var opts = {};

          instance.getProcessInstancesCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyProcessInstance', function() {
        it('should call modifyProcessInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyProcessInstance call
          /*
          var opts = {};

          instance.modifyProcessInstance(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyProcessInstanceAsyncOperation', function() {
        it('should call modifyProcessInstanceAsyncOperation successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyProcessInstanceAsyncOperation call and complete the assertions
          /*
          var opts = {};

          instance.modifyProcessInstanceAsyncOperation(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyProcessInstanceVariables', function() {
        it('should call modifyProcessInstanceVariables successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyProcessInstanceVariables call
          /*
          var opts = {};

          instance.modifyProcessInstanceVariables(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryProcessInstances', function() {
        it('should call queryProcessInstances successfully', function(done) {
          // TODO: uncomment, update parameter values for queryProcessInstances call and complete the assertions
          /*
          var opts = {};

          instance.queryProcessInstances(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.ProcessInstanceDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryProcessInstancesCount', function() {
        it('should call queryProcessInstancesCount successfully', function(done) {
          // TODO: uncomment, update parameter values for queryProcessInstancesCount call and complete the assertions
          /*
          var opts = {};

          instance.queryProcessInstancesCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setProcessInstanceVariable', function() {
        it('should call setProcessInstanceVariable successfully', function(done) {
          // TODO: uncomment, update parameter values for setProcessInstanceVariable call
          /*
          var opts = {};

          instance.setProcessInstanceVariable(id, varName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setProcessInstanceVariableBinary', function() {
        it('should call setProcessInstanceVariableBinary successfully', function(done) {
          // TODO: uncomment, update parameter values for setProcessInstanceVariableBinary call
          /*
          var opts = {};

          instance.setProcessInstanceVariableBinary(id, varName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setRetriesByProcess', function() {
        it('should call setRetriesByProcess successfully', function(done) {
          // TODO: uncomment, update parameter values for setRetriesByProcess call and complete the assertions
          /*
          var opts = {};

          instance.setRetriesByProcess(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setRetriesByProcessHistoricQueryBased', function() {
        it('should call setRetriesByProcessHistoricQueryBased successfully', function(done) {
          // TODO: uncomment, update parameter values for setRetriesByProcessHistoricQueryBased call and complete the assertions
          /*
          var opts = {};

          instance.setRetriesByProcessHistoricQueryBased(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setVariablesAsyncOperation', function() {
        it('should call setVariablesAsyncOperation successfully', function(done) {
          // TODO: uncomment, update parameter values for setVariablesAsyncOperation call and complete the assertions
          /*
          var opts = {};

          instance.setVariablesAsyncOperation(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSuspensionState', function() {
        it('should call updateSuspensionState successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSuspensionState call
          /*
          var opts = {};

          instance.updateSuspensionState(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSuspensionStateAsyncOperation', function() {
        it('should call updateSuspensionStateAsyncOperation successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSuspensionStateAsyncOperation call and complete the assertions
          /*
          var opts = {};

          instance.updateSuspensionStateAsyncOperation(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSuspensionStateById', function() {
        it('should call updateSuspensionStateById successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSuspensionStateById call
          /*
          var opts = {};

          instance.updateSuspensionStateById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
