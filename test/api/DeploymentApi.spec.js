/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.DeploymentApi();
  });

  describe('(package)', function() {
    describe('DeploymentApi', function() {
      describe('createDeployment', function() {
        it('should call createDeployment successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeployment call and complete the assertions
          /*
          var opts = {};

          instance.createDeployment(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DeploymentWithDefinitionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeployment', function() {
        it('should call deleteDeployment successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeployment call
          /*
          var opts = {};

          instance.deleteDeployment(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeployment', function() {
        it('should call getDeployment successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeployment call and complete the assertions
          /*

          instance.getDeployment(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DeploymentDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeploymentResource', function() {
        it('should call getDeploymentResource successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeploymentResource call and complete the assertions
          /*

          instance.getDeploymentResource(id, resourceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DeploymentResourceDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeploymentResourceData', function() {
        it('should call getDeploymentResourceData successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeploymentResourceData call and complete the assertions
          /*

          instance.getDeploymentResourceData(id, resourceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeploymentResources', function() {
        it('should call getDeploymentResources successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeploymentResources call and complete the assertions
          /*

          instance.getDeploymentResources(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.DeploymentResourceDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeployments', function() {
        it('should call getDeployments successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeployments call and complete the assertions
          /*
          var opts = {};

          instance.getDeployments(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.DeploymentDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeploymentsCount', function() {
        it('should call getDeploymentsCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeploymentsCount call and complete the assertions
          /*
          var opts = {};

          instance.getDeploymentsCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRegisteredDeployments', function() {
        it('should call getRegisteredDeployments successfully', function(done) {
          // TODO: uncomment getRegisteredDeployments call and complete the assertions
          /*

          instance.getRegisteredDeployments(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;string&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('redeploy', function() {
        it('should call redeploy successfully', function(done) {
          // TODO: uncomment, update parameter values for redeploy call and complete the assertions
          /*
          var opts = {};

          instance.redeploy(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DeploymentWithDefinitionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
