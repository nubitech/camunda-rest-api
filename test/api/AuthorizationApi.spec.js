/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.AuthorizationApi();
  });

  describe('(package)', function() {
    describe('AuthorizationApi', function() {
      describe('availableOperationsAuthorization', function() {
        it('should call availableOperationsAuthorization successfully', function(done) {
          // TODO: uncomment availableOperationsAuthorization call and complete the assertions
          /*

          instance.availableOperationsAuthorization(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('availableOperationsAuthorizationInstance', function() {
        it('should call availableOperationsAuthorizationInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for availableOperationsAuthorizationInstance call and complete the assertions
          /*

          instance.availableOperationsAuthorizationInstance(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAuthorization', function() {
        it('should call createAuthorization successfully', function(done) {
          // TODO: uncomment, update parameter values for createAuthorization call and complete the assertions
          /*
          var opts = {};

          instance.createAuthorization(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.AuthorizationDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAuthorization', function() {
        it('should call deleteAuthorization successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAuthorization call
          /*

          instance.deleteAuthorization(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAuthorization', function() {
        it('should call getAuthorization successfully', function(done) {
          // TODO: uncomment, update parameter values for getAuthorization call and complete the assertions
          /*

          instance.getAuthorization(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.AuthorizationDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAuthorizationCount', function() {
        it('should call getAuthorizationCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getAuthorizationCount call and complete the assertions
          /*
          var opts = {};

          instance.getAuthorizationCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('isUserAuthorized', function() {
        it('should call isUserAuthorized successfully', function(done) {
          // TODO: uncomment, update parameter values for isUserAuthorized call and complete the assertions
          /*
          var opts = {};

          instance.isUserAuthorized(permissionName, resourceName, resourceType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.AuthorizationCheckResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryAuthorizations', function() {
        it('should call queryAuthorizations successfully', function(done) {
          // TODO: uncomment, update parameter values for queryAuthorizations call and complete the assertions
          /*
          var opts = {};

          instance.queryAuthorizations(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.AuthorizationDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAuthorization', function() {
        it('should call updateAuthorization successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAuthorization call
          /*
          var opts = {};

          instance.updateAuthorization(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
