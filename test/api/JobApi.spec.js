/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.JobApi();
  });

  describe('(package)', function() {
    describe('JobApi', function() {
      describe('deleteJob', function() {
        it('should call deleteJob successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteJob call
          /*

          instance.deleteJob(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeJob', function() {
        it('should call executeJob successfully', function(done) {
          // TODO: uncomment, update parameter values for executeJob call
          /*

          instance.executeJob(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJob', function() {
        it('should call getJob successfully', function(done) {
          // TODO: uncomment, update parameter values for getJob call and complete the assertions
          /*

          instance.getJob(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.JobDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJobs', function() {
        it('should call getJobs successfully', function(done) {
          // TODO: uncomment, update parameter values for getJobs call and complete the assertions
          /*
          var opts = {};

          instance.getJobs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.JobDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getJobsCount', function() {
        it('should call getJobsCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getJobsCount call and complete the assertions
          /*
          var opts = {};

          instance.getJobsCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStacktrace', function() {
        it('should call getStacktrace successfully', function(done) {
          // TODO: uncomment, update parameter values for getStacktrace call and complete the assertions
          /*

          instance.getStacktrace(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryJobs', function() {
        it('should call queryJobs successfully', function(done) {
          // TODO: uncomment, update parameter values for queryJobs call and complete the assertions
          /*
          var opts = {};

          instance.queryJobs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.JobDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryJobsCount', function() {
        it('should call queryJobsCount successfully', function(done) {
          // TODO: uncomment, update parameter values for queryJobsCount call and complete the assertions
          /*
          var opts = {};

          instance.queryJobsCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('recalculateDuedate', function() {
        it('should call recalculateDuedate successfully', function(done) {
          // TODO: uncomment, update parameter values for recalculateDuedate call
          /*
          var opts = {};

          instance.recalculateDuedate(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setJobDuedate', function() {
        it('should call setJobDuedate successfully', function(done) {
          // TODO: uncomment, update parameter values for setJobDuedate call
          /*
          var opts = {};

          instance.setJobDuedate(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setJobPriority', function() {
        it('should call setJobPriority successfully', function(done) {
          // TODO: uncomment, update parameter values for setJobPriority call
          /*
          var opts = {};

          instance.setJobPriority(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setJobRetries', function() {
        it('should call setJobRetries successfully', function(done) {
          // TODO: uncomment, update parameter values for setJobRetries call
          /*
          var opts = {};

          instance.setJobRetries(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setJobRetriesAsyncOperation', function() {
        it('should call setJobRetriesAsyncOperation successfully', function(done) {
          // TODO: uncomment, update parameter values for setJobRetriesAsyncOperation call and complete the assertions
          /*
          var opts = {};

          instance.setJobRetriesAsyncOperation(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateJobSuspensionState', function() {
        it('should call updateJobSuspensionState successfully', function(done) {
          // TODO: uncomment, update parameter values for updateJobSuspensionState call
          /*
          var opts = {};

          instance.updateJobSuspensionState(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSuspensionStateBy', function() {
        it('should call updateSuspensionStateBy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSuspensionStateBy call
          /*
          var opts = {};

          instance.updateSuspensionStateBy(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
