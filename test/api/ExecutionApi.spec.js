/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.ExecutionApi();
  });

  describe('(package)', function() {
    describe('ExecutionApi', function() {
      describe('createIncident', function() {
        it('should call createIncident successfully', function(done) {
          // TODO: uncomment, update parameter values for createIncident call and complete the assertions
          /*
          var opts = {};

          instance.createIncident(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.IncidentDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteLocalExecutionVariable', function() {
        it('should call deleteLocalExecutionVariable successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteLocalExecutionVariable call
          /*

          instance.deleteLocalExecutionVariable(id, varName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExecution', function() {
        it('should call getExecution successfully', function(done) {
          // TODO: uncomment, update parameter values for getExecution call and complete the assertions
          /*

          instance.getExecution(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ExecutionDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExecutions', function() {
        it('should call getExecutions successfully', function(done) {
          // TODO: uncomment, update parameter values for getExecutions call and complete the assertions
          /*
          var opts = {};

          instance.getExecutions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.ExecutionDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExecutionsCount', function() {
        it('should call getExecutionsCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getExecutionsCount call and complete the assertions
          /*
          var opts = {};

          instance.getExecutionsCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLocalExecutionVariable', function() {
        it('should call getLocalExecutionVariable successfully', function(done) {
          // TODO: uncomment, update parameter values for getLocalExecutionVariable call and complete the assertions
          /*
          var opts = {};

          instance.getLocalExecutionVariable(id, varName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.VariableValueDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLocalExecutionVariableBinary', function() {
        it('should call getLocalExecutionVariableBinary successfully', function(done) {
          // TODO: uncomment, update parameter values for getLocalExecutionVariableBinary call and complete the assertions
          /*

          instance.getLocalExecutionVariableBinary(id, varName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLocalExecutionVariables', function() {
        it('should call getLocalExecutionVariables successfully', function(done) {
          // TODO: uncomment, update parameter values for getLocalExecutionVariables call and complete the assertions
          /*
          var opts = {};

          instance.getLocalExecutionVariables(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.VariableValueDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessageEventSubscription', function() {
        it('should call getMessageEventSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessageEventSubscription call and complete the assertions
          /*

          instance.getMessageEventSubscription(id, messageName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.EventSubscriptionDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyLocalExecutionVariables', function() {
        it('should call modifyLocalExecutionVariables successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyLocalExecutionVariables call
          /*
          var opts = {};

          instance.modifyLocalExecutionVariables(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putLocalExecutionVariable', function() {
        it('should call putLocalExecutionVariable successfully', function(done) {
          // TODO: uncomment, update parameter values for putLocalExecutionVariable call
          /*
          var opts = {};

          instance.putLocalExecutionVariable(id, varName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryExecutions', function() {
        it('should call queryExecutions successfully', function(done) {
          // TODO: uncomment, update parameter values for queryExecutions call and complete the assertions
          /*
          var opts = {};

          instance.queryExecutions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.ExecutionDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryExecutionsCount', function() {
        it('should call queryExecutionsCount successfully', function(done) {
          // TODO: uncomment, update parameter values for queryExecutionsCount call and complete the assertions
          /*
          var opts = {};

          instance.queryExecutionsCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setLocalExecutionVariableBinary', function() {
        it('should call setLocalExecutionVariableBinary successfully', function(done) {
          // TODO: uncomment, update parameter values for setLocalExecutionVariableBinary call
          /*
          var opts = {};

          instance.setLocalExecutionVariableBinary(id, varName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('signalExecution', function() {
        it('should call signalExecution successfully', function(done) {
          // TODO: uncomment, update parameter values for signalExecution call
          /*
          var opts = {};

          instance.signalExecution(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('triggerEvent', function() {
        it('should call triggerEvent successfully', function(done) {
          // TODO: uncomment, update parameter values for triggerEvent call
          /*
          var opts = {};

          instance.triggerEvent(id, messageName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
