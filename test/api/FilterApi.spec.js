/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.FilterApi();
  });

  describe('(package)', function() {
    describe('FilterApi', function() {
      describe('createFilter', function() {
        it('should call createFilter successfully', function(done) {
          // TODO: uncomment, update parameter values for createFilter call and complete the assertions
          /*
          var opts = {};

          instance.createFilter(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.FilterDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFilter', function() {
        it('should call deleteFilter successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFilter call
          /*

          instance.deleteFilter(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeFilterCount', function() {
        it('should call executeFilterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for executeFilterCount call and complete the assertions
          /*

          instance.executeFilterCount(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeFilterList', function() {
        it('should call executeFilterList successfully', function(done) {
          // TODO: uncomment, update parameter values for executeFilterList call and complete the assertions
          /*
          var opts = {};

          instance.executeFilterList(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeFilterSingleResult', function() {
        it('should call executeFilterSingleResult successfully', function(done) {
          // TODO: uncomment, update parameter values for executeFilterSingleResult call and complete the assertions
          /*

          instance.executeFilterSingleResult(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filterResourceOptions', function() {
        it('should call filterResourceOptions successfully', function(done) {
          // TODO: uncomment filterResourceOptions call and complete the assertions
          /*

          instance.filterResourceOptions(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filterResourceOptionsSingle', function() {
        it('should call filterResourceOptionsSingle successfully', function(done) {
          // TODO: uncomment, update parameter values for filterResourceOptionsSingle call and complete the assertions
          /*

          instance.filterResourceOptionsSingle(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFilterCount', function() {
        it('should call getFilterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getFilterCount call and complete the assertions
          /*
          var opts = {};

          instance.getFilterCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFilterList', function() {
        it('should call getFilterList successfully', function(done) {
          // TODO: uncomment, update parameter values for getFilterList call and complete the assertions
          /*
          var opts = {};

          instance.getFilterList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.FilterDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSingleFilter', function() {
        it('should call getSingleFilter successfully', function(done) {
          // TODO: uncomment, update parameter values for getSingleFilter call and complete the assertions
          /*
          var opts = {};

          instance.getSingleFilter(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.FilterDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postExecuteFilterCount', function() {
        it('should call postExecuteFilterCount successfully', function(done) {
          // TODO: uncomment, update parameter values for postExecuteFilterCount call and complete the assertions
          /*
          var opts = {};

          instance.postExecuteFilterCount(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postExecuteFilterList', function() {
        it('should call postExecuteFilterList successfully', function(done) {
          // TODO: uncomment, update parameter values for postExecuteFilterList call and complete the assertions
          /*
          var opts = {};

          instance.postExecuteFilterList(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postExecuteFilterSingleResult', function() {
        it('should call postExecuteFilterSingleResult successfully', function(done) {
          // TODO: uncomment, update parameter values for postExecuteFilterSingleResult call and complete the assertions
          /*
          var opts = {};

          instance.postExecuteFilterSingleResult(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateFilter', function() {
        it('should call updateFilter successfully', function(done) {
          // TODO: uncomment, update parameter values for updateFilter call
          /*
          var opts = {};

          instance.updateFilter(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
