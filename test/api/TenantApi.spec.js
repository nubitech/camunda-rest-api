/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.TenantApi();
  });

  describe('(package)', function() {
    describe('TenantApi', function() {
      describe('availableTenantGroupMembersOperations', function() {
        it('should call availableTenantGroupMembersOperations successfully', function(done) {
          // TODO: uncomment, update parameter values for availableTenantGroupMembersOperations call and complete the assertions
          /*

          instance.availableTenantGroupMembersOperations(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('availableTenantInstanceOperations', function() {
        it('should call availableTenantInstanceOperations successfully', function(done) {
          // TODO: uncomment, update parameter values for availableTenantInstanceOperations call and complete the assertions
          /*

          instance.availableTenantInstanceOperations(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('availableTenantResourceOperations', function() {
        it('should call availableTenantResourceOperations successfully', function(done) {
          // TODO: uncomment availableTenantResourceOperations call and complete the assertions
          /*

          instance.availableTenantResourceOperations(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('availableTenantUserMembersOperations', function() {
        it('should call availableTenantUserMembersOperations successfully', function(done) {
          // TODO: uncomment, update parameter values for availableTenantUserMembersOperations call and complete the assertions
          /*

          instance.availableTenantUserMembersOperations(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ResourceOptionsDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createGroupMembership', function() {
        it('should call createGroupMembership successfully', function(done) {
          // TODO: uncomment, update parameter values for createGroupMembership call
          /*

          instance.createGroupMembership(id, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTenant', function() {
        it('should call createTenant successfully', function(done) {
          // TODO: uncomment, update parameter values for createTenant call
          /*
          var opts = {};

          instance.createTenant(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUserMembership', function() {
        it('should call createUserMembership successfully', function(done) {
          // TODO: uncomment, update parameter values for createUserMembership call
          /*

          instance.createUserMembership(id, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteGroupMembership', function() {
        it('should call deleteGroupMembership successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteGroupMembership call
          /*

          instance.deleteGroupMembership(id, groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTenant', function() {
        it('should call deleteTenant successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTenant call
          /*

          instance.deleteTenant(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUserMembership', function() {
        it('should call deleteUserMembership successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUserMembership call
          /*

          instance.deleteUserMembership(id, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTenant', function() {
        it('should call getTenant successfully', function(done) {
          // TODO: uncomment, update parameter values for getTenant call and complete the assertions
          /*

          instance.getTenant(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.TenantDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTenantCount', function() {
        it('should call getTenantCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getTenantCount call and complete the assertions
          /*
          var opts = {};

          instance.getTenantCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryTenants', function() {
        it('should call queryTenants successfully', function(done) {
          // TODO: uncomment, update parameter values for queryTenants call and complete the assertions
          /*
          var opts = {};

          instance.queryTenants(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.TenantDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTenant', function() {
        it('should call updateTenant successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTenant call
          /*
          var opts = {};

          instance.updateTenant(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
