/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.ExternalTaskApi();
  });

  describe('(package)', function() {
    describe('ExternalTaskApi', function() {
      describe('completeExternalTaskResource', function() {
        it('should call completeExternalTaskResource successfully', function(done) {
          // TODO: uncomment, update parameter values for completeExternalTaskResource call
          /*
          var opts = {};

          instance.completeExternalTaskResource(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('extendLock', function() {
        it('should call extendLock successfully', function(done) {
          // TODO: uncomment, update parameter values for extendLock call
          /*
          var opts = {};

          instance.extendLock(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fetchAndLock', function() {
        it('should call fetchAndLock successfully', function(done) {
          // TODO: uncomment, update parameter values for fetchAndLock call and complete the assertions
          /*
          var opts = {};

          instance.fetchAndLock(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.LockedExternalTaskDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExternalTask', function() {
        it('should call getExternalTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getExternalTask call and complete the assertions
          /*

          instance.getExternalTask(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.ExternalTaskDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExternalTaskErrorDetails', function() {
        it('should call getExternalTaskErrorDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getExternalTaskErrorDetails call and complete the assertions
          /*

          instance.getExternalTaskErrorDetails(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExternalTasks', function() {
        it('should call getExternalTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for getExternalTasks call and complete the assertions
          /*
          var opts = {};

          instance.getExternalTasks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.ExternalTaskDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExternalTasksCount', function() {
        it('should call getExternalTasksCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getExternalTasksCount call and complete the assertions
          /*
          var opts = {};

          instance.getExternalTasksCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTopicNames', function() {
        it('should call getTopicNames successfully', function(done) {
          // TODO: uncomment, update parameter values for getTopicNames call and complete the assertions
          /*
          var opts = {};

          instance.getTopicNames(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;string&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('handleExternalTaskBpmnError', function() {
        it('should call handleExternalTaskBpmnError successfully', function(done) {
          // TODO: uncomment, update parameter values for handleExternalTaskBpmnError call
          /*
          var opts = {};

          instance.handleExternalTaskBpmnError(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('handleFailure', function() {
        it('should call handleFailure successfully', function(done) {
          // TODO: uncomment, update parameter values for handleFailure call
          /*
          var opts = {};

          instance.handleFailure(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('lock', function() {
        it('should call lock successfully', function(done) {
          // TODO: uncomment, update parameter values for lock call
          /*
          var opts = {};

          instance.lock(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryExternalTasks', function() {
        it('should call queryExternalTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for queryExternalTasks call and complete the assertions
          /*
          var opts = {};

          instance.queryExternalTasks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.ExternalTaskDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryExternalTasksCount', function() {
        it('should call queryExternalTasksCount successfully', function(done) {
          // TODO: uncomment, update parameter values for queryExternalTasksCount call and complete the assertions
          /*
          var opts = {};

          instance.queryExternalTasksCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setExternalTaskResourcePriority', function() {
        it('should call setExternalTaskResourcePriority successfully', function(done) {
          // TODO: uncomment, update parameter values for setExternalTaskResourcePriority call
          /*
          var opts = {};

          instance.setExternalTaskResourcePriority(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setExternalTaskResourceRetries', function() {
        it('should call setExternalTaskResourceRetries successfully', function(done) {
          // TODO: uncomment, update parameter values for setExternalTaskResourceRetries call
          /*
          var opts = {};

          instance.setExternalTaskResourceRetries(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setExternalTaskRetries', function() {
        it('should call setExternalTaskRetries successfully', function(done) {
          // TODO: uncomment, update parameter values for setExternalTaskRetries call
          /*
          var opts = {};

          instance.setExternalTaskRetries(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setExternalTaskRetriesAsyncOperation', function() {
        it('should call setExternalTaskRetriesAsyncOperation successfully', function(done) {
          // TODO: uncomment, update parameter values for setExternalTaskRetriesAsyncOperation call and complete the assertions
          /*
          var opts = {};

          instance.setExternalTaskRetriesAsyncOperation(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.BatchDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unlock', function() {
        it('should call unlock successfully', function(done) {
          // TODO: uncomment, update parameter values for unlock call
          /*

          instance.unlock(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
