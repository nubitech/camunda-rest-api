/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.TaskApi();
  });

  describe('(package)', function() {
    describe('TaskApi', function() {
      describe('claim', function() {
        it('should call claim successfully', function(done) {
          // TODO: uncomment, update parameter values for claim call
          /*
          var opts = {};

          instance.claim(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('complete', function() {
        it('should call complete successfully', function(done) {
          // TODO: uncomment, update parameter values for complete call and complete the assertions
          /*
          var opts = {};

          instance.complete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.VariableValueDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTask', function() {
        it('should call createTask successfully', function(done) {
          // TODO: uncomment, update parameter values for createTask call
          /*
          var opts = {};

          instance.createTask(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('delegateTask', function() {
        it('should call delegateTask successfully', function(done) {
          // TODO: uncomment, update parameter values for delegateTask call
          /*
          var opts = {};

          instance.delegateTask(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTask', function() {
        it('should call deleteTask successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTask call
          /*

          instance.deleteTask(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeployedForm', function() {
        it('should call getDeployedForm successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeployedForm call and complete the assertions
          /*

          instance.getDeployedForm(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getForm', function() {
        it('should call getForm successfully', function(done) {
          // TODO: uncomment, update parameter values for getForm call and complete the assertions
          /*

          instance.getForm(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.FormDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFormVariables', function() {
        it('should call getFormVariables successfully', function(done) {
          // TODO: uncomment, update parameter values for getFormVariables call and complete the assertions
          /*
          var opts = {};

          instance.getFormVariables(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.VariableValueDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRenderedForm', function() {
        it('should call getRenderedForm successfully', function(done) {
          // TODO: uncomment, update parameter values for getRenderedForm call and complete the assertions
          /*

          instance.getRenderedForm(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTask', function() {
        it('should call getTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getTask call and complete the assertions
          /*

          instance.getTask(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.TaskDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTaskCountByCandidateGroup', function() {
        it('should call getTaskCountByCandidateGroup successfully', function(done) {
          // TODO: uncomment getTaskCountByCandidateGroup call and complete the assertions
          /*

          instance.getTaskCountByCandidateGroup(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.TaskCountByCandidateGroupResultDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTasks', function() {
        it('should call getTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for getTasks call and complete the assertions
          /*
          var opts = {};

          instance.getTasks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.TaskDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTasksCount', function() {
        it('should call getTasksCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getTasksCount call and complete the assertions
          /*
          var opts = {};

          instance.getTasksCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('handleBpmnError', function() {
        it('should call handleBpmnError successfully', function(done) {
          // TODO: uncomment, update parameter values for handleBpmnError call
          /*
          var opts = {};

          instance.handleBpmnError(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('handleEscalation', function() {
        it('should call handleEscalation successfully', function(done) {
          // TODO: uncomment, update parameter values for handleEscalation call
          /*
          var opts = {};

          instance.handleEscalation(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryTasks', function() {
        it('should call queryTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for queryTasks call and complete the assertions
          /*
          var opts = {};

          instance.queryTasks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.TaskDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queryTasksCount', function() {
        it('should call queryTasksCount successfully', function(done) {
          // TODO: uncomment, update parameter values for queryTasksCount call and complete the assertions
          /*
          var opts = {};

          instance.queryTasksCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('resolve', function() {
        it('should call resolve successfully', function(done) {
          // TODO: uncomment, update parameter values for resolve call
          /*
          var opts = {};

          instance.resolve(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setAssignee', function() {
        it('should call setAssignee successfully', function(done) {
          // TODO: uncomment, update parameter values for setAssignee call
          /*
          var opts = {};

          instance.setAssignee(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('submit', function() {
        it('should call submit successfully', function(done) {
          // TODO: uncomment, update parameter values for submit call and complete the assertions
          /*
          var opts = {};

          instance.submit(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.VariableValueDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unclaim', function() {
        it('should call unclaim successfully', function(done) {
          // TODO: uncomment, update parameter values for unclaim call
          /*

          instance.unclaim(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTask', function() {
        it('should call updateTask successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTask call
          /*
          var opts = {};

          instance.updateTask(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
