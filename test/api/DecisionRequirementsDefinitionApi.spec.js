/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CamundaRestApi.DecisionRequirementsDefinitionApi();
  });

  describe('(package)', function() {
    describe('DecisionRequirementsDefinitionApi', function() {
      describe('getDecisionRequirementsDefinitionById', function() {
        it('should call getDecisionRequirementsDefinitionById successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionById call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DecisionRequirementsDefinitionDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionByKey', function() {
        it('should call getDecisionRequirementsDefinitionByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionByKey call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionByKey(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DecisionRequirementsDefinitionDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionByKeyAndTenantId', function() {
        it('should call getDecisionRequirementsDefinitionByKeyAndTenantId successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionByKeyAndTenantId call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionByKeyAndTenantId(key, tenantId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DecisionRequirementsDefinitionDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionDiagramById', function() {
        it('should call getDecisionRequirementsDefinitionDiagramById successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionDiagramById call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionDiagramById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionDiagramByKey', function() {
        it('should call getDecisionRequirementsDefinitionDiagramByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionDiagramByKey call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionDiagramByKey(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionDiagramByKeyAndTenantId', function() {
        it('should call getDecisionRequirementsDefinitionDiagramByKeyAndTenantId successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionDiagramByKeyAndTenantId call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionDiagramByKeyAndTenantId(key, tenantId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionDmnXmlById', function() {
        it('should call getDecisionRequirementsDefinitionDmnXmlById successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionDmnXmlById call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionDmnXmlById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DecisionRequirementsDefinitionXmlDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionDmnXmlByKey', function() {
        it('should call getDecisionRequirementsDefinitionDmnXmlByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionDmnXmlByKey call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionDmnXmlByKey(key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DecisionRequirementsDefinitionXmlDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId', function() {
        it('should call getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId call and complete the assertions
          /*

          instance.getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(key, tenantId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.DecisionRequirementsDefinitionXmlDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitions', function() {
        it('should call getDecisionRequirementsDefinitions successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitions call and complete the assertions
          /*
          var opts = {};

          instance.getDecisionRequirementsDefinitions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CamundaRestApi.DecisionRequirementsDefinitionDto);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDecisionRequirementsDefinitionsCount', function() {
        it('should call getDecisionRequirementsDefinitionsCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getDecisionRequirementsDefinitionsCount call and complete the assertions
          /*
          var opts = {};

          instance.getDecisionRequirementsDefinitionsCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CamundaRestApi.CountResultDto);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
