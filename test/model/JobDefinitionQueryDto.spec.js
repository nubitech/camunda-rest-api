/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('JobDefinitionQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.JobDefinitionQueryDto();
      });

      it('should create an instance of JobDefinitionQueryDto', function() {
        // TODO: update the code to test JobDefinitionQueryDto
        expect(instance).to.be.a(CamundaRestApi.JobDefinitionQueryDto);
      });

      it('should have the property jobDefinitionId (base name: "jobDefinitionId")', function() {
        // TODO: update the code to test the property jobDefinitionId
        expect(instance).to.have.property('jobDefinitionId');
        // expect(instance.jobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property activityIdIn (base name: "activityIdIn")', function() {
        // TODO: update the code to test the property activityIdIn
        expect(instance).to.have.property('activityIdIn');
        // expect(instance.activityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property jobType (base name: "jobType")', function() {
        // TODO: update the code to test the property jobType
        expect(instance).to.have.property('jobType');
        // expect(instance.jobType).to.be(expectedValueLiteral);
      });

      it('should have the property jobConfiguration (base name: "jobConfiguration")', function() {
        // TODO: update the code to test the property jobConfiguration
        expect(instance).to.have.property('jobConfiguration');
        // expect(instance.jobConfiguration).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property suspended (base name: "suspended")', function() {
        // TODO: update the code to test the property suspended
        expect(instance).to.have.property('suspended');
        // expect(instance.suspended).to.be(expectedValueLiteral);
      });

      it('should have the property withOverridingJobPriority (base name: "withOverridingJobPriority")', function() {
        // TODO: update the code to test the property withOverridingJobPriority
        expect(instance).to.have.property('withOverridingJobPriority');
        // expect(instance.withOverridingJobPriority).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property includeJobDefinitionsWithoutTenantId (base name: "includeJobDefinitionsWithoutTenantId")', function() {
        // TODO: update the code to test the property includeJobDefinitionsWithoutTenantId
        expect(instance).to.have.property('includeJobDefinitionsWithoutTenantId');
        // expect(instance.includeJobDefinitionsWithoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
