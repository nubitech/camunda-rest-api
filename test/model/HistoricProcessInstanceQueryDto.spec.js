/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricProcessInstanceQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricProcessInstanceQueryDto();
      });

      it('should create an instance of HistoricProcessInstanceQueryDto', function() {
        // TODO: update the code to test HistoricProcessInstanceQueryDto
        expect(instance).to.be.a(CamundaRestApi.HistoricProcessInstanceQueryDto);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceIds (base name: "processInstanceIds")', function() {
        // TODO: update the code to test the property processInstanceIds
        expect(instance).to.have.property('processInstanceIds');
        // expect(instance.processInstanceIds).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKeyIn (base name: "processDefinitionKeyIn")', function() {
        // TODO: update the code to test the property processDefinitionKeyIn
        expect(instance).to.have.property('processDefinitionKeyIn');
        // expect(instance.processDefinitionKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionName (base name: "processDefinitionName")', function() {
        // TODO: update the code to test the property processDefinitionName
        expect(instance).to.have.property('processDefinitionName');
        // expect(instance.processDefinitionName).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionNameLike (base name: "processDefinitionNameLike")', function() {
        // TODO: update the code to test the property processDefinitionNameLike
        expect(instance).to.have.property('processDefinitionNameLike');
        // expect(instance.processDefinitionNameLike).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKeyNotIn (base name: "processDefinitionKeyNotIn")', function() {
        // TODO: update the code to test the property processDefinitionKeyNotIn
        expect(instance).to.have.property('processDefinitionKeyNotIn');
        // expect(instance.processDefinitionKeyNotIn).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKey (base name: "processInstanceBusinessKey")', function() {
        // TODO: update the code to test the property processInstanceBusinessKey
        expect(instance).to.have.property('processInstanceBusinessKey');
        // expect(instance.processInstanceBusinessKey).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyIn (base name: "processInstanceBusinessKeyIn")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyIn
        expect(instance).to.have.property('processInstanceBusinessKeyIn');
        // expect(instance.processInstanceBusinessKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyLike (base name: "processInstanceBusinessKeyLike")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyLike
        expect(instance).to.have.property('processInstanceBusinessKeyLike');
        // expect(instance.processInstanceBusinessKeyLike).to.be(expectedValueLiteral);
      });

      it('should have the property rootProcessInstances (base name: "rootProcessInstances")', function() {
        // TODO: update the code to test the property rootProcessInstances
        expect(instance).to.have.property('rootProcessInstances');
        // expect(instance.rootProcessInstances).to.be(expectedValueLiteral);
      });

      it('should have the property finished (base name: "finished")', function() {
        // TODO: update the code to test the property finished
        expect(instance).to.have.property('finished');
        // expect(instance.finished).to.be(expectedValueLiteral);
      });

      it('should have the property unfinished (base name: "unfinished")', function() {
        // TODO: update the code to test the property unfinished
        expect(instance).to.have.property('unfinished');
        // expect(instance.unfinished).to.be(expectedValueLiteral);
      });

      it('should have the property withIncidents (base name: "withIncidents")', function() {
        // TODO: update the code to test the property withIncidents
        expect(instance).to.have.property('withIncidents');
        // expect(instance.withIncidents).to.be(expectedValueLiteral);
      });

      it('should have the property withRootIncidents (base name: "withRootIncidents")', function() {
        // TODO: update the code to test the property withRootIncidents
        expect(instance).to.have.property('withRootIncidents');
        // expect(instance.withRootIncidents).to.be(expectedValueLiteral);
      });

      it('should have the property incidentType (base name: "incidentType")', function() {
        // TODO: update the code to test the property incidentType
        expect(instance).to.have.property('incidentType');
        // expect(instance.incidentType).to.be(expectedValueLiteral);
      });

      it('should have the property incidentStatus (base name: "incidentStatus")', function() {
        // TODO: update the code to test the property incidentStatus
        expect(instance).to.have.property('incidentStatus');
        // expect(instance.incidentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property incidentMessage (base name: "incidentMessage")', function() {
        // TODO: update the code to test the property incidentMessage
        expect(instance).to.have.property('incidentMessage');
        // expect(instance.incidentMessage).to.be(expectedValueLiteral);
      });

      it('should have the property incidentMessageLike (base name: "incidentMessageLike")', function() {
        // TODO: update the code to test the property incidentMessageLike
        expect(instance).to.have.property('incidentMessageLike');
        // expect(instance.incidentMessageLike).to.be(expectedValueLiteral);
      });

      it('should have the property startedBefore (base name: "startedBefore")', function() {
        // TODO: update the code to test the property startedBefore
        expect(instance).to.have.property('startedBefore');
        // expect(instance.startedBefore).to.be(expectedValueLiteral);
      });

      it('should have the property startedAfter (base name: "startedAfter")', function() {
        // TODO: update the code to test the property startedAfter
        expect(instance).to.have.property('startedAfter');
        // expect(instance.startedAfter).to.be(expectedValueLiteral);
      });

      it('should have the property finishedBefore (base name: "finishedBefore")', function() {
        // TODO: update the code to test the property finishedBefore
        expect(instance).to.have.property('finishedBefore');
        // expect(instance.finishedBefore).to.be(expectedValueLiteral);
      });

      it('should have the property finishedAfter (base name: "finishedAfter")', function() {
        // TODO: update the code to test the property finishedAfter
        expect(instance).to.have.property('finishedAfter');
        // expect(instance.finishedAfter).to.be(expectedValueLiteral);
      });

      it('should have the property executedActivityAfter (base name: "executedActivityAfter")', function() {
        // TODO: update the code to test the property executedActivityAfter
        expect(instance).to.have.property('executedActivityAfter');
        // expect(instance.executedActivityAfter).to.be(expectedValueLiteral);
      });

      it('should have the property executedActivityBefore (base name: "executedActivityBefore")', function() {
        // TODO: update the code to test the property executedActivityBefore
        expect(instance).to.have.property('executedActivityBefore');
        // expect(instance.executedActivityBefore).to.be(expectedValueLiteral);
      });

      it('should have the property executedJobAfter (base name: "executedJobAfter")', function() {
        // TODO: update the code to test the property executedJobAfter
        expect(instance).to.have.property('executedJobAfter');
        // expect(instance.executedJobAfter).to.be(expectedValueLiteral);
      });

      it('should have the property executedJobBefore (base name: "executedJobBefore")', function() {
        // TODO: update the code to test the property executedJobBefore
        expect(instance).to.have.property('executedJobBefore');
        // expect(instance.executedJobBefore).to.be(expectedValueLiteral);
      });

      it('should have the property startedBy (base name: "startedBy")', function() {
        // TODO: update the code to test the property startedBy
        expect(instance).to.have.property('startedBy');
        // expect(instance.startedBy).to.be(expectedValueLiteral);
      });

      it('should have the property superProcessInstanceId (base name: "superProcessInstanceId")', function() {
        // TODO: update the code to test the property superProcessInstanceId
        expect(instance).to.have.property('superProcessInstanceId');
        // expect(instance.superProcessInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property subProcessInstanceId (base name: "subProcessInstanceId")', function() {
        // TODO: update the code to test the property subProcessInstanceId
        expect(instance).to.have.property('subProcessInstanceId');
        // expect(instance.subProcessInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property superCaseInstanceId (base name: "superCaseInstanceId")', function() {
        // TODO: update the code to test the property superCaseInstanceId
        expect(instance).to.have.property('superCaseInstanceId');
        // expect(instance.superCaseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property subCaseInstanceId (base name: "subCaseInstanceId")', function() {
        // TODO: update the code to test the property subCaseInstanceId
        expect(instance).to.have.property('subCaseInstanceId');
        // expect(instance.subCaseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property executedActivityIdIn (base name: "executedActivityIdIn")', function() {
        // TODO: update the code to test the property executedActivityIdIn
        expect(instance).to.have.property('executedActivityIdIn');
        // expect(instance.executedActivityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property activeActivityIdIn (base name: "activeActivityIdIn")', function() {
        // TODO: update the code to test the property activeActivityIdIn
        expect(instance).to.have.property('activeActivityIdIn');
        // expect(instance.activeActivityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property suspended (base name: "suspended")', function() {
        // TODO: update the code to test the property suspended
        expect(instance).to.have.property('suspended');
        // expect(instance.suspended).to.be(expectedValueLiteral);
      });

      it('should have the property completed (base name: "completed")', function() {
        // TODO: update the code to test the property completed
        expect(instance).to.have.property('completed');
        // expect(instance.completed).to.be(expectedValueLiteral);
      });

      it('should have the property externallyTerminated (base name: "externallyTerminated")', function() {
        // TODO: update the code to test the property externallyTerminated
        expect(instance).to.have.property('externallyTerminated');
        // expect(instance.externallyTerminated).to.be(expectedValueLiteral);
      });

      it('should have the property internallyTerminated (base name: "internallyTerminated")', function() {
        // TODO: update the code to test the property internallyTerminated
        expect(instance).to.have.property('internallyTerminated');
        // expect(instance.internallyTerminated).to.be(expectedValueLiteral);
      });

      it('should have the property variables (base name: "variables")', function() {
        // TODO: update the code to test the property variables
        expect(instance).to.have.property('variables');
        // expect(instance.variables).to.be(expectedValueLiteral);
      });

      it('should have the property variableNamesIgnoreCase (base name: "variableNamesIgnoreCase")', function() {
        // TODO: update the code to test the property variableNamesIgnoreCase
        expect(instance).to.have.property('variableNamesIgnoreCase');
        // expect(instance.variableNamesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property variableValuesIgnoreCase (base name: "variableValuesIgnoreCase")', function() {
        // TODO: update the code to test the property variableValuesIgnoreCase
        expect(instance).to.have.property('variableValuesIgnoreCase');
        // expect(instance.variableValuesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property orQueries (base name: "orQueries")', function() {
        // TODO: update the code to test the property orQueries
        expect(instance).to.have.property('orQueries');
        // expect(instance.orQueries).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
