/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricActivityInstanceDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricActivityInstanceDto();
      });

      it('should create an instance of HistoricActivityInstanceDto', function() {
        // TODO: update the code to test HistoricActivityInstanceDto
        expect(instance).to.be.a(CamundaRestApi.HistoricActivityInstanceDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property parentActivityInstanceId (base name: "parentActivityInstanceId")', function() {
        // TODO: update the code to test the property parentActivityInstanceId
        expect(instance).to.have.property('parentActivityInstanceId');
        // expect(instance.parentActivityInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property activityId (base name: "activityId")', function() {
        // TODO: update the code to test the property activityId
        expect(instance).to.have.property('activityId');
        // expect(instance.activityId).to.be(expectedValueLiteral);
      });

      it('should have the property activityName (base name: "activityName")', function() {
        // TODO: update the code to test the property activityName
        expect(instance).to.have.property('activityName');
        // expect(instance.activityName).to.be(expectedValueLiteral);
      });

      it('should have the property activityType (base name: "activityType")', function() {
        // TODO: update the code to test the property activityType
        expect(instance).to.have.property('activityType');
        // expect(instance.activityType).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property taskId (base name: "taskId")', function() {
        // TODO: update the code to test the property taskId
        expect(instance).to.have.property('taskId');
        // expect(instance.taskId).to.be(expectedValueLiteral);
      });

      it('should have the property assignee (base name: "assignee")', function() {
        // TODO: update the code to test the property assignee
        expect(instance).to.have.property('assignee');
        // expect(instance.assignee).to.be(expectedValueLiteral);
      });

      it('should have the property calledProcessInstanceId (base name: "calledProcessInstanceId")', function() {
        // TODO: update the code to test the property calledProcessInstanceId
        expect(instance).to.have.property('calledProcessInstanceId');
        // expect(instance.calledProcessInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property calledCaseInstanceId (base name: "calledCaseInstanceId")', function() {
        // TODO: update the code to test the property calledCaseInstanceId
        expect(instance).to.have.property('calledCaseInstanceId');
        // expect(instance.calledCaseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property startTime (base name: "startTime")', function() {
        // TODO: update the code to test the property startTime
        expect(instance).to.have.property('startTime');
        // expect(instance.startTime).to.be(expectedValueLiteral);
      });

      it('should have the property endTime (base name: "endTime")', function() {
        // TODO: update the code to test the property endTime
        expect(instance).to.have.property('endTime');
        // expect(instance.endTime).to.be(expectedValueLiteral);
      });

      it('should have the property durationInMillis (base name: "durationInMillis")', function() {
        // TODO: update the code to test the property durationInMillis
        expect(instance).to.have.property('durationInMillis');
        // expect(instance.durationInMillis).to.be(expectedValueLiteral);
      });

      it('should have the property canceled (base name: "canceled")', function() {
        // TODO: update the code to test the property canceled
        expect(instance).to.have.property('canceled');
        // expect(instance.canceled).to.be(expectedValueLiteral);
      });

      it('should have the property completeScope (base name: "completeScope")', function() {
        // TODO: update the code to test the property completeScope
        expect(instance).to.have.property('completeScope');
        // expect(instance.completeScope).to.be(expectedValueLiteral);
      });

      it('should have the property tenantId (base name: "tenantId")', function() {
        // TODO: update the code to test the property tenantId
        expect(instance).to.have.property('tenantId');
        // expect(instance.tenantId).to.be(expectedValueLiteral);
      });

      it('should have the property removalTime (base name: "removalTime")', function() {
        // TODO: update the code to test the property removalTime
        expect(instance).to.have.property('removalTime');
        // expect(instance.removalTime).to.be(expectedValueLiteral);
      });

      it('should have the property rootProcessInstanceId (base name: "rootProcessInstanceId")', function() {
        // TODO: update the code to test the property rootProcessInstanceId
        expect(instance).to.have.property('rootProcessInstanceId');
        // expect(instance.rootProcessInstanceId).to.be(expectedValueLiteral);
      });

    });
  });

}));
