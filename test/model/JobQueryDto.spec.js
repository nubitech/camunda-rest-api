/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('JobQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.JobQueryDto();
      });

      it('should create an instance of JobQueryDto', function() {
        // TODO: update the code to test JobQueryDto
        expect(instance).to.be.a(CamundaRestApi.JobQueryDto);
      });

      it('should have the property jobId (base name: "jobId")', function() {
        // TODO: update the code to test the property jobId
        expect(instance).to.have.property('jobId');
        // expect(instance.jobId).to.be(expectedValueLiteral);
      });

      it('should have the property jobIds (base name: "jobIds")', function() {
        // TODO: update the code to test the property jobIds
        expect(instance).to.have.property('jobIds');
        // expect(instance.jobIds).to.be(expectedValueLiteral);
      });

      it('should have the property jobDefinitionId (base name: "jobDefinitionId")', function() {
        // TODO: update the code to test the property jobDefinitionId
        expect(instance).to.have.property('jobDefinitionId');
        // expect(instance.jobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceIds (base name: "processInstanceIds")', function() {
        // TODO: update the code to test the property processInstanceIds
        expect(instance).to.have.property('processInstanceIds');
        // expect(instance.processInstanceIds).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property activityId (base name: "activityId")', function() {
        // TODO: update the code to test the property activityId
        expect(instance).to.have.property('activityId');
        // expect(instance.activityId).to.be(expectedValueLiteral);
      });

      it('should have the property withRetriesLeft (base name: "withRetriesLeft")', function() {
        // TODO: update the code to test the property withRetriesLeft
        expect(instance).to.have.property('withRetriesLeft');
        // expect(instance.withRetriesLeft).to.be(expectedValueLiteral);
      });

      it('should have the property executable (base name: "executable")', function() {
        // TODO: update the code to test the property executable
        expect(instance).to.have.property('executable');
        // expect(instance.executable).to.be(expectedValueLiteral);
      });

      it('should have the property timers (base name: "timers")', function() {
        // TODO: update the code to test the property timers
        expect(instance).to.have.property('timers');
        // expect(instance.timers).to.be(expectedValueLiteral);
      });

      it('should have the property messages (base name: "messages")', function() {
        // TODO: update the code to test the property messages
        expect(instance).to.have.property('messages');
        // expect(instance.messages).to.be(expectedValueLiteral);
      });

      it('should have the property dueDates (base name: "dueDates")', function() {
        // TODO: update the code to test the property dueDates
        expect(instance).to.have.property('dueDates');
        // expect(instance.dueDates).to.be(expectedValueLiteral);
      });

      it('should have the property createTimes (base name: "createTimes")', function() {
        // TODO: update the code to test the property createTimes
        expect(instance).to.have.property('createTimes');
        // expect(instance.createTimes).to.be(expectedValueLiteral);
      });

      it('should have the property withException (base name: "withException")', function() {
        // TODO: update the code to test the property withException
        expect(instance).to.have.property('withException');
        // expect(instance.withException).to.be(expectedValueLiteral);
      });

      it('should have the property exceptionMessage (base name: "exceptionMessage")', function() {
        // TODO: update the code to test the property exceptionMessage
        expect(instance).to.have.property('exceptionMessage');
        // expect(instance.exceptionMessage).to.be(expectedValueLiteral);
      });

      it('should have the property failedActivityId (base name: "failedActivityId")', function() {
        // TODO: update the code to test the property failedActivityId
        expect(instance).to.have.property('failedActivityId');
        // expect(instance.failedActivityId).to.be(expectedValueLiteral);
      });

      it('should have the property noRetriesLeft (base name: "noRetriesLeft")', function() {
        // TODO: update the code to test the property noRetriesLeft
        expect(instance).to.have.property('noRetriesLeft');
        // expect(instance.noRetriesLeft).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property suspended (base name: "suspended")', function() {
        // TODO: update the code to test the property suspended
        expect(instance).to.have.property('suspended');
        // expect(instance.suspended).to.be(expectedValueLiteral);
      });

      it('should have the property priorityLowerThanOrEquals (base name: "priorityLowerThanOrEquals")', function() {
        // TODO: update the code to test the property priorityLowerThanOrEquals
        expect(instance).to.have.property('priorityLowerThanOrEquals');
        // expect(instance.priorityLowerThanOrEquals).to.be(expectedValueLiteral);
      });

      it('should have the property priorityHigherThanOrEquals (base name: "priorityHigherThanOrEquals")', function() {
        // TODO: update the code to test the property priorityHigherThanOrEquals
        expect(instance).to.have.property('priorityHigherThanOrEquals');
        // expect(instance.priorityHigherThanOrEquals).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property includeJobsWithoutTenantId (base name: "includeJobsWithoutTenantId")', function() {
        // TODO: update the code to test the property includeJobsWithoutTenantId
        expect(instance).to.have.property('includeJobsWithoutTenantId');
        // expect(instance.includeJobsWithoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
