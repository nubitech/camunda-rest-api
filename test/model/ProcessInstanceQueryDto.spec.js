/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ProcessInstanceQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.ProcessInstanceQueryDto();
      });

      it('should create an instance of ProcessInstanceQueryDto', function() {
        // TODO: update the code to test ProcessInstanceQueryDto
        expect(instance).to.be.a(CamundaRestApi.ProcessInstanceQueryDto);
      });

      it('should have the property deploymentId (base name: "deploymentId")', function() {
        // TODO: update the code to test the property deploymentId
        expect(instance).to.have.property('deploymentId');
        // expect(instance.deploymentId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKeyIn (base name: "processDefinitionKeyIn")', function() {
        // TODO: update the code to test the property processDefinitionKeyIn
        expect(instance).to.have.property('processDefinitionKeyIn');
        // expect(instance.processDefinitionKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKeyNotIn (base name: "processDefinitionKeyNotIn")', function() {
        // TODO: update the code to test the property processDefinitionKeyNotIn
        expect(instance).to.have.property('processDefinitionKeyNotIn');
        // expect(instance.processDefinitionKeyNotIn).to.be(expectedValueLiteral);
      });

      it('should have the property businessKey (base name: "businessKey")', function() {
        // TODO: update the code to test the property businessKey
        expect(instance).to.have.property('businessKey');
        // expect(instance.businessKey).to.be(expectedValueLiteral);
      });

      it('should have the property businessKeyLike (base name: "businessKeyLike")', function() {
        // TODO: update the code to test the property businessKeyLike
        expect(instance).to.have.property('businessKeyLike');
        // expect(instance.businessKeyLike).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property superProcessInstance (base name: "superProcessInstance")', function() {
        // TODO: update the code to test the property superProcessInstance
        expect(instance).to.have.property('superProcessInstance');
        // expect(instance.superProcessInstance).to.be(expectedValueLiteral);
      });

      it('should have the property subProcessInstance (base name: "subProcessInstance")', function() {
        // TODO: update the code to test the property subProcessInstance
        expect(instance).to.have.property('subProcessInstance');
        // expect(instance.subProcessInstance).to.be(expectedValueLiteral);
      });

      it('should have the property superCaseInstance (base name: "superCaseInstance")', function() {
        // TODO: update the code to test the property superCaseInstance
        expect(instance).to.have.property('superCaseInstance');
        // expect(instance.superCaseInstance).to.be(expectedValueLiteral);
      });

      it('should have the property subCaseInstance (base name: "subCaseInstance")', function() {
        // TODO: update the code to test the property subCaseInstance
        expect(instance).to.have.property('subCaseInstance');
        // expect(instance.subCaseInstance).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property suspended (base name: "suspended")', function() {
        // TODO: update the code to test the property suspended
        expect(instance).to.have.property('suspended');
        // expect(instance.suspended).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceIds (base name: "processInstanceIds")', function() {
        // TODO: update the code to test the property processInstanceIds
        expect(instance).to.have.property('processInstanceIds');
        // expect(instance.processInstanceIds).to.be(expectedValueLiteral);
      });

      it('should have the property withIncident (base name: "withIncident")', function() {
        // TODO: update the code to test the property withIncident
        expect(instance).to.have.property('withIncident');
        // expect(instance.withIncident).to.be(expectedValueLiteral);
      });

      it('should have the property incidentId (base name: "incidentId")', function() {
        // TODO: update the code to test the property incidentId
        expect(instance).to.have.property('incidentId');
        // expect(instance.incidentId).to.be(expectedValueLiteral);
      });

      it('should have the property incidentType (base name: "incidentType")', function() {
        // TODO: update the code to test the property incidentType
        expect(instance).to.have.property('incidentType');
        // expect(instance.incidentType).to.be(expectedValueLiteral);
      });

      it('should have the property incidentMessage (base name: "incidentMessage")', function() {
        // TODO: update the code to test the property incidentMessage
        expect(instance).to.have.property('incidentMessage');
        // expect(instance.incidentMessage).to.be(expectedValueLiteral);
      });

      it('should have the property incidentMessageLike (base name: "incidentMessageLike")', function() {
        // TODO: update the code to test the property incidentMessageLike
        expect(instance).to.have.property('incidentMessageLike');
        // expect(instance.incidentMessageLike).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionWithoutTenantId (base name: "processDefinitionWithoutTenantId")', function() {
        // TODO: update the code to test the property processDefinitionWithoutTenantId
        expect(instance).to.have.property('processDefinitionWithoutTenantId');
        // expect(instance.processDefinitionWithoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property activityIdIn (base name: "activityIdIn")', function() {
        // TODO: update the code to test the property activityIdIn
        expect(instance).to.have.property('activityIdIn');
        // expect(instance.activityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property rootProcessInstances (base name: "rootProcessInstances")', function() {
        // TODO: update the code to test the property rootProcessInstances
        expect(instance).to.have.property('rootProcessInstances');
        // expect(instance.rootProcessInstances).to.be(expectedValueLiteral);
      });

      it('should have the property leafProcessInstances (base name: "leafProcessInstances")', function() {
        // TODO: update the code to test the property leafProcessInstances
        expect(instance).to.have.property('leafProcessInstances');
        // expect(instance.leafProcessInstances).to.be(expectedValueLiteral);
      });

      it('should have the property variables (base name: "variables")', function() {
        // TODO: update the code to test the property variables
        expect(instance).to.have.property('variables');
        // expect(instance.variables).to.be(expectedValueLiteral);
      });

      it('should have the property variableNamesIgnoreCase (base name: "variableNamesIgnoreCase")', function() {
        // TODO: update the code to test the property variableNamesIgnoreCase
        expect(instance).to.have.property('variableNamesIgnoreCase');
        // expect(instance.variableNamesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property variableValuesIgnoreCase (base name: "variableValuesIgnoreCase")', function() {
        // TODO: update the code to test the property variableValuesIgnoreCase
        expect(instance).to.have.property('variableValuesIgnoreCase');
        // expect(instance.variableValuesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property orQueries (base name: "orQueries")', function() {
        // TODO: update the code to test the property orQueries
        expect(instance).to.have.property('orQueries');
        // expect(instance.orQueries).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
