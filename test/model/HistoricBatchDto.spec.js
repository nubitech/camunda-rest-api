/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricBatchDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricBatchDto();
      });

      it('should create an instance of HistoricBatchDto', function() {
        // TODO: update the code to test HistoricBatchDto
        expect(instance).to.be.a(CamundaRestApi.HistoricBatchDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property totalJobs (base name: "totalJobs")', function() {
        // TODO: update the code to test the property totalJobs
        expect(instance).to.have.property('totalJobs');
        // expect(instance.totalJobs).to.be(expectedValueLiteral);
      });

      it('should have the property batchJobsPerSeed (base name: "batchJobsPerSeed")', function() {
        // TODO: update the code to test the property batchJobsPerSeed
        expect(instance).to.have.property('batchJobsPerSeed');
        // expect(instance.batchJobsPerSeed).to.be(expectedValueLiteral);
      });

      it('should have the property invocationsPerBatchJob (base name: "invocationsPerBatchJob")', function() {
        // TODO: update the code to test the property invocationsPerBatchJob
        expect(instance).to.have.property('invocationsPerBatchJob');
        // expect(instance.invocationsPerBatchJob).to.be(expectedValueLiteral);
      });

      it('should have the property seedJobDefinitionId (base name: "seedJobDefinitionId")', function() {
        // TODO: update the code to test the property seedJobDefinitionId
        expect(instance).to.have.property('seedJobDefinitionId');
        // expect(instance.seedJobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property monitorJobDefinitionId (base name: "monitorJobDefinitionId")', function() {
        // TODO: update the code to test the property monitorJobDefinitionId
        expect(instance).to.have.property('monitorJobDefinitionId');
        // expect(instance.monitorJobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property batchJobDefinitionId (base name: "batchJobDefinitionId")', function() {
        // TODO: update the code to test the property batchJobDefinitionId
        expect(instance).to.have.property('batchJobDefinitionId');
        // expect(instance.batchJobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property tenantId (base name: "tenantId")', function() {
        // TODO: update the code to test the property tenantId
        expect(instance).to.have.property('tenantId');
        // expect(instance.tenantId).to.be(expectedValueLiteral);
      });

      it('should have the property createUserId (base name: "createUserId")', function() {
        // TODO: update the code to test the property createUserId
        expect(instance).to.have.property('createUserId');
        // expect(instance.createUserId).to.be(expectedValueLiteral);
      });

      it('should have the property startTime (base name: "startTime")', function() {
        // TODO: update the code to test the property startTime
        expect(instance).to.have.property('startTime');
        // expect(instance.startTime).to.be(expectedValueLiteral);
      });

      it('should have the property executionStartTime (base name: "executionStartTime")', function() {
        // TODO: update the code to test the property executionStartTime
        expect(instance).to.have.property('executionStartTime');
        // expect(instance.executionStartTime).to.be(expectedValueLiteral);
      });

      it('should have the property endTime (base name: "endTime")', function() {
        // TODO: update the code to test the property endTime
        expect(instance).to.have.property('endTime');
        // expect(instance.endTime).to.be(expectedValueLiteral);
      });

      it('should have the property removalTime (base name: "removalTime")', function() {
        // TODO: update the code to test the property removalTime
        expect(instance).to.have.property('removalTime');
        // expect(instance.removalTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
