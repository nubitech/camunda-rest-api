/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricJobLogQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricJobLogQueryDto();
      });

      it('should create an instance of HistoricJobLogQueryDto', function() {
        // TODO: update the code to test HistoricJobLogQueryDto
        expect(instance).to.be.a(CamundaRestApi.HistoricJobLogQueryDto);
      });

      it('should have the property logId (base name: "logId")', function() {
        // TODO: update the code to test the property logId
        expect(instance).to.have.property('logId');
        // expect(instance.logId).to.be(expectedValueLiteral);
      });

      it('should have the property jobId (base name: "jobId")', function() {
        // TODO: update the code to test the property jobId
        expect(instance).to.have.property('jobId');
        // expect(instance.jobId).to.be(expectedValueLiteral);
      });

      it('should have the property jobExceptionMessage (base name: "jobExceptionMessage")', function() {
        // TODO: update the code to test the property jobExceptionMessage
        expect(instance).to.have.property('jobExceptionMessage');
        // expect(instance.jobExceptionMessage).to.be(expectedValueLiteral);
      });

      it('should have the property jobDefinitionId (base name: "jobDefinitionId")', function() {
        // TODO: update the code to test the property jobDefinitionId
        expect(instance).to.have.property('jobDefinitionId');
        // expect(instance.jobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property jobDefinitionType (base name: "jobDefinitionType")', function() {
        // TODO: update the code to test the property jobDefinitionType
        expect(instance).to.have.property('jobDefinitionType');
        // expect(instance.jobDefinitionType).to.be(expectedValueLiteral);
      });

      it('should have the property jobDefinitionConfiguration (base name: "jobDefinitionConfiguration")', function() {
        // TODO: update the code to test the property jobDefinitionConfiguration
        expect(instance).to.have.property('jobDefinitionConfiguration');
        // expect(instance.jobDefinitionConfiguration).to.be(expectedValueLiteral);
      });

      it('should have the property activityIdIn (base name: "activityIdIn")', function() {
        // TODO: update the code to test the property activityIdIn
        expect(instance).to.have.property('activityIdIn');
        // expect(instance.activityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property failedActivityIdIn (base name: "failedActivityIdIn")', function() {
        // TODO: update the code to test the property failedActivityIdIn
        expect(instance).to.have.property('failedActivityIdIn');
        // expect(instance.failedActivityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property executionIdIn (base name: "executionIdIn")', function() {
        // TODO: update the code to test the property executionIdIn
        expect(instance).to.have.property('executionIdIn');
        // expect(instance.executionIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property deploymentId (base name: "deploymentId")', function() {
        // TODO: update the code to test the property deploymentId
        expect(instance).to.have.property('deploymentId');
        // expect(instance.deploymentId).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property hostname (base name: "hostname")', function() {
        // TODO: update the code to test the property hostname
        expect(instance).to.have.property('hostname');
        // expect(instance.hostname).to.be(expectedValueLiteral);
      });

      it('should have the property jobPriorityLowerThanOrEquals (base name: "jobPriorityLowerThanOrEquals")', function() {
        // TODO: update the code to test the property jobPriorityLowerThanOrEquals
        expect(instance).to.have.property('jobPriorityLowerThanOrEquals');
        // expect(instance.jobPriorityLowerThanOrEquals).to.be(expectedValueLiteral);
      });

      it('should have the property jobPriorityHigherThanOrEquals (base name: "jobPriorityHigherThanOrEquals")', function() {
        // TODO: update the code to test the property jobPriorityHigherThanOrEquals
        expect(instance).to.have.property('jobPriorityHigherThanOrEquals');
        // expect(instance.jobPriorityHigherThanOrEquals).to.be(expectedValueLiteral);
      });

      it('should have the property creationLog (base name: "creationLog")', function() {
        // TODO: update the code to test the property creationLog
        expect(instance).to.have.property('creationLog');
        // expect(instance.creationLog).to.be(expectedValueLiteral);
      });

      it('should have the property failureLog (base name: "failureLog")', function() {
        // TODO: update the code to test the property failureLog
        expect(instance).to.have.property('failureLog');
        // expect(instance.failureLog).to.be(expectedValueLiteral);
      });

      it('should have the property successLog (base name: "successLog")', function() {
        // TODO: update the code to test the property successLog
        expect(instance).to.have.property('successLog');
        // expect(instance.successLog).to.be(expectedValueLiteral);
      });

      it('should have the property deletionLog (base name: "deletionLog")', function() {
        // TODO: update the code to test the property deletionLog
        expect(instance).to.have.property('deletionLog');
        // expect(instance.deletionLog).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
