/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TaskQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.TaskQueryDto();
      });

      it('should create an instance of TaskQueryDto', function() {
        // TODO: update the code to test TaskQueryDto
        expect(instance).to.be.a(CamundaRestApi.TaskQueryDto);
      });

      it('should have the property taskId (base name: "taskId")', function() {
        // TODO: update the code to test the property taskId
        expect(instance).to.have.property('taskId');
        // expect(instance.taskId).to.be(expectedValueLiteral);
      });

      it('should have the property taskIdIn (base name: "taskIdIn")', function() {
        // TODO: update the code to test the property taskIdIn
        expect(instance).to.have.property('taskIdIn');
        // expect(instance.taskIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceIdIn (base name: "processInstanceIdIn")', function() {
        // TODO: update the code to test the property processInstanceIdIn
        expect(instance).to.have.property('processInstanceIdIn');
        // expect(instance.processInstanceIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKey (base name: "processInstanceBusinessKey")', function() {
        // TODO: update the code to test the property processInstanceBusinessKey
        expect(instance).to.have.property('processInstanceBusinessKey');
        // expect(instance.processInstanceBusinessKey).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyExpression (base name: "processInstanceBusinessKeyExpression")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyExpression
        expect(instance).to.have.property('processInstanceBusinessKeyExpression');
        // expect(instance.processInstanceBusinessKeyExpression).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyIn (base name: "processInstanceBusinessKeyIn")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyIn
        expect(instance).to.have.property('processInstanceBusinessKeyIn');
        // expect(instance.processInstanceBusinessKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyLike (base name: "processInstanceBusinessKeyLike")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyLike
        expect(instance).to.have.property('processInstanceBusinessKeyLike');
        // expect(instance.processInstanceBusinessKeyLike).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyLikeExpression (base name: "processInstanceBusinessKeyLikeExpression")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyLikeExpression
        expect(instance).to.have.property('processInstanceBusinessKeyLikeExpression');
        // expect(instance.processInstanceBusinessKeyLikeExpression).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKeyIn (base name: "processDefinitionKeyIn")', function() {
        // TODO: update the code to test the property processDefinitionKeyIn
        expect(instance).to.have.property('processDefinitionKeyIn');
        // expect(instance.processDefinitionKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionName (base name: "processDefinitionName")', function() {
        // TODO: update the code to test the property processDefinitionName
        expect(instance).to.have.property('processDefinitionName');
        // expect(instance.processDefinitionName).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionNameLike (base name: "processDefinitionNameLike")', function() {
        // TODO: update the code to test the property processDefinitionNameLike
        expect(instance).to.have.property('processDefinitionNameLike');
        // expect(instance.processDefinitionNameLike).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceBusinessKey (base name: "caseInstanceBusinessKey")', function() {
        // TODO: update the code to test the property caseInstanceBusinessKey
        expect(instance).to.have.property('caseInstanceBusinessKey');
        // expect(instance.caseInstanceBusinessKey).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceBusinessKeyLike (base name: "caseInstanceBusinessKeyLike")', function() {
        // TODO: update the code to test the property caseInstanceBusinessKeyLike
        expect(instance).to.have.property('caseInstanceBusinessKeyLike');
        // expect(instance.caseInstanceBusinessKeyLike).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionId (base name: "caseDefinitionId")', function() {
        // TODO: update the code to test the property caseDefinitionId
        expect(instance).to.have.property('caseDefinitionId');
        // expect(instance.caseDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionKey (base name: "caseDefinitionKey")', function() {
        // TODO: update the code to test the property caseDefinitionKey
        expect(instance).to.have.property('caseDefinitionKey');
        // expect(instance.caseDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionName (base name: "caseDefinitionName")', function() {
        // TODO: update the code to test the property caseDefinitionName
        expect(instance).to.have.property('caseDefinitionName');
        // expect(instance.caseDefinitionName).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionNameLike (base name: "caseDefinitionNameLike")', function() {
        // TODO: update the code to test the property caseDefinitionNameLike
        expect(instance).to.have.property('caseDefinitionNameLike');
        // expect(instance.caseDefinitionNameLike).to.be(expectedValueLiteral);
      });

      it('should have the property caseExecutionId (base name: "caseExecutionId")', function() {
        // TODO: update the code to test the property caseExecutionId
        expect(instance).to.have.property('caseExecutionId');
        // expect(instance.caseExecutionId).to.be(expectedValueLiteral);
      });

      it('should have the property activityInstanceIdIn (base name: "activityInstanceIdIn")', function() {
        // TODO: update the code to test the property activityInstanceIdIn
        expect(instance).to.have.property('activityInstanceIdIn');
        // expect(instance.activityInstanceIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property assignee (base name: "assignee")', function() {
        // TODO: update the code to test the property assignee
        expect(instance).to.have.property('assignee');
        // expect(instance.assignee).to.be(expectedValueLiteral);
      });

      it('should have the property assigneeExpression (base name: "assigneeExpression")', function() {
        // TODO: update the code to test the property assigneeExpression
        expect(instance).to.have.property('assigneeExpression');
        // expect(instance.assigneeExpression).to.be(expectedValueLiteral);
      });

      it('should have the property assigneeLike (base name: "assigneeLike")', function() {
        // TODO: update the code to test the property assigneeLike
        expect(instance).to.have.property('assigneeLike');
        // expect(instance.assigneeLike).to.be(expectedValueLiteral);
      });

      it('should have the property assigneeLikeExpression (base name: "assigneeLikeExpression")', function() {
        // TODO: update the code to test the property assigneeLikeExpression
        expect(instance).to.have.property('assigneeLikeExpression');
        // expect(instance.assigneeLikeExpression).to.be(expectedValueLiteral);
      });

      it('should have the property assigneeIn (base name: "assigneeIn")', function() {
        // TODO: update the code to test the property assigneeIn
        expect(instance).to.have.property('assigneeIn');
        // expect(instance.assigneeIn).to.be(expectedValueLiteral);
      });

      it('should have the property assigneeNotIn (base name: "assigneeNotIn")', function() {
        // TODO: update the code to test the property assigneeNotIn
        expect(instance).to.have.property('assigneeNotIn');
        // expect(instance.assigneeNotIn).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property ownerExpression (base name: "ownerExpression")', function() {
        // TODO: update the code to test the property ownerExpression
        expect(instance).to.have.property('ownerExpression');
        // expect(instance.ownerExpression).to.be(expectedValueLiteral);
      });

      it('should have the property candidateGroup (base name: "candidateGroup")', function() {
        // TODO: update the code to test the property candidateGroup
        expect(instance).to.have.property('candidateGroup');
        // expect(instance.candidateGroup).to.be(expectedValueLiteral);
      });

      it('should have the property candidateGroupExpression (base name: "candidateGroupExpression")', function() {
        // TODO: update the code to test the property candidateGroupExpression
        expect(instance).to.have.property('candidateGroupExpression');
        // expect(instance.candidateGroupExpression).to.be(expectedValueLiteral);
      });

      it('should have the property candidateUser (base name: "candidateUser")', function() {
        // TODO: update the code to test the property candidateUser
        expect(instance).to.have.property('candidateUser');
        // expect(instance.candidateUser).to.be(expectedValueLiteral);
      });

      it('should have the property candidateUserExpression (base name: "candidateUserExpression")', function() {
        // TODO: update the code to test the property candidateUserExpression
        expect(instance).to.have.property('candidateUserExpression');
        // expect(instance.candidateUserExpression).to.be(expectedValueLiteral);
      });

      it('should have the property includeAssignedTasks (base name: "includeAssignedTasks")', function() {
        // TODO: update the code to test the property includeAssignedTasks
        expect(instance).to.have.property('includeAssignedTasks');
        // expect(instance.includeAssignedTasks).to.be(expectedValueLiteral);
      });

      it('should have the property involvedUser (base name: "involvedUser")', function() {
        // TODO: update the code to test the property involvedUser
        expect(instance).to.have.property('involvedUser');
        // expect(instance.involvedUser).to.be(expectedValueLiteral);
      });

      it('should have the property involvedUserExpression (base name: "involvedUserExpression")', function() {
        // TODO: update the code to test the property involvedUserExpression
        expect(instance).to.have.property('involvedUserExpression');
        // expect(instance.involvedUserExpression).to.be(expectedValueLiteral);
      });

      it('should have the property assigned (base name: "assigned")', function() {
        // TODO: update the code to test the property assigned
        expect(instance).to.have.property('assigned');
        // expect(instance.assigned).to.be(expectedValueLiteral);
      });

      it('should have the property unassigned (base name: "unassigned")', function() {
        // TODO: update the code to test the property unassigned
        expect(instance).to.have.property('unassigned');
        // expect(instance.unassigned).to.be(expectedValueLiteral);
      });

      it('should have the property taskDefinitionKey (base name: "taskDefinitionKey")', function() {
        // TODO: update the code to test the property taskDefinitionKey
        expect(instance).to.have.property('taskDefinitionKey');
        // expect(instance.taskDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property taskDefinitionKeyIn (base name: "taskDefinitionKeyIn")', function() {
        // TODO: update the code to test the property taskDefinitionKeyIn
        expect(instance).to.have.property('taskDefinitionKeyIn');
        // expect(instance.taskDefinitionKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property taskDefinitionKeyLike (base name: "taskDefinitionKeyLike")', function() {
        // TODO: update the code to test the property taskDefinitionKeyLike
        expect(instance).to.have.property('taskDefinitionKeyLike');
        // expect(instance.taskDefinitionKeyLike).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property nameNotEqual (base name: "nameNotEqual")', function() {
        // TODO: update the code to test the property nameNotEqual
        expect(instance).to.have.property('nameNotEqual');
        // expect(instance.nameNotEqual).to.be(expectedValueLiteral);
      });

      it('should have the property nameLike (base name: "nameLike")', function() {
        // TODO: update the code to test the property nameLike
        expect(instance).to.have.property('nameLike');
        // expect(instance.nameLike).to.be(expectedValueLiteral);
      });

      it('should have the property nameNotLike (base name: "nameNotLike")', function() {
        // TODO: update the code to test the property nameNotLike
        expect(instance).to.have.property('nameNotLike');
        // expect(instance.nameNotLike).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionLike (base name: "descriptionLike")', function() {
        // TODO: update the code to test the property descriptionLike
        expect(instance).to.have.property('descriptionLike');
        // expect(instance.descriptionLike).to.be(expectedValueLiteral);
      });

      it('should have the property priority (base name: "priority")', function() {
        // TODO: update the code to test the property priority
        expect(instance).to.have.property('priority');
        // expect(instance.priority).to.be(expectedValueLiteral);
      });

      it('should have the property maxPriority (base name: "maxPriority")', function() {
        // TODO: update the code to test the property maxPriority
        expect(instance).to.have.property('maxPriority');
        // expect(instance.maxPriority).to.be(expectedValueLiteral);
      });

      it('should have the property minPriority (base name: "minPriority")', function() {
        // TODO: update the code to test the property minPriority
        expect(instance).to.have.property('minPriority');
        // expect(instance.minPriority).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "dueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property dueDateExpression (base name: "dueDateExpression")', function() {
        // TODO: update the code to test the property dueDateExpression
        expect(instance).to.have.property('dueDateExpression');
        // expect(instance.dueDateExpression).to.be(expectedValueLiteral);
      });

      it('should have the property dueAfter (base name: "dueAfter")', function() {
        // TODO: update the code to test the property dueAfter
        expect(instance).to.have.property('dueAfter');
        // expect(instance.dueAfter).to.be(expectedValueLiteral);
      });

      it('should have the property dueAfterExpression (base name: "dueAfterExpression")', function() {
        // TODO: update the code to test the property dueAfterExpression
        expect(instance).to.have.property('dueAfterExpression');
        // expect(instance.dueAfterExpression).to.be(expectedValueLiteral);
      });

      it('should have the property dueBefore (base name: "dueBefore")', function() {
        // TODO: update the code to test the property dueBefore
        expect(instance).to.have.property('dueBefore');
        // expect(instance.dueBefore).to.be(expectedValueLiteral);
      });

      it('should have the property dueBeforeExpression (base name: "dueBeforeExpression")', function() {
        // TODO: update the code to test the property dueBeforeExpression
        expect(instance).to.have.property('dueBeforeExpression');
        // expect(instance.dueBeforeExpression).to.be(expectedValueLiteral);
      });

      it('should have the property withoutDueDate (base name: "withoutDueDate")', function() {
        // TODO: update the code to test the property withoutDueDate
        expect(instance).to.have.property('withoutDueDate');
        // expect(instance.withoutDueDate).to.be(expectedValueLiteral);
      });

      it('should have the property followUpDate (base name: "followUpDate")', function() {
        // TODO: update the code to test the property followUpDate
        expect(instance).to.have.property('followUpDate');
        // expect(instance.followUpDate).to.be(expectedValueLiteral);
      });

      it('should have the property followUpDateExpression (base name: "followUpDateExpression")', function() {
        // TODO: update the code to test the property followUpDateExpression
        expect(instance).to.have.property('followUpDateExpression');
        // expect(instance.followUpDateExpression).to.be(expectedValueLiteral);
      });

      it('should have the property followUpAfter (base name: "followUpAfter")', function() {
        // TODO: update the code to test the property followUpAfter
        expect(instance).to.have.property('followUpAfter');
        // expect(instance.followUpAfter).to.be(expectedValueLiteral);
      });

      it('should have the property followUpAfterExpression (base name: "followUpAfterExpression")', function() {
        // TODO: update the code to test the property followUpAfterExpression
        expect(instance).to.have.property('followUpAfterExpression');
        // expect(instance.followUpAfterExpression).to.be(expectedValueLiteral);
      });

      it('should have the property followUpBefore (base name: "followUpBefore")', function() {
        // TODO: update the code to test the property followUpBefore
        expect(instance).to.have.property('followUpBefore');
        // expect(instance.followUpBefore).to.be(expectedValueLiteral);
      });

      it('should have the property followUpBeforeExpression (base name: "followUpBeforeExpression")', function() {
        // TODO: update the code to test the property followUpBeforeExpression
        expect(instance).to.have.property('followUpBeforeExpression');
        // expect(instance.followUpBeforeExpression).to.be(expectedValueLiteral);
      });

      it('should have the property followUpBeforeOrNotExistent (base name: "followUpBeforeOrNotExistent")', function() {
        // TODO: update the code to test the property followUpBeforeOrNotExistent
        expect(instance).to.have.property('followUpBeforeOrNotExistent');
        // expect(instance.followUpBeforeOrNotExistent).to.be(expectedValueLiteral);
      });

      it('should have the property followUpBeforeOrNotExistentExpression (base name: "followUpBeforeOrNotExistentExpression")', function() {
        // TODO: update the code to test the property followUpBeforeOrNotExistentExpression
        expect(instance).to.have.property('followUpBeforeOrNotExistentExpression');
        // expect(instance.followUpBeforeOrNotExistentExpression).to.be(expectedValueLiteral);
      });

      it('should have the property createdOn (base name: "createdOn")', function() {
        // TODO: update the code to test the property createdOn
        expect(instance).to.have.property('createdOn');
        // expect(instance.createdOn).to.be(expectedValueLiteral);
      });

      it('should have the property createdOnExpression (base name: "createdOnExpression")', function() {
        // TODO: update the code to test the property createdOnExpression
        expect(instance).to.have.property('createdOnExpression');
        // expect(instance.createdOnExpression).to.be(expectedValueLiteral);
      });

      it('should have the property createdAfter (base name: "createdAfter")', function() {
        // TODO: update the code to test the property createdAfter
        expect(instance).to.have.property('createdAfter');
        // expect(instance.createdAfter).to.be(expectedValueLiteral);
      });

      it('should have the property createdAfterExpression (base name: "createdAfterExpression")', function() {
        // TODO: update the code to test the property createdAfterExpression
        expect(instance).to.have.property('createdAfterExpression');
        // expect(instance.createdAfterExpression).to.be(expectedValueLiteral);
      });

      it('should have the property createdBefore (base name: "createdBefore")', function() {
        // TODO: update the code to test the property createdBefore
        expect(instance).to.have.property('createdBefore');
        // expect(instance.createdBefore).to.be(expectedValueLiteral);
      });

      it('should have the property createdBeforeExpression (base name: "createdBeforeExpression")', function() {
        // TODO: update the code to test the property createdBeforeExpression
        expect(instance).to.have.property('createdBeforeExpression');
        // expect(instance.createdBeforeExpression).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAfter (base name: "updatedAfter")', function() {
        // TODO: update the code to test the property updatedAfter
        expect(instance).to.have.property('updatedAfter');
        // expect(instance.updatedAfter).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAfterExpression (base name: "updatedAfterExpression")', function() {
        // TODO: update the code to test the property updatedAfterExpression
        expect(instance).to.have.property('updatedAfterExpression');
        // expect(instance.updatedAfterExpression).to.be(expectedValueLiteral);
      });

      it('should have the property delegationState (base name: "delegationState")', function() {
        // TODO: update the code to test the property delegationState
        expect(instance).to.have.property('delegationState');
        // expect(instance.delegationState).to.be(expectedValueLiteral);
      });

      it('should have the property candidateGroups (base name: "candidateGroups")', function() {
        // TODO: update the code to test the property candidateGroups
        expect(instance).to.have.property('candidateGroups');
        // expect(instance.candidateGroups).to.be(expectedValueLiteral);
      });

      it('should have the property candidateGroupsExpression (base name: "candidateGroupsExpression")', function() {
        // TODO: update the code to test the property candidateGroupsExpression
        expect(instance).to.have.property('candidateGroupsExpression');
        // expect(instance.candidateGroupsExpression).to.be(expectedValueLiteral);
      });

      it('should have the property withCandidateGroups (base name: "withCandidateGroups")', function() {
        // TODO: update the code to test the property withCandidateGroups
        expect(instance).to.have.property('withCandidateGroups');
        // expect(instance.withCandidateGroups).to.be(expectedValueLiteral);
      });

      it('should have the property withoutCandidateGroups (base name: "withoutCandidateGroups")', function() {
        // TODO: update the code to test the property withoutCandidateGroups
        expect(instance).to.have.property('withoutCandidateGroups');
        // expect(instance.withoutCandidateGroups).to.be(expectedValueLiteral);
      });

      it('should have the property withCandidateUsers (base name: "withCandidateUsers")', function() {
        // TODO: update the code to test the property withCandidateUsers
        expect(instance).to.have.property('withCandidateUsers');
        // expect(instance.withCandidateUsers).to.be(expectedValueLiteral);
      });

      it('should have the property withoutCandidateUsers (base name: "withoutCandidateUsers")', function() {
        // TODO: update the code to test the property withoutCandidateUsers
        expect(instance).to.have.property('withoutCandidateUsers');
        // expect(instance.withoutCandidateUsers).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property suspended (base name: "suspended")', function() {
        // TODO: update the code to test the property suspended
        expect(instance).to.have.property('suspended');
        // expect(instance.suspended).to.be(expectedValueLiteral);
      });

      it('should have the property taskVariables (base name: "taskVariables")', function() {
        // TODO: update the code to test the property taskVariables
        expect(instance).to.have.property('taskVariables');
        // expect(instance.taskVariables).to.be(expectedValueLiteral);
      });

      it('should have the property processVariables (base name: "processVariables")', function() {
        // TODO: update the code to test the property processVariables
        expect(instance).to.have.property('processVariables');
        // expect(instance.processVariables).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceVariables (base name: "caseInstanceVariables")', function() {
        // TODO: update the code to test the property caseInstanceVariables
        expect(instance).to.have.property('caseInstanceVariables');
        // expect(instance.caseInstanceVariables).to.be(expectedValueLiteral);
      });

      it('should have the property variableNamesIgnoreCase (base name: "variableNamesIgnoreCase")', function() {
        // TODO: update the code to test the property variableNamesIgnoreCase
        expect(instance).to.have.property('variableNamesIgnoreCase');
        // expect(instance.variableNamesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property variableValuesIgnoreCase (base name: "variableValuesIgnoreCase")', function() {
        // TODO: update the code to test the property variableValuesIgnoreCase
        expect(instance).to.have.property('variableValuesIgnoreCase');
        // expect(instance.variableValuesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property parentTaskId (base name: "parentTaskId")', function() {
        // TODO: update the code to test the property parentTaskId
        expect(instance).to.have.property('parentTaskId');
        // expect(instance.parentTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property orQueries (base name: "orQueries")', function() {
        // TODO: update the code to test the property orQueries
        expect(instance).to.have.property('orQueries');
        // expect(instance.orQueries).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
