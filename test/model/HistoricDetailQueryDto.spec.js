/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricDetailQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricDetailQueryDto();
      });

      it('should create an instance of HistoricDetailQueryDto', function() {
        // TODO: update the code to test HistoricDetailQueryDto
        expect(instance).to.be.a(CamundaRestApi.HistoricDetailQueryDto);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceIdIn (base name: "processInstanceIdIn")', function() {
        // TODO: update the code to test the property processInstanceIdIn
        expect(instance).to.have.property('processInstanceIdIn');
        // expect(instance.processInstanceIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property taskId (base name: "taskId")', function() {
        // TODO: update the code to test the property taskId
        expect(instance).to.have.property('taskId');
        // expect(instance.taskId).to.be(expectedValueLiteral);
      });

      it('should have the property activityInstanceId (base name: "activityInstanceId")', function() {
        // TODO: update the code to test the property activityInstanceId
        expect(instance).to.have.property('activityInstanceId');
        // expect(instance.activityInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseExecutionId (base name: "caseExecutionId")', function() {
        // TODO: update the code to test the property caseExecutionId
        expect(instance).to.have.property('caseExecutionId');
        // expect(instance.caseExecutionId).to.be(expectedValueLiteral);
      });

      it('should have the property variableInstanceId (base name: "variableInstanceId")', function() {
        // TODO: update the code to test the property variableInstanceId
        expect(instance).to.have.property('variableInstanceId');
        // expect(instance.variableInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property variableTypeIn (base name: "variableTypeIn")', function() {
        // TODO: update the code to test the property variableTypeIn
        expect(instance).to.have.property('variableTypeIn');
        // expect(instance.variableTypeIn).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property userOperationId (base name: "userOperationId")', function() {
        // TODO: update the code to test the property userOperationId
        expect(instance).to.have.property('userOperationId');
        // expect(instance.userOperationId).to.be(expectedValueLiteral);
      });

      it('should have the property formFields (base name: "formFields")', function() {
        // TODO: update the code to test the property formFields
        expect(instance).to.have.property('formFields');
        // expect(instance.formFields).to.be(expectedValueLiteral);
      });

      it('should have the property variableUpdates (base name: "variableUpdates")', function() {
        // TODO: update the code to test the property variableUpdates
        expect(instance).to.have.property('variableUpdates');
        // expect(instance.variableUpdates).to.be(expectedValueLiteral);
      });

      it('should have the property excludeTaskDetails (base name: "excludeTaskDetails")', function() {
        // TODO: update the code to test the property excludeTaskDetails
        expect(instance).to.have.property('excludeTaskDetails');
        // expect(instance.excludeTaskDetails).to.be(expectedValueLiteral);
      });

      it('should have the property initial (base name: "initial")', function() {
        // TODO: update the code to test the property initial
        expect(instance).to.have.property('initial');
        // expect(instance.initial).to.be(expectedValueLiteral);
      });

      it('should have the property occurredBefore (base name: "occurredBefore")', function() {
        // TODO: update the code to test the property occurredBefore
        expect(instance).to.have.property('occurredBefore');
        // expect(instance.occurredBefore).to.be(expectedValueLiteral);
      });

      it('should have the property occurredAfter (base name: "occurredAfter")', function() {
        // TODO: update the code to test the property occurredAfter
        expect(instance).to.have.property('occurredAfter');
        // expect(instance.occurredAfter).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
