/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FetchExternalTaskTopicDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.FetchExternalTaskTopicDto();
      });

      it('should create an instance of FetchExternalTaskTopicDto', function() {
        // TODO: update the code to test FetchExternalTaskTopicDto
        expect(instance).to.be.a(CamundaRestApi.FetchExternalTaskTopicDto);
      });

      it('should have the property topicName (base name: "topicName")', function() {
        // TODO: update the code to test the property topicName
        expect(instance).to.have.property('topicName');
        // expect(instance.topicName).to.be(expectedValueLiteral);
      });

      it('should have the property lockDuration (base name: "lockDuration")', function() {
        // TODO: update the code to test the property lockDuration
        expect(instance).to.have.property('lockDuration');
        // expect(instance.lockDuration).to.be(expectedValueLiteral);
      });

      it('should have the property variables (base name: "variables")', function() {
        // TODO: update the code to test the property variables
        expect(instance).to.have.property('variables');
        // expect(instance.variables).to.be(expectedValueLiteral);
      });

      it('should have the property localVariables (base name: "localVariables")', function() {
        // TODO: update the code to test the property localVariables
        expect(instance).to.have.property('localVariables');
        // expect(instance.localVariables).to.be(expectedValueLiteral);
      });

      it('should have the property businessKey (base name: "businessKey")', function() {
        // TODO: update the code to test the property businessKey
        expect(instance).to.have.property('businessKey');
        // expect(instance.businessKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionIdIn (base name: "processDefinitionIdIn")', function() {
        // TODO: update the code to test the property processDefinitionIdIn
        expect(instance).to.have.property('processDefinitionIdIn');
        // expect(instance.processDefinitionIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKeyIn (base name: "processDefinitionKeyIn")', function() {
        // TODO: update the code to test the property processDefinitionKeyIn
        expect(instance).to.have.property('processDefinitionKeyIn');
        // expect(instance.processDefinitionKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionVersionTag (base name: "processDefinitionVersionTag")', function() {
        // TODO: update the code to test the property processDefinitionVersionTag
        expect(instance).to.have.property('processDefinitionVersionTag');
        // expect(instance.processDefinitionVersionTag).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property processVariables (base name: "processVariables")', function() {
        // TODO: update the code to test the property processVariables
        expect(instance).to.have.property('processVariables');
        // expect(instance.processVariables).to.be(expectedValueLiteral);
      });

      it('should have the property deserializeValues (base name: "deserializeValues")', function() {
        // TODO: update the code to test the property deserializeValues
        expect(instance).to.have.property('deserializeValues');
        // expect(instance.deserializeValues).to.be(expectedValueLiteral);
      });

      it('should have the property includeExtensionProperties (base name: "includeExtensionProperties")', function() {
        // TODO: update the code to test the property includeExtensionProperties
        expect(instance).to.have.property('includeExtensionProperties');
        // expect(instance.includeExtensionProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
