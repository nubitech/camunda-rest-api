/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricIncidentDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricIncidentDto();
      });

      it('should create an instance of HistoricIncidentDto', function() {
        // TODO: update the code to test HistoricIncidentDto
        expect(instance).to.be.a(CamundaRestApi.HistoricIncidentDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property rootProcessInstanceId (base name: "rootProcessInstanceId")', function() {
        // TODO: update the code to test the property rootProcessInstanceId
        expect(instance).to.have.property('rootProcessInstanceId');
        // expect(instance.rootProcessInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property createTime (base name: "createTime")', function() {
        // TODO: update the code to test the property createTime
        expect(instance).to.have.property('createTime');
        // expect(instance.createTime).to.be(expectedValueLiteral);
      });

      it('should have the property endTime (base name: "endTime")', function() {
        // TODO: update the code to test the property endTime
        expect(instance).to.have.property('endTime');
        // expect(instance.endTime).to.be(expectedValueLiteral);
      });

      it('should have the property removalTime (base name: "removalTime")', function() {
        // TODO: update the code to test the property removalTime
        expect(instance).to.have.property('removalTime');
        // expect(instance.removalTime).to.be(expectedValueLiteral);
      });

      it('should have the property incidentType (base name: "incidentType")', function() {
        // TODO: update the code to test the property incidentType
        expect(instance).to.have.property('incidentType');
        // expect(instance.incidentType).to.be(expectedValueLiteral);
      });

      it('should have the property activityId (base name: "activityId")', function() {
        // TODO: update the code to test the property activityId
        expect(instance).to.have.property('activityId');
        // expect(instance.activityId).to.be(expectedValueLiteral);
      });

      it('should have the property failedActivityId (base name: "failedActivityId")', function() {
        // TODO: update the code to test the property failedActivityId
        expect(instance).to.have.property('failedActivityId');
        // expect(instance.failedActivityId).to.be(expectedValueLiteral);
      });

      it('should have the property causeIncidentId (base name: "causeIncidentId")', function() {
        // TODO: update the code to test the property causeIncidentId
        expect(instance).to.have.property('causeIncidentId');
        // expect(instance.causeIncidentId).to.be(expectedValueLiteral);
      });

      it('should have the property rootCauseIncidentId (base name: "rootCauseIncidentId")', function() {
        // TODO: update the code to test the property rootCauseIncidentId
        expect(instance).to.have.property('rootCauseIncidentId');
        // expect(instance.rootCauseIncidentId).to.be(expectedValueLiteral);
      });

      it('should have the property configuration (base name: "configuration")', function() {
        // TODO: update the code to test the property configuration
        expect(instance).to.have.property('configuration');
        // expect(instance.configuration).to.be(expectedValueLiteral);
      });

      it('should have the property historyConfiguration (base name: "historyConfiguration")', function() {
        // TODO: update the code to test the property historyConfiguration
        expect(instance).to.have.property('historyConfiguration');
        // expect(instance.historyConfiguration).to.be(expectedValueLiteral);
      });

      it('should have the property incidentMessage (base name: "incidentMessage")', function() {
        // TODO: update the code to test the property incidentMessage
        expect(instance).to.have.property('incidentMessage');
        // expect(instance.incidentMessage).to.be(expectedValueLiteral);
      });

      it('should have the property tenantId (base name: "tenantId")', function() {
        // TODO: update the code to test the property tenantId
        expect(instance).to.have.property('tenantId');
        // expect(instance.tenantId).to.be(expectedValueLiteral);
      });

      it('should have the property jobDefinitionId (base name: "jobDefinitionId")', function() {
        // TODO: update the code to test the property jobDefinitionId
        expect(instance).to.have.property('jobDefinitionId');
        // expect(instance.jobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property open (base name: "open")', function() {
        // TODO: update the code to test the property open
        expect(instance).to.have.property('open');
        // expect(instance.open).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property resolved (base name: "resolved")', function() {
        // TODO: update the code to test the property resolved
        expect(instance).to.have.property('resolved');
        // expect(instance.resolved).to.be(expectedValueLiteral);
      });

      it('should have the property annotation (base name: "annotation")', function() {
        // TODO: update the code to test the property annotation
        expect(instance).to.have.property('annotation');
        // expect(instance.annotation).to.be(expectedValueLiteral);
      });

    });
  });

}));
