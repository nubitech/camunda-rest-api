/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TelemetryInternalsDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.TelemetryInternalsDto();
      });

      it('should create an instance of TelemetryInternalsDto', function() {
        // TODO: update the code to test TelemetryInternalsDto
        expect(instance).to.be.a(CamundaRestApi.TelemetryInternalsDto);
      });

      it('should have the property database (base name: "database")', function() {
        // TODO: update the code to test the property database
        expect(instance).to.have.property('database');
        // expect(instance.database).to.be(expectedValueLiteral);
      });

      it('should have the property applicationServer (base name: "application-server")', function() {
        // TODO: update the code to test the property applicationServer
        expect(instance).to.have.property('applicationServer');
        // expect(instance.applicationServer).to.be(expectedValueLiteral);
      });

      it('should have the property licenseKey (base name: "license-key")', function() {
        // TODO: update the code to test the property licenseKey
        expect(instance).to.have.property('licenseKey');
        // expect(instance.licenseKey).to.be(expectedValueLiteral);
      });

      it('should have the property camundaIntegration (base name: "camunda-integration")', function() {
        // TODO: update the code to test the property camundaIntegration
        expect(instance).to.have.property('camundaIntegration');
        // expect(instance.camundaIntegration).to.be(expectedValueLiteral);
      });

      it('should have the property commands (base name: "commands")', function() {
        // TODO: update the code to test the property commands
        expect(instance).to.have.property('commands');
        // expect(instance.commands).to.be(expectedValueLiteral);
      });

      it('should have the property metrics (base name: "metrics")', function() {
        // TODO: update the code to test the property metrics
        expect(instance).to.have.property('metrics');
        // expect(instance.metrics).to.be(expectedValueLiteral);
      });

      it('should have the property webapps (base name: "webapps")', function() {
        // TODO: update the code to test the property webapps
        expect(instance).to.have.property('webapps');
        // expect(instance.webapps).to.be(expectedValueLiteral);
      });

      it('should have the property jdk (base name: "jdk")', function() {
        // TODO: update the code to test the property jdk
        expect(instance).to.have.property('jdk');
        // expect(instance.jdk).to.be(expectedValueLiteral);
      });

      it('should have the property dataCollectionStartDate (base name: "data-collection-start-date")', function() {
        // TODO: update the code to test the property dataCollectionStartDate
        expect(instance).to.have.property('dataCollectionStartDate');
        // expect(instance.dataCollectionStartDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
