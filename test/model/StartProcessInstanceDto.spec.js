/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StartProcessInstanceDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.StartProcessInstanceDto();
      });

      it('should create an instance of StartProcessInstanceDto', function() {
        // TODO: update the code to test StartProcessInstanceDto
        expect(instance).to.be.a(CamundaRestApi.StartProcessInstanceDto);
      });

      it('should have the property businessKey (base name: "businessKey")', function() {
        // TODO: update the code to test the property businessKey
        expect(instance).to.have.property('businessKey');
        // expect(instance.businessKey).to.be(expectedValueLiteral);
      });

      it('should have the property variables (base name: "variables")', function() {
        // TODO: update the code to test the property variables
        expect(instance).to.have.property('variables');
        // expect(instance.variables).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property startInstructions (base name: "startInstructions")', function() {
        // TODO: update the code to test the property startInstructions
        expect(instance).to.have.property('startInstructions');
        // expect(instance.startInstructions).to.be(expectedValueLiteral);
      });

      it('should have the property skipCustomListeners (base name: "skipCustomListeners")', function() {
        // TODO: update the code to test the property skipCustomListeners
        expect(instance).to.have.property('skipCustomListeners');
        // expect(instance.skipCustomListeners).to.be(expectedValueLiteral);
      });

      it('should have the property skipIoMappings (base name: "skipIoMappings")', function() {
        // TODO: update the code to test the property skipIoMappings
        expect(instance).to.have.property('skipIoMappings');
        // expect(instance.skipIoMappings).to.be(expectedValueLiteral);
      });

      it('should have the property withVariablesInReturn (base name: "withVariablesInReturn")', function() {
        // TODO: update the code to test the property withVariablesInReturn
        expect(instance).to.have.property('withVariablesInReturn');
        // expect(instance.withVariablesInReturn).to.be(expectedValueLiteral);
      });

    });
  });

}));
