/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricDecisionInputInstanceDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricDecisionInputInstanceDto();
      });

      it('should create an instance of HistoricDecisionInputInstanceDto', function() {
        // TODO: update the code to test HistoricDecisionInputInstanceDto
        expect(instance).to.be.a(CamundaRestApi.HistoricDecisionInputInstanceDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property decisionInstanceId (base name: "decisionInstanceId")', function() {
        // TODO: update the code to test the property decisionInstanceId
        expect(instance).to.have.property('decisionInstanceId');
        // expect(instance.decisionInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property clauseId (base name: "clauseId")', function() {
        // TODO: update the code to test the property clauseId
        expect(instance).to.have.property('clauseId');
        // expect(instance.clauseId).to.be(expectedValueLiteral);
      });

      it('should have the property clauseName (base name: "clauseName")', function() {
        // TODO: update the code to test the property clauseName
        expect(instance).to.have.property('clauseName');
        // expect(instance.clauseName).to.be(expectedValueLiteral);
      });

      it('should have the property errorMessage (base name: "errorMessage")', function() {
        // TODO: update the code to test the property errorMessage
        expect(instance).to.have.property('errorMessage');
        // expect(instance.errorMessage).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property createTime (base name: "createTime")', function() {
        // TODO: update the code to test the property createTime
        expect(instance).to.have.property('createTime');
        // expect(instance.createTime).to.be(expectedValueLiteral);
      });

      it('should have the property removalTime (base name: "removalTime")', function() {
        // TODO: update the code to test the property removalTime
        expect(instance).to.have.property('removalTime');
        // expect(instance.removalTime).to.be(expectedValueLiteral);
      });

      it('should have the property rootProcessInstanceId (base name: "rootProcessInstanceId")', function() {
        // TODO: update the code to test the property rootProcessInstanceId
        expect(instance).to.have.property('rootProcessInstanceId');
        // expect(instance.rootProcessInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property valueInfo (base name: "valueInfo")', function() {
        // TODO: update the code to test the property valueInfo
        expect(instance).to.have.property('valueInfo');
        // expect(instance.valueInfo).to.be(expectedValueLiteral);
      });

    });
  });

}));
