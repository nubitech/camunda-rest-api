/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserOperationLogEntryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.UserOperationLogEntryDto();
      });

      it('should create an instance of UserOperationLogEntryDto', function() {
        // TODO: update the code to test UserOperationLogEntryDto
        expect(instance).to.be.a(CamundaRestApi.UserOperationLogEntryDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property operationId (base name: "operationId")', function() {
        // TODO: update the code to test the property operationId
        expect(instance).to.have.property('operationId');
        // expect(instance.operationId).to.be(expectedValueLiteral);
      });

      it('should have the property operationType (base name: "operationType")', function() {
        // TODO: update the code to test the property operationType
        expect(instance).to.have.property('operationType');
        // expect(instance.operationType).to.be(expectedValueLiteral);
      });

      it('should have the property entityType (base name: "entityType")', function() {
        // TODO: update the code to test the property entityType
        expect(instance).to.have.property('entityType');
        // expect(instance.entityType).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property annotation (base name: "annotation")', function() {
        // TODO: update the code to test the property annotation
        expect(instance).to.have.property('annotation');
        // expect(instance.annotation).to.be(expectedValueLiteral);
      });

      it('should have the property property (base name: "property")', function() {
        // TODO: update the code to test the property property
        expect(instance).to.have.property('property');
        // expect(instance.property).to.be(expectedValueLiteral);
      });

      it('should have the property orgValue (base name: "orgValue")', function() {
        // TODO: update the code to test the property orgValue
        expect(instance).to.have.property('orgValue');
        // expect(instance.orgValue).to.be(expectedValueLiteral);
      });

      it('should have the property newValue (base name: "newValue")', function() {
        // TODO: update the code to test the property newValue
        expect(instance).to.have.property('newValue');
        // expect(instance.newValue).to.be(expectedValueLiteral);
      });

      it('should have the property deploymentId (base name: "deploymentId")', function() {
        // TODO: update the code to test the property deploymentId
        expect(instance).to.have.property('deploymentId');
        // expect(instance.deploymentId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionId (base name: "caseDefinitionId")', function() {
        // TODO: update the code to test the property caseDefinitionId
        expect(instance).to.have.property('caseDefinitionId');
        // expect(instance.caseDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseExecutionId (base name: "caseExecutionId")', function() {
        // TODO: update the code to test the property caseExecutionId
        expect(instance).to.have.property('caseExecutionId');
        // expect(instance.caseExecutionId).to.be(expectedValueLiteral);
      });

      it('should have the property taskId (base name: "taskId")', function() {
        // TODO: update the code to test the property taskId
        expect(instance).to.have.property('taskId');
        // expect(instance.taskId).to.be(expectedValueLiteral);
      });

      it('should have the property externalTaskId (base name: "externalTaskId")', function() {
        // TODO: update the code to test the property externalTaskId
        expect(instance).to.have.property('externalTaskId');
        // expect(instance.externalTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property batchId (base name: "batchId")', function() {
        // TODO: update the code to test the property batchId
        expect(instance).to.have.property('batchId');
        // expect(instance.batchId).to.be(expectedValueLiteral);
      });

      it('should have the property jobId (base name: "jobId")', function() {
        // TODO: update the code to test the property jobId
        expect(instance).to.have.property('jobId');
        // expect(instance.jobId).to.be(expectedValueLiteral);
      });

      it('should have the property jobDefinitionId (base name: "jobDefinitionId")', function() {
        // TODO: update the code to test the property jobDefinitionId
        expect(instance).to.have.property('jobDefinitionId');
        // expect(instance.jobDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property removalTime (base name: "removalTime")', function() {
        // TODO: update the code to test the property removalTime
        expect(instance).to.have.property('removalTime');
        // expect(instance.removalTime).to.be(expectedValueLiteral);
      });

      it('should have the property rootProcessInstanceId (base name: "rootProcessInstanceId")', function() {
        // TODO: update the code to test the property rootProcessInstanceId
        expect(instance).to.have.property('rootProcessInstanceId');
        // expect(instance.rootProcessInstanceId).to.be(expectedValueLiteral);
      });

    });
  });

}));
