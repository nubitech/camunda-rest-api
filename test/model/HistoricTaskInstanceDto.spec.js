/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricTaskInstanceDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricTaskInstanceDto();
      });

      it('should create an instance of HistoricTaskInstanceDto', function() {
        // TODO: update the code to test HistoricTaskInstanceDto
        expect(instance).to.be.a(CamundaRestApi.HistoricTaskInstanceDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionKey (base name: "caseDefinitionKey")', function() {
        // TODO: update the code to test the property caseDefinitionKey
        expect(instance).to.have.property('caseDefinitionKey');
        // expect(instance.caseDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionId (base name: "caseDefinitionId")', function() {
        // TODO: update the code to test the property caseDefinitionId
        expect(instance).to.have.property('caseDefinitionId');
        // expect(instance.caseDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseExecutionId (base name: "caseExecutionId")', function() {
        // TODO: update the code to test the property caseExecutionId
        expect(instance).to.have.property('caseExecutionId');
        // expect(instance.caseExecutionId).to.be(expectedValueLiteral);
      });

      it('should have the property activityInstanceId (base name: "activityInstanceId")', function() {
        // TODO: update the code to test the property activityInstanceId
        expect(instance).to.have.property('activityInstanceId');
        // expect(instance.activityInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property deleteReason (base name: "deleteReason")', function() {
        // TODO: update the code to test the property deleteReason
        expect(instance).to.have.property('deleteReason');
        // expect(instance.deleteReason).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property assignee (base name: "assignee")', function() {
        // TODO: update the code to test the property assignee
        expect(instance).to.have.property('assignee');
        // expect(instance.assignee).to.be(expectedValueLiteral);
      });

      it('should have the property startTime (base name: "startTime")', function() {
        // TODO: update the code to test the property startTime
        expect(instance).to.have.property('startTime');
        // expect(instance.startTime).to.be(expectedValueLiteral);
      });

      it('should have the property endTime (base name: "endTime")', function() {
        // TODO: update the code to test the property endTime
        expect(instance).to.have.property('endTime');
        // expect(instance.endTime).to.be(expectedValueLiteral);
      });

      it('should have the property duration (base name: "duration")', function() {
        // TODO: update the code to test the property duration
        expect(instance).to.have.property('duration');
        // expect(instance.duration).to.be(expectedValueLiteral);
      });

      it('should have the property taskDefinitionKey (base name: "taskDefinitionKey")', function() {
        // TODO: update the code to test the property taskDefinitionKey
        expect(instance).to.have.property('taskDefinitionKey');
        // expect(instance.taskDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property priority (base name: "priority")', function() {
        // TODO: update the code to test the property priority
        expect(instance).to.have.property('priority');
        // expect(instance.priority).to.be(expectedValueLiteral);
      });

      it('should have the property due (base name: "due")', function() {
        // TODO: update the code to test the property due
        expect(instance).to.have.property('due');
        // expect(instance.due).to.be(expectedValueLiteral);
      });

      it('should have the property parentTaskId (base name: "parentTaskId")', function() {
        // TODO: update the code to test the property parentTaskId
        expect(instance).to.have.property('parentTaskId');
        // expect(instance.parentTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property followUp (base name: "followUp")', function() {
        // TODO: update the code to test the property followUp
        expect(instance).to.have.property('followUp');
        // expect(instance.followUp).to.be(expectedValueLiteral);
      });

      it('should have the property tenantId (base name: "tenantId")', function() {
        // TODO: update the code to test the property tenantId
        expect(instance).to.have.property('tenantId');
        // expect(instance.tenantId).to.be(expectedValueLiteral);
      });

      it('should have the property removalTime (base name: "removalTime")', function() {
        // TODO: update the code to test the property removalTime
        expect(instance).to.have.property('removalTime');
        // expect(instance.removalTime).to.be(expectedValueLiteral);
      });

      it('should have the property rootProcessInstanceId (base name: "rootProcessInstanceId")', function() {
        // TODO: update the code to test the property rootProcessInstanceId
        expect(instance).to.have.property('rootProcessInstanceId');
        // expect(instance.rootProcessInstanceId).to.be(expectedValueLiteral);
      });

    });
  });

}));
