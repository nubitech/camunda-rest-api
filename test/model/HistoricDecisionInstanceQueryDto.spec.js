/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricDecisionInstanceQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricDecisionInstanceQueryDto();
      });

      it('should create an instance of HistoricDecisionInstanceQueryDto', function() {
        // TODO: update the code to test HistoricDecisionInstanceQueryDto
        expect(instance).to.be.a(CamundaRestApi.HistoricDecisionInstanceQueryDto);
      });

      it('should have the property decisionInstanceId (base name: "decisionInstanceId")', function() {
        // TODO: update the code to test the property decisionInstanceId
        expect(instance).to.have.property('decisionInstanceId');
        // expect(instance.decisionInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property decisionInstanceIdIn (base name: "decisionInstanceIdIn")', function() {
        // TODO: update the code to test the property decisionInstanceIdIn
        expect(instance).to.have.property('decisionInstanceIdIn');
        // expect(instance.decisionInstanceIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property decisionDefinitionId (base name: "decisionDefinitionId")', function() {
        // TODO: update the code to test the property decisionDefinitionId
        expect(instance).to.have.property('decisionDefinitionId');
        // expect(instance.decisionDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property decisionDefinitionIdIn (base name: "decisionDefinitionIdIn")', function() {
        // TODO: update the code to test the property decisionDefinitionIdIn
        expect(instance).to.have.property('decisionDefinitionIdIn');
        // expect(instance.decisionDefinitionIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property decisionDefinitionKey (base name: "decisionDefinitionKey")', function() {
        // TODO: update the code to test the property decisionDefinitionKey
        expect(instance).to.have.property('decisionDefinitionKey');
        // expect(instance.decisionDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property decisionDefinitionKeyIn (base name: "decisionDefinitionKeyIn")', function() {
        // TODO: update the code to test the property decisionDefinitionKeyIn
        expect(instance).to.have.property('decisionDefinitionKeyIn');
        // expect(instance.decisionDefinitionKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property decisionDefinitionName (base name: "decisionDefinitionName")', function() {
        // TODO: update the code to test the property decisionDefinitionName
        expect(instance).to.have.property('decisionDefinitionName');
        // expect(instance.decisionDefinitionName).to.be(expectedValueLiteral);
      });

      it('should have the property decisionDefinitionNameLike (base name: "decisionDefinitionNameLike")', function() {
        // TODO: update the code to test the property decisionDefinitionNameLike
        expect(instance).to.have.property('decisionDefinitionNameLike');
        // expect(instance.decisionDefinitionNameLike).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionId (base name: "caseDefinitionId")', function() {
        // TODO: update the code to test the property caseDefinitionId
        expect(instance).to.have.property('caseDefinitionId');
        // expect(instance.caseDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionKey (base name: "caseDefinitionKey")', function() {
        // TODO: update the code to test the property caseDefinitionKey
        expect(instance).to.have.property('caseDefinitionKey');
        // expect(instance.caseDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property activityIdIn (base name: "activityIdIn")', function() {
        // TODO: update the code to test the property activityIdIn
        expect(instance).to.have.property('activityIdIn');
        // expect(instance.activityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property activityInstanceIdIn (base name: "activityInstanceIdIn")', function() {
        // TODO: update the code to test the property activityInstanceIdIn
        expect(instance).to.have.property('activityInstanceIdIn');
        // expect(instance.activityInstanceIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property evaluatedBefore (base name: "evaluatedBefore")', function() {
        // TODO: update the code to test the property evaluatedBefore
        expect(instance).to.have.property('evaluatedBefore');
        // expect(instance.evaluatedBefore).to.be(expectedValueLiteral);
      });

      it('should have the property evaluatedAfter (base name: "evaluatedAfter")', function() {
        // TODO: update the code to test the property evaluatedAfter
        expect(instance).to.have.property('evaluatedAfter');
        // expect(instance.evaluatedAfter).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property rootDecisionInstanceId (base name: "rootDecisionInstanceId")', function() {
        // TODO: update the code to test the property rootDecisionInstanceId
        expect(instance).to.have.property('rootDecisionInstanceId');
        // expect(instance.rootDecisionInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property rootDecisionInstancesOnly (base name: "rootDecisionInstancesOnly")', function() {
        // TODO: update the code to test the property rootDecisionInstancesOnly
        expect(instance).to.have.property('rootDecisionInstancesOnly');
        // expect(instance.rootDecisionInstancesOnly).to.be(expectedValueLiteral);
      });

      it('should have the property decisionRequirementsDefinitionId (base name: "decisionRequirementsDefinitionId")', function() {
        // TODO: update the code to test the property decisionRequirementsDefinitionId
        expect(instance).to.have.property('decisionRequirementsDefinitionId');
        // expect(instance.decisionRequirementsDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property decisionRequirementsDefinitionKey (base name: "decisionRequirementsDefinitionKey")', function() {
        // TODO: update the code to test the property decisionRequirementsDefinitionKey
        expect(instance).to.have.property('decisionRequirementsDefinitionKey');
        // expect(instance.decisionRequirementsDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property includeInputs (base name: "includeInputs")', function() {
        // TODO: update the code to test the property includeInputs
        expect(instance).to.have.property('includeInputs');
        // expect(instance.includeInputs).to.be(expectedValueLiteral);
      });

      it('should have the property includeOutputs (base name: "includeOutputs")', function() {
        // TODO: update the code to test the property includeOutputs
        expect(instance).to.have.property('includeOutputs');
        // expect(instance.includeOutputs).to.be(expectedValueLiteral);
      });

      it('should have the property disableBinaryFetching (base name: "disableBinaryFetching")', function() {
        // TODO: update the code to test the property disableBinaryFetching
        expect(instance).to.have.property('disableBinaryFetching');
        // expect(instance.disableBinaryFetching).to.be(expectedValueLiteral);
      });

      it('should have the property disableCustomObjectDeserialization (base name: "disableCustomObjectDeserialization")', function() {
        // TODO: update the code to test the property disableCustomObjectDeserialization
        expect(instance).to.have.property('disableCustomObjectDeserialization');
        // expect(instance.disableCustomObjectDeserialization).to.be(expectedValueLiteral);
      });

    });
  });

}));
