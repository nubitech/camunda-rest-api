/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ExternalTaskQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.ExternalTaskQueryDto();
      });

      it('should create an instance of ExternalTaskQueryDto', function() {
        // TODO: update the code to test ExternalTaskQueryDto
        expect(instance).to.be.a(CamundaRestApi.ExternalTaskQueryDto);
      });

      it('should have the property externalTaskId (base name: "externalTaskId")', function() {
        // TODO: update the code to test the property externalTaskId
        expect(instance).to.have.property('externalTaskId');
        // expect(instance.externalTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property externalTaskIdIn (base name: "externalTaskIdIn")', function() {
        // TODO: update the code to test the property externalTaskIdIn
        expect(instance).to.have.property('externalTaskIdIn');
        // expect(instance.externalTaskIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property topicName (base name: "topicName")', function() {
        // TODO: update the code to test the property topicName
        expect(instance).to.have.property('topicName');
        // expect(instance.topicName).to.be(expectedValueLiteral);
      });

      it('should have the property workerId (base name: "workerId")', function() {
        // TODO: update the code to test the property workerId
        expect(instance).to.have.property('workerId');
        // expect(instance.workerId).to.be(expectedValueLiteral);
      });

      it('should have the property locked (base name: "locked")', function() {
        // TODO: update the code to test the property locked
        expect(instance).to.have.property('locked');
        // expect(instance.locked).to.be(expectedValueLiteral);
      });

      it('should have the property notLocked (base name: "notLocked")', function() {
        // TODO: update the code to test the property notLocked
        expect(instance).to.have.property('notLocked');
        // expect(instance.notLocked).to.be(expectedValueLiteral);
      });

      it('should have the property withRetriesLeft (base name: "withRetriesLeft")', function() {
        // TODO: update the code to test the property withRetriesLeft
        expect(instance).to.have.property('withRetriesLeft');
        // expect(instance.withRetriesLeft).to.be(expectedValueLiteral);
      });

      it('should have the property noRetriesLeft (base name: "noRetriesLeft")', function() {
        // TODO: update the code to test the property noRetriesLeft
        expect(instance).to.have.property('noRetriesLeft');
        // expect(instance.noRetriesLeft).to.be(expectedValueLiteral);
      });

      it('should have the property lockExpirationAfter (base name: "lockExpirationAfter")', function() {
        // TODO: update the code to test the property lockExpirationAfter
        expect(instance).to.have.property('lockExpirationAfter');
        // expect(instance.lockExpirationAfter).to.be(expectedValueLiteral);
      });

      it('should have the property lockExpirationBefore (base name: "lockExpirationBefore")', function() {
        // TODO: update the code to test the property lockExpirationBefore
        expect(instance).to.have.property('lockExpirationBefore');
        // expect(instance.lockExpirationBefore).to.be(expectedValueLiteral);
      });

      it('should have the property activityId (base name: "activityId")', function() {
        // TODO: update the code to test the property activityId
        expect(instance).to.have.property('activityId');
        // expect(instance.activityId).to.be(expectedValueLiteral);
      });

      it('should have the property activityIdIn (base name: "activityIdIn")', function() {
        // TODO: update the code to test the property activityIdIn
        expect(instance).to.have.property('activityIdIn');
        // expect(instance.activityIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceIdIn (base name: "processInstanceIdIn")', function() {
        // TODO: update the code to test the property processInstanceIdIn
        expect(instance).to.have.property('processInstanceIdIn');
        // expect(instance.processInstanceIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property suspended (base name: "suspended")', function() {
        // TODO: update the code to test the property suspended
        expect(instance).to.have.property('suspended');
        // expect(instance.suspended).to.be(expectedValueLiteral);
      });

      it('should have the property priorityHigherThanOrEquals (base name: "priorityHigherThanOrEquals")', function() {
        // TODO: update the code to test the property priorityHigherThanOrEquals
        expect(instance).to.have.property('priorityHigherThanOrEquals');
        // expect(instance.priorityHigherThanOrEquals).to.be(expectedValueLiteral);
      });

      it('should have the property priorityLowerThanOrEquals (base name: "priorityLowerThanOrEquals")', function() {
        // TODO: update the code to test the property priorityLowerThanOrEquals
        expect(instance).to.have.property('priorityLowerThanOrEquals');
        // expect(instance.priorityLowerThanOrEquals).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
