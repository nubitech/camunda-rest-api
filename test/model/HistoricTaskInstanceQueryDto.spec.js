/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HistoricTaskInstanceQueryDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.HistoricTaskInstanceQueryDto();
      });

      it('should create an instance of HistoricTaskInstanceQueryDto', function() {
        // TODO: update the code to test HistoricTaskInstanceQueryDto
        expect(instance).to.be.a(CamundaRestApi.HistoricTaskInstanceQueryDto);
      });

      it('should have the property taskId (base name: "taskId")', function() {
        // TODO: update the code to test the property taskId
        expect(instance).to.have.property('taskId');
        // expect(instance.taskId).to.be(expectedValueLiteral);
      });

      it('should have the property taskParentTaskId (base name: "taskParentTaskId")', function() {
        // TODO: update the code to test the property taskParentTaskId
        expect(instance).to.have.property('taskParentTaskId');
        // expect(instance.taskParentTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKey (base name: "processInstanceBusinessKey")', function() {
        // TODO: update the code to test the property processInstanceBusinessKey
        expect(instance).to.have.property('processInstanceBusinessKey');
        // expect(instance.processInstanceBusinessKey).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyIn (base name: "processInstanceBusinessKeyIn")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyIn
        expect(instance).to.have.property('processInstanceBusinessKeyIn');
        // expect(instance.processInstanceBusinessKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceBusinessKeyLike (base name: "processInstanceBusinessKeyLike")', function() {
        // TODO: update the code to test the property processInstanceBusinessKeyLike
        expect(instance).to.have.property('processInstanceBusinessKeyLike');
        // expect(instance.processInstanceBusinessKeyLike).to.be(expectedValueLiteral);
      });

      it('should have the property executionId (base name: "executionId")', function() {
        // TODO: update the code to test the property executionId
        expect(instance).to.have.property('executionId');
        // expect(instance.executionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionId (base name: "processDefinitionId")', function() {
        // TODO: update the code to test the property processDefinitionId
        expect(instance).to.have.property('processDefinitionId');
        // expect(instance.processDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionKey (base name: "processDefinitionKey")', function() {
        // TODO: update the code to test the property processDefinitionKey
        expect(instance).to.have.property('processDefinitionKey');
        // expect(instance.processDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property processDefinitionName (base name: "processDefinitionName")', function() {
        // TODO: update the code to test the property processDefinitionName
        expect(instance).to.have.property('processDefinitionName');
        // expect(instance.processDefinitionName).to.be(expectedValueLiteral);
      });

      it('should have the property caseInstanceId (base name: "caseInstanceId")', function() {
        // TODO: update the code to test the property caseInstanceId
        expect(instance).to.have.property('caseInstanceId');
        // expect(instance.caseInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property caseExecutionId (base name: "caseExecutionId")', function() {
        // TODO: update the code to test the property caseExecutionId
        expect(instance).to.have.property('caseExecutionId');
        // expect(instance.caseExecutionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionId (base name: "caseDefinitionId")', function() {
        // TODO: update the code to test the property caseDefinitionId
        expect(instance).to.have.property('caseDefinitionId');
        // expect(instance.caseDefinitionId).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionKey (base name: "caseDefinitionKey")', function() {
        // TODO: update the code to test the property caseDefinitionKey
        expect(instance).to.have.property('caseDefinitionKey');
        // expect(instance.caseDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property caseDefinitionName (base name: "caseDefinitionName")', function() {
        // TODO: update the code to test the property caseDefinitionName
        expect(instance).to.have.property('caseDefinitionName');
        // expect(instance.caseDefinitionName).to.be(expectedValueLiteral);
      });

      it('should have the property activityInstanceIdIn (base name: "activityInstanceIdIn")', function() {
        // TODO: update the code to test the property activityInstanceIdIn
        expect(instance).to.have.property('activityInstanceIdIn');
        // expect(instance.activityInstanceIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property taskName (base name: "taskName")', function() {
        // TODO: update the code to test the property taskName
        expect(instance).to.have.property('taskName');
        // expect(instance.taskName).to.be(expectedValueLiteral);
      });

      it('should have the property taskNameLike (base name: "taskNameLike")', function() {
        // TODO: update the code to test the property taskNameLike
        expect(instance).to.have.property('taskNameLike');
        // expect(instance.taskNameLike).to.be(expectedValueLiteral);
      });

      it('should have the property taskDescription (base name: "taskDescription")', function() {
        // TODO: update the code to test the property taskDescription
        expect(instance).to.have.property('taskDescription');
        // expect(instance.taskDescription).to.be(expectedValueLiteral);
      });

      it('should have the property taskDescriptionLike (base name: "taskDescriptionLike")', function() {
        // TODO: update the code to test the property taskDescriptionLike
        expect(instance).to.have.property('taskDescriptionLike');
        // expect(instance.taskDescriptionLike).to.be(expectedValueLiteral);
      });

      it('should have the property taskDefinitionKey (base name: "taskDefinitionKey")', function() {
        // TODO: update the code to test the property taskDefinitionKey
        expect(instance).to.have.property('taskDefinitionKey');
        // expect(instance.taskDefinitionKey).to.be(expectedValueLiteral);
      });

      it('should have the property taskDefinitionKeyIn (base name: "taskDefinitionKeyIn")', function() {
        // TODO: update the code to test the property taskDefinitionKeyIn
        expect(instance).to.have.property('taskDefinitionKeyIn');
        // expect(instance.taskDefinitionKeyIn).to.be(expectedValueLiteral);
      });

      it('should have the property taskDeleteReason (base name: "taskDeleteReason")', function() {
        // TODO: update the code to test the property taskDeleteReason
        expect(instance).to.have.property('taskDeleteReason');
        // expect(instance.taskDeleteReason).to.be(expectedValueLiteral);
      });

      it('should have the property taskDeleteReasonLike (base name: "taskDeleteReasonLike")', function() {
        // TODO: update the code to test the property taskDeleteReasonLike
        expect(instance).to.have.property('taskDeleteReasonLike');
        // expect(instance.taskDeleteReasonLike).to.be(expectedValueLiteral);
      });

      it('should have the property taskAssignee (base name: "taskAssignee")', function() {
        // TODO: update the code to test the property taskAssignee
        expect(instance).to.have.property('taskAssignee');
        // expect(instance.taskAssignee).to.be(expectedValueLiteral);
      });

      it('should have the property taskAssigneeLike (base name: "taskAssigneeLike")', function() {
        // TODO: update the code to test the property taskAssigneeLike
        expect(instance).to.have.property('taskAssigneeLike');
        // expect(instance.taskAssigneeLike).to.be(expectedValueLiteral);
      });

      it('should have the property taskOwner (base name: "taskOwner")', function() {
        // TODO: update the code to test the property taskOwner
        expect(instance).to.have.property('taskOwner');
        // expect(instance.taskOwner).to.be(expectedValueLiteral);
      });

      it('should have the property taskOwnerLike (base name: "taskOwnerLike")', function() {
        // TODO: update the code to test the property taskOwnerLike
        expect(instance).to.have.property('taskOwnerLike');
        // expect(instance.taskOwnerLike).to.be(expectedValueLiteral);
      });

      it('should have the property taskPriority (base name: "taskPriority")', function() {
        // TODO: update the code to test the property taskPriority
        expect(instance).to.have.property('taskPriority');
        // expect(instance.taskPriority).to.be(expectedValueLiteral);
      });

      it('should have the property assigned (base name: "assigned")', function() {
        // TODO: update the code to test the property assigned
        expect(instance).to.have.property('assigned');
        // expect(instance.assigned).to.be(expectedValueLiteral);
      });

      it('should have the property unassigned (base name: "unassigned")', function() {
        // TODO: update the code to test the property unassigned
        expect(instance).to.have.property('unassigned');
        // expect(instance.unassigned).to.be(expectedValueLiteral);
      });

      it('should have the property finished (base name: "finished")', function() {
        // TODO: update the code to test the property finished
        expect(instance).to.have.property('finished');
        // expect(instance.finished).to.be(expectedValueLiteral);
      });

      it('should have the property unfinished (base name: "unfinished")', function() {
        // TODO: update the code to test the property unfinished
        expect(instance).to.have.property('unfinished');
        // expect(instance.unfinished).to.be(expectedValueLiteral);
      });

      it('should have the property processFinished (base name: "processFinished")', function() {
        // TODO: update the code to test the property processFinished
        expect(instance).to.have.property('processFinished');
        // expect(instance.processFinished).to.be(expectedValueLiteral);
      });

      it('should have the property processUnfinished (base name: "processUnfinished")', function() {
        // TODO: update the code to test the property processUnfinished
        expect(instance).to.have.property('processUnfinished');
        // expect(instance.processUnfinished).to.be(expectedValueLiteral);
      });

      it('should have the property taskDueDate (base name: "taskDueDate")', function() {
        // TODO: update the code to test the property taskDueDate
        expect(instance).to.have.property('taskDueDate');
        // expect(instance.taskDueDate).to.be(expectedValueLiteral);
      });

      it('should have the property taskDueDateBefore (base name: "taskDueDateBefore")', function() {
        // TODO: update the code to test the property taskDueDateBefore
        expect(instance).to.have.property('taskDueDateBefore');
        // expect(instance.taskDueDateBefore).to.be(expectedValueLiteral);
      });

      it('should have the property taskDueDateAfter (base name: "taskDueDateAfter")', function() {
        // TODO: update the code to test the property taskDueDateAfter
        expect(instance).to.have.property('taskDueDateAfter');
        // expect(instance.taskDueDateAfter).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTaskDueDate (base name: "withoutTaskDueDate")', function() {
        // TODO: update the code to test the property withoutTaskDueDate
        expect(instance).to.have.property('withoutTaskDueDate');
        // expect(instance.withoutTaskDueDate).to.be(expectedValueLiteral);
      });

      it('should have the property taskFollowUpDate (base name: "taskFollowUpDate")', function() {
        // TODO: update the code to test the property taskFollowUpDate
        expect(instance).to.have.property('taskFollowUpDate');
        // expect(instance.taskFollowUpDate).to.be(expectedValueLiteral);
      });

      it('should have the property taskFollowUpDateBefore (base name: "taskFollowUpDateBefore")', function() {
        // TODO: update the code to test the property taskFollowUpDateBefore
        expect(instance).to.have.property('taskFollowUpDateBefore');
        // expect(instance.taskFollowUpDateBefore).to.be(expectedValueLiteral);
      });

      it('should have the property taskFollowUpDateAfter (base name: "taskFollowUpDateAfter")', function() {
        // TODO: update the code to test the property taskFollowUpDateAfter
        expect(instance).to.have.property('taskFollowUpDateAfter');
        // expect(instance.taskFollowUpDateAfter).to.be(expectedValueLiteral);
      });

      it('should have the property startedBefore (base name: "startedBefore")', function() {
        // TODO: update the code to test the property startedBefore
        expect(instance).to.have.property('startedBefore');
        // expect(instance.startedBefore).to.be(expectedValueLiteral);
      });

      it('should have the property startedAfter (base name: "startedAfter")', function() {
        // TODO: update the code to test the property startedAfter
        expect(instance).to.have.property('startedAfter');
        // expect(instance.startedAfter).to.be(expectedValueLiteral);
      });

      it('should have the property finishedBefore (base name: "finishedBefore")', function() {
        // TODO: update the code to test the property finishedBefore
        expect(instance).to.have.property('finishedBefore');
        // expect(instance.finishedBefore).to.be(expectedValueLiteral);
      });

      it('should have the property finishedAfter (base name: "finishedAfter")', function() {
        // TODO: update the code to test the property finishedAfter
        expect(instance).to.have.property('finishedAfter');
        // expect(instance.finishedAfter).to.be(expectedValueLiteral);
      });

      it('should have the property tenantIdIn (base name: "tenantIdIn")', function() {
        // TODO: update the code to test the property tenantIdIn
        expect(instance).to.have.property('tenantIdIn');
        // expect(instance.tenantIdIn).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property taskVariables (base name: "taskVariables")', function() {
        // TODO: update the code to test the property taskVariables
        expect(instance).to.have.property('taskVariables');
        // expect(instance.taskVariables).to.be(expectedValueLiteral);
      });

      it('should have the property processVariables (base name: "processVariables")', function() {
        // TODO: update the code to test the property processVariables
        expect(instance).to.have.property('processVariables');
        // expect(instance.processVariables).to.be(expectedValueLiteral);
      });

      it('should have the property variableNamesIgnoreCase (base name: "variableNamesIgnoreCase")', function() {
        // TODO: update the code to test the property variableNamesIgnoreCase
        expect(instance).to.have.property('variableNamesIgnoreCase');
        // expect(instance.variableNamesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property variableValuesIgnoreCase (base name: "variableValuesIgnoreCase")', function() {
        // TODO: update the code to test the property variableValuesIgnoreCase
        expect(instance).to.have.property('variableValuesIgnoreCase');
        // expect(instance.variableValuesIgnoreCase).to.be(expectedValueLiteral);
      });

      it('should have the property taskInvolvedUser (base name: "taskInvolvedUser")', function() {
        // TODO: update the code to test the property taskInvolvedUser
        expect(instance).to.have.property('taskInvolvedUser');
        // expect(instance.taskInvolvedUser).to.be(expectedValueLiteral);
      });

      it('should have the property taskInvolvedGroup (base name: "taskInvolvedGroup")', function() {
        // TODO: update the code to test the property taskInvolvedGroup
        expect(instance).to.have.property('taskInvolvedGroup');
        // expect(instance.taskInvolvedGroup).to.be(expectedValueLiteral);
      });

      it('should have the property taskHadCandidateUser (base name: "taskHadCandidateUser")', function() {
        // TODO: update the code to test the property taskHadCandidateUser
        expect(instance).to.have.property('taskHadCandidateUser');
        // expect(instance.taskHadCandidateUser).to.be(expectedValueLiteral);
      });

      it('should have the property taskHadCandidateGroup (base name: "taskHadCandidateGroup")', function() {
        // TODO: update the code to test the property taskHadCandidateGroup
        expect(instance).to.have.property('taskHadCandidateGroup');
        // expect(instance.taskHadCandidateGroup).to.be(expectedValueLiteral);
      });

      it('should have the property withCandidateGroups (base name: "withCandidateGroups")', function() {
        // TODO: update the code to test the property withCandidateGroups
        expect(instance).to.have.property('withCandidateGroups');
        // expect(instance.withCandidateGroups).to.be(expectedValueLiteral);
      });

      it('should have the property withoutCandidateGroups (base name: "withoutCandidateGroups")', function() {
        // TODO: update the code to test the property withoutCandidateGroups
        expect(instance).to.have.property('withoutCandidateGroups');
        // expect(instance.withoutCandidateGroups).to.be(expectedValueLiteral);
      });

      it('should have the property orQueries (base name: "orQueries")', function() {
        // TODO: update the code to test the property orQueries
        expect(instance).to.have.property('orQueries');
        // expect(instance.orQueries).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

    });
  });

}));
