/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CalledProcessDefinitionDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.CalledProcessDefinitionDto();
      });

      it('should create an instance of CalledProcessDefinitionDto', function() {
        // TODO: update the code to test CalledProcessDefinitionDto
        expect(instance).to.be.a(CamundaRestApi.CalledProcessDefinitionDto);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property key (base name: "key")', function() {
        // TODO: update the code to test the property key
        expect(instance).to.have.property('key');
        // expect(instance.key).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property resource (base name: "resource")', function() {
        // TODO: update the code to test the property resource
        expect(instance).to.have.property('resource');
        // expect(instance.resource).to.be(expectedValueLiteral);
      });

      it('should have the property deploymentId (base name: "deploymentId")', function() {
        // TODO: update the code to test the property deploymentId
        expect(instance).to.have.property('deploymentId');
        // expect(instance.deploymentId).to.be(expectedValueLiteral);
      });

      it('should have the property diagram (base name: "diagram")', function() {
        // TODO: update the code to test the property diagram
        expect(instance).to.have.property('diagram');
        // expect(instance.diagram).to.be(expectedValueLiteral);
      });

      it('should have the property suspended (base name: "suspended")', function() {
        // TODO: update the code to test the property suspended
        expect(instance).to.have.property('suspended');
        // expect(instance.suspended).to.be(expectedValueLiteral);
      });

      it('should have the property tenantId (base name: "tenantId")', function() {
        // TODO: update the code to test the property tenantId
        expect(instance).to.have.property('tenantId');
        // expect(instance.tenantId).to.be(expectedValueLiteral);
      });

      it('should have the property versionTag (base name: "versionTag")', function() {
        // TODO: update the code to test the property versionTag
        expect(instance).to.have.property('versionTag');
        // expect(instance.versionTag).to.be(expectedValueLiteral);
      });

      it('should have the property historyTimeToLive (base name: "historyTimeToLive")', function() {
        // TODO: update the code to test the property historyTimeToLive
        expect(instance).to.have.property('historyTimeToLive');
        // expect(instance.historyTimeToLive).to.be(expectedValueLiteral);
      });

      it('should have the property startableInTasklist (base name: "startableInTasklist")', function() {
        // TODO: update the code to test the property startableInTasklist
        expect(instance).to.have.property('startableInTasklist');
        // expect(instance.startableInTasklist).to.be(expectedValueLiteral);
      });

    });
  });

}));
