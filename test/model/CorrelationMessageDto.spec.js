/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.20.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CamundaRestApi);
  }
}(this, function(expect, CamundaRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CorrelationMessageDto', function() {
      beforeEach(function() {
        instance = new CamundaRestApi.CorrelationMessageDto();
      });

      it('should create an instance of CorrelationMessageDto', function() {
        // TODO: update the code to test CorrelationMessageDto
        expect(instance).to.be.a(CamundaRestApi.CorrelationMessageDto);
      });

      it('should have the property messageName (base name: "messageName")', function() {
        // TODO: update the code to test the property messageName
        expect(instance).to.have.property('messageName');
        // expect(instance.messageName).to.be(expectedValueLiteral);
      });

      it('should have the property businessKey (base name: "businessKey")', function() {
        // TODO: update the code to test the property businessKey
        expect(instance).to.have.property('businessKey');
        // expect(instance.businessKey).to.be(expectedValueLiteral);
      });

      it('should have the property tenantId (base name: "tenantId")', function() {
        // TODO: update the code to test the property tenantId
        expect(instance).to.have.property('tenantId');
        // expect(instance.tenantId).to.be(expectedValueLiteral);
      });

      it('should have the property withoutTenantId (base name: "withoutTenantId")', function() {
        // TODO: update the code to test the property withoutTenantId
        expect(instance).to.have.property('withoutTenantId');
        // expect(instance.withoutTenantId).to.be(expectedValueLiteral);
      });

      it('should have the property processInstanceId (base name: "processInstanceId")', function() {
        // TODO: update the code to test the property processInstanceId
        expect(instance).to.have.property('processInstanceId');
        // expect(instance.processInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property correlationKeys (base name: "correlationKeys")', function() {
        // TODO: update the code to test the property correlationKeys
        expect(instance).to.have.property('correlationKeys');
        // expect(instance.correlationKeys).to.be(expectedValueLiteral);
      });

      it('should have the property localCorrelationKeys (base name: "localCorrelationKeys")', function() {
        // TODO: update the code to test the property localCorrelationKeys
        expect(instance).to.have.property('localCorrelationKeys');
        // expect(instance.localCorrelationKeys).to.be(expectedValueLiteral);
      });

      it('should have the property processVariables (base name: "processVariables")', function() {
        // TODO: update the code to test the property processVariables
        expect(instance).to.have.property('processVariables');
        // expect(instance.processVariables).to.be(expectedValueLiteral);
      });

      it('should have the property processVariablesLocal (base name: "processVariablesLocal")', function() {
        // TODO: update the code to test the property processVariablesLocal
        expect(instance).to.have.property('processVariablesLocal');
        // expect(instance.processVariablesLocal).to.be(expectedValueLiteral);
      });

      it('should have the property all (base name: "all")', function() {
        // TODO: update the code to test the property all
        expect(instance).to.have.property('all');
        // expect(instance.all).to.be(expectedValueLiteral);
      });

      it('should have the property resultEnabled (base name: "resultEnabled")', function() {
        // TODO: update the code to test the property resultEnabled
        expect(instance).to.have.property('resultEnabled');
        // expect(instance.resultEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property variablesInResultEnabled (base name: "variablesInResultEnabled")', function() {
        // TODO: update the code to test the property variablesInResultEnabled
        expect(instance).to.have.property('variablesInResultEnabled');
        // expect(instance.variablesInResultEnabled).to.be(expectedValueLiteral);
      });

    });
  });

}));
